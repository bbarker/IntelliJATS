// This was a generated file, created from ATS.bnf.
// But since we don't currently want to use the PSI
// parser generator, we leave it alone for now.

package com.atslangplugin

import com.atslangplugin.psi.ATSElementType
import com.atslangplugin.psi.ATSTokenType
//import com.atslangplugin.psi.impl.ATSKeyImpl;
//import com.atslangplugin.psi.impl.ATSPropertyImpl;
import com.intellij.lang.ASTNode
import com.intellij.psi.PsiElement
import com.intellij.psi.tree.IElementType

public trait ATSTokenTypes {
    companion object {

        public val ABSTYPE: IElementType = ATSTokenType("ABSTYPE")
        public val ADDRAT: IElementType = ATSTokenType("ADDRAT")
        public val AND: IElementType = ATSTokenType("AND")
        public val AS: IElementType = ATSTokenType("AS")
        public val ASSUME: IElementType = ATSTokenType("ASSUME")
        public val AT: IElementType = ATSTokenType("AT")
        public val ATLBRACE: IElementType = ATSTokenType("ATLBRACE")
        public val ATLBRACKET: IElementType = ATSTokenType("ATLBRACKET")
        public val ATLPAREN: IElementType = ATSTokenType("ATLPAREN")
        public val BACKSLASH: IElementType = ATSTokenType("BACKSLASH")
        public val BAD_CHARACTER: IElementType = ATSTokenType("BAD_CHARACTER")
        public val BANG: IElementType = ATSTokenType("BANG")
        public val BAR: IElementType = ATSTokenType("BAR")
        public val BEGIN: IElementType = ATSTokenType("BEGIN")
        public val BQUOTE: IElementType = ATSTokenType("BQUOTE")
        public val BQUOTELPAREN: IElementType = ATSTokenType("BQUOTELPAREN")
        public val CASE: IElementType = ATSTokenType("CASE")
        public val CDATA: IElementType = ATSTokenType("CDATA")
        public val CHAR: IElementType = ATSTokenType("CHAR")
        public val CLASSDEC: IElementType = ATSTokenType("CLASSDEC")
        public val COLON: IElementType = ATSTokenType("COLON")
        public val COLONLT: IElementType = ATSTokenType("COLONLT")
        public val COMMA: IElementType = ATSTokenType("COMMA")
        public val COMMALPAREN: IElementType = ATSTokenType("COMMALPAREN")
        public val COMMENT: IElementType = ATSTokenType("COMMENT")
        public val COMMENT_BLOCK: IElementType = ATSTokenType("COMMENT_BLOCK")
        public val COMMENT_LINE: IElementType = ATSTokenType("COMMENT_LINE")
        public val COMMENT_REST: IElementType = ATSTokenType("COMMENT_REST")
        public val CRLF: IElementType = ATSTokenType("CRLF")
        public val DATASORT: IElementType = ATSTokenType("DATASORT")
        public val DATATYPE: IElementType = ATSTokenType("DATATYPE")
        public val DLRARRPSZ: IElementType = ATSTokenType("DLRARRPSZ")
        public val DLRBREAK: IElementType = ATSTokenType("DLRBREAK")
        public val DLRCONTINUE: IElementType = ATSTokenType("DLRCONTINUE")
        public val DLRDELAY: IElementType = ATSTokenType("DLRDELAY")
        public val DLREFFMASK: IElementType = ATSTokenType("DLREFFMASK")
        public val DLREFFMASK_ARG: IElementType = ATSTokenType("DLREFFMASK_ARG")
        public val DLREXTERN: IElementType = ATSTokenType("DLREXTERN")
        public val DLREXTFCALL: IElementType = ATSTokenType("DLREXTFCALL")
        public val DLREXTKIND: IElementType = ATSTokenType("DLREXTKIND")
        public val DLREXTMCALL: IElementType = ATSTokenType("DLREXTMCALL")
        public val DLREXTVAL: IElementType = ATSTokenType("DLREXTVAL")
        public val DLREXTYPE: IElementType = ATSTokenType("DLREXTYPE")
        public val DLREXTYPE_STRUCT: IElementType = ATSTokenType("DLREXTYPE_STRUCT")
        public val DLRLST: IElementType = ATSTokenType("DLRLST")
        public val DLRMYFILENAME: IElementType = ATSTokenType("DLRMYFILENAME")
        public val DLRMYFUNCTION: IElementType = ATSTokenType("DLRMYFUNCTION")
        public val DLRMYLOCATION: IElementType = ATSTokenType("DLRMYLOCATION")
        public val DLRRAISE: IElementType = ATSTokenType("DLRRAISE")
        public val DLRREC: IElementType = ATSTokenType("DLRREC")
        public val DLRSHOWTYPE: IElementType = ATSTokenType("DLRSHOWTYPE")
        public val DLRTUP: IElementType = ATSTokenType("DLRTUP")
        public val DLRTEMPENVER: IElementType = ATSTokenType("DLRTEMPENVER")
        public val DLRVCOPYENV: IElementType = ATSTokenType("DLRVCOPYENV")
        public val DO: IElementType = ATSTokenType("DO")
        public val DOLLAR: IElementType = ATSTokenType("DOLLAR")
        public val DOT: IElementType = ATSTokenType("DOT")
        public val DOTDOT: IElementType = ATSTokenType("DOTDOT")
        public val DOTDOTDOT: IElementType = ATSTokenType("DOTDOTDOT")
        public val DOTINT: IElementType = ATSTokenType("DOTINT")
        public val DOTLT: IElementType = ATSTokenType("DOTLT")
        public val DOTLTGTDOT: IElementType = ATSTokenType("DOTLTGTDOT")
        public val DYNLOAD: IElementType = ATSTokenType("DYNLOAD")
        public val ELSE: IElementType = ATSTokenType("ELSE")
        public val END: IElementType = ATSTokenType("END")
        public val EOF: IElementType = ATSTokenType("EOF")
        public val EQ: IElementType = ATSTokenType("EQ")
        public val EQGT: IElementType = ATSTokenType("EQGT")
        public val EQGTGT: IElementType = ATSTokenType("EQGTGT")
        public val EQLT: IElementType = ATSTokenType("EQLT")
        public val EQLTGT: IElementType = ATSTokenType("EQLTGT")
        public val EQSLASHEQGT: IElementType = ATSTokenType("EQSLASHEQGT")
        public val EQSLASHEQGTGT: IElementType = ATSTokenType("EQSLASHEQGTGT")
        public val EXCEPTION: IElementType = ATSTokenType("EXCEPTION")
        public val EXTCODE: IElementType = ATSTokenType("EXTCODE")
        public val EXTERN: IElementType = ATSTokenType("EXTERN")
        public val EXTVAR: IElementType = ATSTokenType("EXTVAR")
        public val EXTYPE: IElementType = ATSTokenType("EXTYPE")
        public val FIX: IElementType = ATSTokenType("FIX")
        public val FIXITY: IElementType = ATSTokenType("FIXITY")
        public val FLOAT: IElementType = ATSTokenType("FLOAT")
        public val FOLDAT: IElementType = ATSTokenType("FOLDAT")
        public val FORSTAR: IElementType = ATSTokenType("FORSTAR")
        public val FREEAT: IElementType = ATSTokenType("FREEAT")
        public val FUN: IElementType = ATSTokenType("FUN")
        public val GT: IElementType = ATSTokenType("GT")
        public val GTDOT: IElementType = ATSTokenType("GTDOT")
        public val GTLT: IElementType = ATSTokenType("GTLT")
        public val HASH: IElementType = ATSTokenType("HASH")
        public val HASHLBRACKETOLON: IElementType = ATSTokenType("HASHLBRACKETOLON")
        public val IDENTIFIER: IElementType = ATSTokenType("IDENTIFIER") // Not exactly in ATS (CHECK_ME)
        public val IF: IElementType = ATSTokenType("IF")
        public val IMPLEMENT: IElementType = ATSTokenType("IMPLEMENT")
        public val IMPORT: IElementType = ATSTokenType("IMPORT")
        public val IN: IElementType = ATSTokenType("IN")
        public val INT: IElementType = ATSTokenType("INT")
        public val LAM: IElementType = ATSTokenType("LAM")
        public val LBRACE: IElementType = ATSTokenType("LBRACE")
        public val LBRACKET: IElementType = ATSTokenType("LBRACKET")
        public val LET: IElementType = ATSTokenType("LET")
        public val LOCAL: IElementType = ATSTokenType("LOCAL")
        public val LPAREN: IElementType = ATSTokenType("LPAREN")
        public val LT: IElementType = ATSTokenType("LT")
        public val MACDEF: IElementType = ATSTokenType("MACDEF")
        public val MINUSGT: IElementType = ATSTokenType("MINUSGT")
        public val MINUSLT: IElementType = ATSTokenType("MINUSLT")
        public val MINUSLTGT: IElementType = ATSTokenType("MINUSLTGT")
        //IElementType NONE = new ATSTokenType("NONE"); // unused
        public val NONFIX: IElementType = ATSTokenType("NONFIX")
        public val OF: IElementType = ATSTokenType("OF")
        public val OP: IElementType = ATSTokenType("OP")
        public val OVERLOAD: IElementType = ATSTokenType("OVERLOAD")
        public val PERCENT: IElementType = ATSTokenType("PERCENT")
        public val PERCENTLPAREN: IElementType = ATSTokenType("PERCENTLPAREN")
        public val QMARK: IElementType = ATSTokenType("QMARK")
        public val QUOTELBRACE: IElementType = ATSTokenType("QUOTELBRACE")
        public val QUOTELBRACKET: IElementType = ATSTokenType("QUOTELBRACKET")
        public val QUOTELPAREN: IElementType = ATSTokenType("QUOTELPAREN")
        public val RBRACE: IElementType = ATSTokenType("RBRACE")
        public val RBRACKET: IElementType = ATSTokenType("RBRACKET")
        public val REC: IElementType = ATSTokenType("REC")
        public val REFAT: IElementType = ATSTokenType("REFAT")
        public val REF_IDENTIFIER: IElementType = ATSTokenType("REF_IDENTIFIER") // (CHECK_ME)
        public val REQUIRE: IElementType = ATSTokenType("REQUIRE")
        public val RPAREN: IElementType = ATSTokenType("RPAREN")
        public val SCASE: IElementType = ATSTokenType("SCASE")
        public val SEMICOLON: IElementType = ATSTokenType("SEMICOLON")
        public val SIF: IElementType = ATSTokenType("SIF")
        public val SORTDEF: IElementType = ATSTokenType("SORTDEF")
        public val SRPASSERT: IElementType = ATSTokenType("SRPASSERT")
        public val SRPDEFINE: IElementType = ATSTokenType("SRPDEFINE")
        public val SRPELIF: IElementType = ATSTokenType("SRPELIF")
        public val SRPELIFDEF: IElementType = ATSTokenType("SRPELIFDEF")
        public val SRPELIFNDEF: IElementType = ATSTokenType("SRPELIFNDEF")
        public val SRPELSE: IElementType = ATSTokenType("SRPELSE")
        public val SRPENDIF: IElementType = ATSTokenType("SRPENDIF")
        public val SRPERROR: IElementType = ATSTokenType("SRPERROR")
        public val SRPIF: IElementType = ATSTokenType("SRPIF")
        public val SRPIFDEF: IElementType = ATSTokenType("SRPIFDEF")
        public val SRPIFNDEF: IElementType = ATSTokenType("SRPIFNDEF")
        public val SRPINCLUDE: IElementType = ATSTokenType("SRPINCLUDE")
        public val SRPPRINT: IElementType = ATSTokenType("SRPPRINT")
        public val SRPTHEN: IElementType = ATSTokenType("SRPTHEN")
        public val SRPUNDEF: IElementType = ATSTokenType("SRPUNDEF")
        public val STACST: IElementType = ATSTokenType("STACST")
        public val STADEF: IElementType = ATSTokenType("STADEF")
        public val STALOAD: IElementType = ATSTokenType("STALOAD")
        public val STATIC: IElementType = ATSTokenType("STATIC")
        public val STRING: IElementType = ATSTokenType("STRING")
        public val SYMELIM: IElementType = ATSTokenType("SYMELIM")
        public val SYMINTR: IElementType = ATSTokenType("SYMINTR")
        public val THEN: IElementType = ATSTokenType("THEN")
        public val TILDE: IElementType = ATSTokenType("TILDE")
        public val TKINDEF: IElementType = ATSTokenType("TKINDEF")
        public val TRY: IElementType = ATSTokenType("TRY")
        public val TYPE: IElementType = ATSTokenType("TYPE")
        public val TYPEDEF: IElementType = ATSTokenType("TYPEDEF")
        public val VAL: IElementType = ATSTokenType("VAL")
        public val VAL_IDENTIFIER: IElementType = ATSTokenType("VAL_IDENTIFIER") // (CHECK_ME)
        public val VAR: IElementType = ATSTokenType("VAR")
        public val VIEWAT: IElementType = ATSTokenType("VIEWAT")
        public val WHEN: IElementType = ATSTokenType("WHEN")
        public val WHERE: IElementType = ATSTokenType("WHERE")
        public val WHILE: IElementType = ATSTokenType("WHILE")
        public val WHITE_SPACE: IElementType = ATSTokenType("WHITE_SPACE") // Not exactly in ATS (CHECK_ME)
        public val WHILESTAR: IElementType = ATSTokenType("WHILESTAR")
        public val WITH: IElementType = ATSTokenType("WITH")
        public val WITHTYPE: IElementType = ATSTokenType("WITHTYPE")
    }

    /*
  class Factory {
    public static PsiElement createElement(ASTNode node) {
      IElementType type = node.getElementType();
       if (type == KEY) {
        return new ATSKeyImpl(node);
      }
      else if (type == PROPERTY) {
        return new ATSPropertyImpl(node);
      }
      throw new AssertionError("Unknown element type: " + type);
    }
  }
  */
}
