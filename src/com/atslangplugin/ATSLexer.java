/* The following code was generated by JFlex 1.4.3 on 1/4/15 5:14 PM */

package com.atslangplugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.atslangplugin.ATSTokenTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 1/4/15 5:14 PM from the specification file
 * <tt>C:/cygwin64/home/brand_000/IntelliJATS/src/com/atslangplugin/ATS.flex</tt>
 */
public class ATSLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int PRAGMA = 6;
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int PRE = 4;
  public static final int DEFINE_CONTINUATION = 10;
  public static final int CONTINUATION = 12;
  public static final int DEFINE = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\13\1\5\1\0\1\13\1\4\22\0\1\13\1\42\1\36"+
    "\1\52\1\47\1\100\1\102\1\35\1\31\1\30\1\27\1\34\1\74"+
    "\1\53\1\32\1\26\1\11\7\7\2\6\1\45\1\75\1\46\1\50"+
    "\1\51\1\101\1\41\4\10\1\33\1\10\21\1\1\12\2\1\1\37"+
    "\1\3\1\76\1\0\1\2\1\44\1\55\1\56\1\16\1\21\1\22"+
    "\1\23\1\66\1\71\1\14\1\1\1\72\1\17\1\65\1\15\1\25"+
    "\1\62\1\70\1\24\1\57\1\60\1\20\1\63\1\64\1\67\1\61"+
    "\1\73\1\40\1\43\1\77\1\54\53\0\1\1\12\0\1\1\4\0"+
    "\1\1\5\0\27\1\1\0\37\1\1\0\u01ca\1\4\0\14\1\16\0"+
    "\5\1\7\0\1\1\1\0\1\1\201\0\5\1\1\0\2\1\2\0"+
    "\4\1\10\0\1\1\1\0\3\1\1\0\1\1\1\0\24\1\1\0"+
    "\123\1\1\0\213\1\10\0\236\1\11\0\46\1\2\0\1\1\7\0"+
    "\47\1\110\0\33\1\5\0\3\1\55\0\53\1\43\0\2\1\1\0"+
    "\143\1\1\0\1\1\17\0\2\1\7\0\2\1\12\0\3\1\2\0"+
    "\1\1\20\0\1\1\1\0\36\1\35\0\131\1\13\0\1\1\30\0"+
    "\41\1\11\0\2\1\4\0\1\1\5\0\26\1\4\0\1\1\11\0"+
    "\1\1\3\0\1\1\27\0\31\1\107\0\1\1\1\0\13\1\127\0"+
    "\66\1\3\0\1\1\22\0\1\1\7\0\12\1\17\0\7\1\1\0"+
    "\7\1\5\0\10\1\2\0\2\1\2\0\26\1\1\0\7\1\1\0"+
    "\1\1\3\0\4\1\3\0\1\1\20\0\1\1\15\0\2\1\1\0"+
    "\3\1\16\0\2\1\23\0\6\1\4\0\2\1\2\0\26\1\1\0"+
    "\7\1\1\0\2\1\1\0\2\1\1\0\2\1\37\0\4\1\1\0"+
    "\1\1\23\0\3\1\20\0\11\1\1\0\3\1\1\0\26\1\1\0"+
    "\7\1\1\0\2\1\1\0\5\1\3\0\1\1\22\0\1\1\17\0"+
    "\2\1\43\0\10\1\2\0\2\1\2\0\26\1\1\0\7\1\1\0"+
    "\2\1\1\0\5\1\3\0\1\1\36\0\2\1\1\0\3\1\17\0"+
    "\1\1\21\0\1\1\1\0\6\1\3\0\3\1\1\0\4\1\3\0"+
    "\2\1\1\0\1\1\1\0\2\1\3\0\2\1\3\0\3\1\3\0"+
    "\14\1\26\0\1\1\64\0\10\1\1\0\3\1\1\0\27\1\1\0"+
    "\12\1\1\0\5\1\3\0\1\1\32\0\2\1\6\0\2\1\43\0"+
    "\10\1\1\0\3\1\1\0\27\1\1\0\12\1\1\0\5\1\3\0"+
    "\1\1\40\0\1\1\1\0\2\1\17\0\2\1\22\0\10\1\1\0"+
    "\3\1\1\0\51\1\2\0\1\1\20\0\1\1\21\0\2\1\30\0"+
    "\6\1\5\0\22\1\3\0\30\1\1\0\11\1\1\0\1\1\2\0"+
    "\7\1\72\0\60\1\1\0\2\1\14\0\7\1\72\0\2\1\1\0"+
    "\1\1\2\0\2\1\1\0\1\1\2\0\1\1\6\0\4\1\1\0"+
    "\7\1\1\0\3\1\1\0\1\1\1\0\1\1\2\0\2\1\1\0"+
    "\4\1\1\0\2\1\11\0\1\1\2\0\5\1\1\0\1\1\25\0"+
    "\4\1\40\0\1\1\77\0\10\1\1\0\44\1\33\0\5\1\163\0"+
    "\53\1\24\0\1\1\20\0\6\1\4\0\4\1\3\0\1\1\3\0"+
    "\2\1\7\0\3\1\4\0\15\1\14\0\1\1\21\0\46\1\1\0"+
    "\1\1\5\0\1\1\2\0\53\1\1\0\u014d\1\1\0\4\1\2\0"+
    "\7\1\1\0\1\1\1\0\4\1\2\0\51\1\1\0\4\1\2\0"+
    "\41\1\1\0\4\1\2\0\7\1\1\0\1\1\1\0\4\1\2\0"+
    "\17\1\1\0\71\1\1\0\4\1\2\0\103\1\45\0\20\1\20\0"+
    "\125\1\14\0\u026c\1\2\0\21\1\1\0\32\1\5\0\113\1\25\0"+
    "\15\1\1\0\4\1\16\0\22\1\16\0\22\1\16\0\15\1\1\0"+
    "\3\1\17\0\64\1\43\0\1\1\4\0\1\1\103\0\130\1\10\0"+
    "\51\1\1\0\1\1\5\0\106\1\12\0\35\1\63\0\36\1\2\0"+
    "\5\1\13\0\54\1\25\0\7\1\70\0\27\1\11\0\65\1\122\0"+
    "\1\1\135\0\57\1\21\0\7\1\67\0\36\1\15\0\2\1\12\0"+
    "\54\1\32\0\44\1\51\0\3\1\12\0\44\1\153\0\4\1\1\0"+
    "\4\1\3\0\2\1\11\0\300\1\100\0\u0116\1\2\0\6\1\2\0"+
    "\46\1\2\0\6\1\2\0\10\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\37\1\2\0\65\1\1\0\7\1\1\0\1\1\3\0"+
    "\3\1\1\0\7\1\3\0\4\1\2\0\6\1\4\0\15\1\5\0"+
    "\3\1\1\0\7\1\164\0\1\1\15\0\1\1\20\0\15\1\145\0"+
    "\1\1\4\0\1\1\2\0\12\1\1\0\1\1\3\0\5\1\6\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\4\1\1\0\13\1\2\0"+
    "\4\1\5\0\5\1\4\0\1\1\64\0\2\1\u0a7b\0\57\1\1\0"+
    "\57\1\1\0\205\1\6\0\4\1\3\0\2\1\14\0\46\1\1\0"+
    "\1\1\5\0\1\1\2\0\70\1\7\0\1\1\20\0\27\1\11\0"+
    "\7\1\1\0\7\1\1\0\7\1\1\0\7\1\1\0\7\1\1\0"+
    "\7\1\1\0\7\1\1\0\7\1\120\0\1\1\u01d5\0\2\1\52\0"+
    "\5\1\5\0\2\1\4\0\126\1\6\0\3\1\1\0\132\1\1\0"+
    "\4\1\5\0\51\1\3\0\136\1\21\0\33\1\65\0\20\1\u0200\0"+
    "\u19b6\1\112\0\u51cd\1\63\0\u048d\1\103\0\56\1\2\0\u010d\1\3\0"+
    "\20\1\12\0\2\1\24\0\57\1\20\0\31\1\10\0\106\1\61\0"+
    "\11\1\2\0\147\1\2\0\4\1\1\0\4\1\14\0\13\1\115\0"+
    "\12\1\1\0\3\1\1\0\4\1\1\0\27\1\35\0\64\1\16\0"+
    "\62\1\76\0\6\1\3\0\1\1\16\0\34\1\12\0\27\1\31\0"+
    "\35\1\7\0\57\1\34\0\1\1\60\0\51\1\27\0\3\1\1\0"+
    "\10\1\24\0\27\1\3\0\1\1\5\0\60\1\1\0\1\1\3\0"+
    "\2\1\2\0\5\1\2\0\1\1\1\0\1\1\30\0\3\1\2\0"+
    "\13\1\7\0\3\1\14\0\6\1\2\0\6\1\2\0\6\1\11\0"+
    "\7\1\1\0\7\1\221\0\43\1\35\0\u2ba4\1\14\0\27\1\4\0"+
    "\61\1\u2104\0\u016e\1\2\0\152\1\46\0\7\1\14\0\5\1\5\0"+
    "\1\1\1\0\12\1\1\0\15\1\1\0\5\1\1\0\1\1\1\0"+
    "\2\1\1\0\2\1\1\0\154\1\41\0\u016b\1\22\0\100\1\2\0"+
    "\66\1\50\0\14\1\164\0\5\1\1\0\207\1\44\0\32\1\6\0"+
    "\32\1\13\0\131\1\3\0\6\1\2\0\6\1\2\0\6\1\2\0"+
    "\3\1\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\1\5\1\6\2\7\11\4"+
    "\2\3\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\3\1\31\10\4\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\3\3\40\2\7\1\41\1\42"+
    "\11\4\1\43\6\4\1\44\4\4\1\45\1\46\1\4"+
    "\1\47\1\50\1\0\1\51\1\52\1\53\1\14\1\13"+
    "\1\54\1\13\1\55\1\56\2\14\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\14\0\1\66\1\67\1\70"+
    "\4\0\1\71\3\0\1\72\1\73\4\4\1\74\22\4"+
    "\1\75\1\76\1\77\1\40\3\4\1\100\3\4\1\101"+
    "\1\4\1\102\2\4\1\103\3\4\1\104\1\44\3\4"+
    "\1\105\1\100\2\4\3\47\1\50\1\106\1\107\1\0"+
    "\1\13\1\14\17\0\1\110\1\111\1\0\1\112\10\0"+
    "\1\113\1\114\4\4\1\115\4\4\1\116\14\4\1\117"+
    "\1\120\11\4\1\121\1\4\1\102\1\4\1\102\2\4"+
    "\1\122\4\4\1\104\2\4\1\123\1\124\2\4\1\0"+
    "\1\47\1\0\2\106\1\125\1\13\1\0\1\126\3\0"+
    "\1\127\4\0\1\130\3\0\1\131\14\0\16\4\1\132"+
    "\1\133\10\4\1\117\1\134\1\4\1\135\3\4\1\136"+
    "\4\4\1\121\1\137\11\4\1\140\1\141\2\4\1\47"+
    "\1\142\27\0\1\143\6\0\1\144\1\145\2\0\1\146"+
    "\1\0\1\147\5\4\1\150\1\151\10\4\1\132\4\4"+
    "\1\117\1\152\4\4\1\153\1\154\2\4\1\136\1\4"+
    "\1\155\1\156\7\4\1\157\1\160\1\161\2\4\1\142"+
    "\1\0\1\126\1\0\1\162\7\0\1\127\2\0\1\163"+
    "\2\0\1\164\1\0\1\130\1\0\1\130\6\0\1\165"+
    "\1\166\1\0\1\167\2\0\1\170\1\0\1\171\3\4"+
    "\1\172\1\4\1\173\1\4\1\174\1\175\4\4\1\121"+
    "\4\4\1\176\1\177\6\4\1\200\1\4\1\201\1\4"+
    "\2\0\1\202\1\0\1\203\1\204\2\0\1\127\1\205"+
    "\7\0\1\206\1\207\2\0\1\210\2\211\1\212\1\213"+
    "\1\214\1\215\1\216\1\217\5\4\1\220\1\221\2\222"+
    "\1\4\1\223\1\0\1\224\3\0\1\225\6\0\1\226"+
    "\1\0\1\227\1\4\2\230\1\231\1\232\1\233\1\234"+
    "\1\0\1\235\1\0\1\236\4\0\1\237\11\0\1\240"+
    "\1\241\1\242\1\243\3\0\1\211\2\0\1\244\2\0"+
    "\1\240";

  private static int [] zzUnpackAction() {
    int [] result = new int[605];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\206\0\206\0\u010c\0\u014f"+
    "\0\u0192\0\u01d5\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367"+
    "\0\u03aa\0\u03ed\0\u0430\0\206\0\u0473\0\u04b6\0\u04f9\0\u053c"+
    "\0\206\0\206\0\u057f\0\u05c2\0\206\0\u0605\0\u0648\0\u068b"+
    "\0\u06ce\0\u0711\0\u0754\0\u0797\0\u07da\0\206\0\u081d\0\u0860"+
    "\0\u08a3\0\u08e6\0\u0929\0\u096c\0\u09af\0\u09f2\0\u0a35\0\206"+
    "\0\206\0\206\0\u0a78\0\206\0\u0abb\0\u0afe\0\u0b41\0\u0b84"+
    "\0\u0bc7\0\u0c0a\0\u0c4d\0\311\0\u0c90\0\u0cd3\0\u0d16\0\u0d59"+
    "\0\u0d9c\0\u0ddf\0\u0e22\0\u0e65\0\u0ea8\0\311\0\u0eeb\0\u0f2e"+
    "\0\u0f71\0\u0fb4\0\u0ff7\0\u103a\0\u107d\0\u10c0\0\u1103\0\u1146"+
    "\0\u1189\0\311\0\311\0\u11cc\0\u120f\0\206\0\u1252\0\u1295"+
    "\0\u12d8\0\u131b\0\u135e\0\u13a1\0\u135e\0\206\0\u135e\0\u135e"+
    "\0\u13e4\0\206\0\206\0\206\0\206\0\u1427\0\206\0\206"+
    "\0\206\0\u146a\0\u14ad\0\u14f0\0\u1533\0\u1576\0\u15b9\0\u15fc"+
    "\0\u163f\0\u1682\0\u16c5\0\u1708\0\u174b\0\u178e\0\u17d1\0\206"+
    "\0\u1814\0\u1857\0\u189a\0\u18dd\0\206\0\u1920\0\u1963\0\u19a6"+
    "\0\u19e9\0\206\0\u1a2c\0\u1a6f\0\u1ab2\0\u1af5\0\u1b38\0\u1b7b"+
    "\0\u1bbe\0\u1c01\0\u1c44\0\u1c87\0\u1cca\0\u1d0d\0\u1d50\0\u1d93"+
    "\0\u1dd6\0\u1e19\0\u1e5c\0\u1e9f\0\u1ee2\0\u1f25\0\u1f68\0\u1fab"+
    "\0\u1fee\0\206\0\206\0\u2031\0\u2074\0\u20b7\0\u20fa\0\u213d"+
    "\0\311\0\u2180\0\u21c3\0\u2206\0\311\0\u2249\0\u228c\0\u22cf"+
    "\0\u2312\0\311\0\u2355\0\u2398\0\u23db\0\u241e\0\311\0\u2461"+
    "\0\u24a4\0\u24e7\0\311\0\u252a\0\u256d\0\u25b0\0\u25f3\0\u2636"+
    "\0\u2679\0\u26bc\0\u26ff\0\206\0\u2742\0\u2785\0\u27c8\0\u280b"+
    "\0\u284e\0\u2891\0\u28d4\0\u2917\0\u295a\0\u299d\0\u29e0\0\u2a23"+
    "\0\u2a66\0\u2aa9\0\u2aec\0\u2b2f\0\u2b72\0\u2bb5\0\206\0\206"+
    "\0\u2bf8\0\u2c3b\0\u2c7e\0\u2cc1\0\u2d04\0\u2d47\0\u2d8a\0\u2dcd"+
    "\0\u2e10\0\u2e53\0\206\0\311\0\u2e96\0\u2ed9\0\u2f1c\0\u2f5f"+
    "\0\311\0\u2fa2\0\u2fe5\0\u3028\0\u306b\0\311\0\u30ae\0\u30f1"+
    "\0\u3134\0\u3177\0\u31ba\0\u31fd\0\u3240\0\u3283\0\u32c6\0\u3309"+
    "\0\u334c\0\u338f\0\u33d2\0\311\0\u3415\0\u3458\0\u349b\0\u34de"+
    "\0\u3521\0\u3564\0\u35a7\0\u35ea\0\u362d\0\u3670\0\u36b3\0\311"+
    "\0\u36f6\0\206\0\u3739\0\u377c\0\311\0\u37bf\0\u3802\0\u3845"+
    "\0\u3888\0\206\0\u38cb\0\u390e\0\206\0\206\0\u3951\0\u3994"+
    "\0\u39d7\0\u3a1a\0\u3a5d\0\u3aa0\0\206\0\206\0\u27c8\0\u3ae3"+
    "\0\u3b26\0\u3b69\0\u3bac\0\u3bef\0\u3c32\0\u3c75\0\u3cb8\0\u3cfb"+
    "\0\u3d3e\0\u3d81\0\u3dc4\0\u3e07\0\u3e4a\0\u3e8d\0\u3ed0\0\u3f13"+
    "\0\u3f56\0\u3f99\0\u3fdc\0\u401f\0\u4062\0\u40a5\0\u40e8\0\u412b"+
    "\0\u416e\0\u41b1\0\u41f4\0\u4237\0\u427a\0\u42bd\0\u4300\0\u4343"+
    "\0\u4386\0\u43c9\0\u440c\0\u444f\0\u4492\0\u44d5\0\u4518\0\u455b"+
    "\0\u459e\0\311\0\u45e1\0\u4624\0\u4667\0\u46aa\0\u46ed\0\u4730"+
    "\0\u4773\0\u47b6\0\206\0\u47f9\0\u483c\0\311\0\u487f\0\u48c2"+
    "\0\u4905\0\u4948\0\u498b\0\u49ce\0\u4a11\0\u4a54\0\206\0\311"+
    "\0\u4a97\0\u4ada\0\u4b1d\0\u4b60\0\u4ba3\0\u4be6\0\u4c29\0\u4c6c"+
    "\0\u4caf\0\206\0\206\0\u4cf2\0\u4d35\0\u4d78\0\u4dbb\0\u4dfe"+
    "\0\u4e41\0\u4e84\0\u4ec7\0\u4f0a\0\u4f4d\0\u4f90\0\u4fd3\0\u5016"+
    "\0\u5059\0\u509c\0\u50df\0\u5122\0\u5165\0\u51a8\0\u51eb\0\u522e"+
    "\0\u5271\0\u52b4\0\u52f7\0\u533a\0\u537d\0\u53c0\0\206\0\u5403"+
    "\0\u5446\0\u5489\0\u54cc\0\u550f\0\u5552\0\u5595\0\206\0\u55d8"+
    "\0\u561b\0\206\0\u565e\0\206\0\u56a1\0\u56e4\0\u5727\0\u576a"+
    "\0\u57ad\0\311\0\311\0\u57f0\0\u5833\0\u5876\0\u58b9\0\u58fc"+
    "\0\u593f\0\u5982\0\u59c5\0\206\0\u5a08\0\u5a4b\0\u5a8e\0\u5ad1"+
    "\0\311\0\206\0\u5b14\0\u5b57\0\u5b9a\0\u5bdd\0\u5c20\0\311"+
    "\0\u5c63\0\u5ca6\0\311\0\u5ce9\0\311\0\311\0\u5d2c\0\u5d6f"+
    "\0\u5db2\0\u5df5\0\u5e38\0\u5e7b\0\u5ebe\0\311\0\311\0\311"+
    "\0\u5f01\0\u5f44\0\u5f87\0\u5fca\0\206\0\u600d\0\206\0\u6050"+
    "\0\u6093\0\u60d6\0\u6119\0\u615c\0\u619f\0\u61e2\0\206\0\u6225"+
    "\0\u6268\0\206\0\u62ab\0\u62ee\0\206\0\u6331\0\206\0\u6374"+
    "\0\u63b7\0\u63fa\0\u643d\0\u6480\0\u64c3\0\u6506\0\u6549\0\206"+
    "\0\206\0\u658c\0\206\0\u65cf\0\u6612\0\206\0\u6655\0\206"+
    "\0\u6698\0\u66db\0\u671e\0\311\0\u6761\0\311\0\u67a4\0\311"+
    "\0\311\0\u67e7\0\u682a\0\u686d\0\u68b0\0\311\0\u68f3\0\u6936"+
    "\0\u6979\0\u69bc\0\206\0\311\0\u69ff\0\u6a42\0\u6a85\0\u6ac8"+
    "\0\u6b0b\0\u6b4e\0\311\0\u6b91\0\311\0\u6bd4\0\u6c17\0\u6c5a"+
    "\0\206\0\u6c9d\0\u6ce0\0\206\0\u6d23\0\u6d66\0\u6da9\0\206"+
    "\0\u6dec\0\u6e2f\0\u6e72\0\u6eb5\0\u6ef8\0\u6f3b\0\u6f7e\0\206"+
    "\0\206\0\u6fc1\0\u7004\0\206\0\311\0\u7047\0\311\0\311"+
    "\0\311\0\311\0\311\0\311\0\u708a\0\u70cd\0\u7110\0\u7153"+
    "\0\u7196\0\311\0\311\0\311\0\u71d9\0\u721c\0\311\0\u725f"+
    "\0\206\0\u72a2\0\u72e5\0\u7328\0\206\0\u736b\0\u73ae\0\u73f1"+
    "\0\u7434\0\u7477\0\u74ba\0\206\0\u74fd\0\206\0\u7540\0\311"+
    "\0\u7583\0\311\0\311\0\206\0\206\0\u75c6\0\206\0\u7609"+
    "\0\206\0\u764c\0\u768f\0\u76d2\0\u7715\0\206\0\u7758\0\u779b"+
    "\0\u77de\0\u7821\0\u7864\0\u78a7\0\u78ea\0\u792d\0\u7970\0\u79b3"+
    "\0\206\0\206\0\206\0\u79f6\0\u7a39\0\u7a7c\0\206\0\u7abf"+
    "\0\u7b02\0\206\0\u7b45\0\u7b88\0\206";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[605];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\2\6\2\7\1\4\1\10\1\4"+
    "\1\6\1\11\1\12\1\13\1\14\1\4\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\4\1\3\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\4\1\53"+
    "\1\54\1\55\1\56\6\4\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\103\3\104\0\2\4\3\0\5\4"+
    "\1\0\12\4\5\0\1\4\21\0\17\4\15\0\2\7"+
    "\1\0\1\7\10\0\1\66\7\0\1\67\1\66\55\0"+
    "\1\70\1\71\1\0\1\71\1\72\7\0\1\66\7\0"+
    "\1\67\1\66\33\0\1\72\14\0\2\4\3\0\5\4"+
    "\1\0\1\4\1\73\5\4\1\74\2\4\5\0\1\4"+
    "\21\0\10\4\1\75\6\4\10\0\2\4\3\0\5\4"+
    "\1\0\11\4\1\76\5\0\1\4\21\0\3\4\1\77"+
    "\13\4\10\0\2\4\3\0\5\4\1\0\3\4\1\100"+
    "\6\4\5\0\1\4\21\0\1\101\16\4\10\0\2\4"+
    "\3\0\5\4\1\0\3\4\1\102\2\4\1\103\2\4"+
    "\1\104\5\0\1\4\21\0\1\105\16\4\10\0\2\4"+
    "\3\0\5\4\1\0\11\4\1\106\5\0\1\4\21\0"+
    "\1\107\3\4\1\110\12\4\10\0\2\4\3\0\5\4"+
    "\1\0\1\4\1\111\1\4\1\112\6\4\5\0\1\4"+
    "\21\0\12\4\1\113\4\4\10\0\2\4\3\0\5\4"+
    "\1\0\1\114\1\115\2\4\1\116\3\4\1\117\1\120"+
    "\5\0\1\4\21\0\17\4\10\0\2\4\3\0\5\4"+
    "\1\0\6\4\1\121\3\4\5\0\1\4\21\0\17\4"+
    "\10\0\2\4\3\0\5\4\1\0\7\4\1\122\2\4"+
    "\5\0\1\4\21\0\5\4\1\123\1\124\10\4\35\0"+
    "\1\125\104\0\1\126\101\0\1\127\61\0\2\130\1\0"+
    "\1\130\20\0\1\131\13\0\1\132\34\0\3\133\1\134"+
    "\2\0\23\133\1\135\3\133\1\136\1\133\1\137\1\140"+
    "\42\133\3\30\1\141\2\0\30\30\1\142\44\30\31\0"+
    "\1\143\5\0\1\144\1\145\43\0\2\146\5\0\1\146"+
    "\1\0\1\146\1\0\12\146\5\0\1\146\21\0\17\146"+
    "\40\0\1\147\117\0\1\150\105\0\1\151\47\0\1\152"+
    "\1\153\1\0\1\154\1\155\1\0\1\156\30\0\1\157"+
    "\1\160\1\161\1\162\2\0\1\163\1\0\1\164\43\0"+
    "\1\165\17\0\1\166\2\0\1\167\63\0\1\170\64\0"+
    "\1\171\3\0\1\172\1\173\1\174\14\0\1\175\15\0"+
    "\1\176\2\0\1\177\1\0\1\200\66\0\1\201\2\0"+
    "\1\202\32\0\2\4\3\0\5\4\1\0\1\4\1\203"+
    "\1\4\1\204\1\4\1\205\4\4\5\0\1\4\21\0"+
    "\1\4\1\206\1\207\14\4\10\0\2\4\3\0\5\4"+
    "\1\0\6\4\1\210\3\4\5\0\1\4\21\0\17\4"+
    "\10\0\2\4\3\0\5\4\1\0\1\211\1\4\1\212"+
    "\6\4\1\213\5\0\1\4\21\0\3\4\1\214\1\215"+
    "\12\4\10\0\2\4\3\0\5\4\1\0\10\4\1\216"+
    "\1\4\5\0\1\4\21\0\4\4\1\217\7\4\1\220"+
    "\1\221\1\4\10\0\2\4\3\0\5\4\1\0\10\4"+
    "\1\222\1\223\5\0\1\4\21\0\17\4\10\0\2\4"+
    "\3\0\5\4\1\0\1\224\11\4\5\0\1\4\21\0"+
    "\1\225\16\4\10\0\2\4\3\0\5\4\1\0\1\226"+
    "\7\4\1\227\1\4\5\0\1\4\21\0\14\4\1\230"+
    "\2\4\10\0\2\4\3\0\5\4\1\0\12\4\5\0"+
    "\1\4\21\0\1\231\16\4\40\0\1\232\102\0\1\233"+
    "\52\0\2\234\5\0\1\234\1\0\1\234\1\0\12\234"+
    "\5\0\1\234\21\0\17\234\15\0\2\235\1\0\1\235"+
    "\22\0\1\235\16\0\1\235\35\0\2\67\1\0\1\67"+
    "\10\0\1\66\10\0\1\66\55\0\2\70\1\0\1\70"+
    "\10\0\1\66\7\0\1\67\1\66\55\0\1\70\1\71"+
    "\1\0\1\71\10\0\1\66\7\0\1\67\1\66\55\0"+
    "\4\72\4\0\1\72\2\0\3\72\7\0\1\72\21\0"+
    "\2\72\25\0\2\4\3\0\5\4\1\0\7\4\1\236"+
    "\2\4\5\0\1\4\21\0\17\4\10\0\2\4\3\0"+
    "\5\4\1\0\12\4\5\0\1\4\21\0\5\4\1\237"+
    "\11\4\10\0\2\4\3\0\5\4\1\0\1\4\1\240"+
    "\10\4\5\0\1\4\21\0\17\4\10\0\2\4\3\0"+
    "\5\4\1\0\12\4\5\0\1\4\21\0\10\4\1\241"+
    "\6\4\10\0\2\4\3\0\5\4\1\0\12\4\5\0"+
    "\1\4\21\0\1\242\16\4\10\0\2\4\3\0\5\4"+
    "\1\0\12\4\5\0\1\4\21\0\2\4\1\243\14\4"+
    "\10\0\2\4\3\0\5\4\1\0\12\4\5\0\1\4"+
    "\21\0\1\244\16\4\10\0\2\4\3\0\5\4\1\0"+
    "\12\4\5\0\1\4\21\0\3\4\1\245\13\4\10\0"+
    "\2\4\3\0\5\4\1\0\2\4\1\246\7\4\5\0"+
    "\1\4\21\0\17\4\10\0\2\4\3\0\5\4\1\0"+
    "\12\4\5\0\1\4\21\0\10\4\1\247\6\4\10\0"+
    "\2\4\3\0\5\4\1\0\12\4\5\0\1\4\21\0"+
    "\3\4\1\250\13\4\10\0\2\4\3\0\5\4\1\0"+
    "\1\4\1\251\10\4\5\0\1\4\21\0\17\4\10\0"+
    "\2\4\3\0\5\4\1\0\5\4\1\252\4\4\5\0"+
    "\1\4\21\0\17\4\10\0\2\4\3\0\5\4\1\0"+
    "\12\4\5\0\1\4\21\0\2\4\1\253\14\4\10\0"+
    "\2\4\3\0\5\4\1\0\1\4\1\241\1\254\7\4"+
    "\5\0\1\4\21\0\3\4\1\255\13\4\10\0\2\4"+
    "\3\0\5\4\1\0\12\4\5\0\1\4\21\0\12\4"+
    "\1\256\4\4\10\0\2\4\3\0\5\4\1\0\12\4"+
    "\5\0\1\4\21\0\12\4\1\257\4\4\10\0\2\4"+
    "\3\0\5\4\1\0\1\4\1\257\10\4\5\0\1\4"+
    "\21\0\17\4\10\0\2\4\3\0\5\4\1\0\6\4"+
    "\1\260\3\4\5\0\1\4\21\0\17\4\10\0\2\4"+
    "\3\0\5\4\1\0\3\4\1\261\4\4\1\262\1\4"+
    "\5\0\1\4\21\0\17\4\10\0\2\4\3\0\5\4"+
    "\1\0\2\4\1\263\4\4\1\264\2\4\5\0\1\4"+
    "\21\0\13\4\1\265\3\4\10\0\2\4\3\0\5\4"+
    "\1\0\6\4\1\266\3\4\5\0\1\4\21\0\17\4"+
    "\7\0\3\267\1\270\2\0\20\267\1\271\54\267\27\272"+
    "\1\273\53\272\6\0\2\130\1\0\1\130\10\0\1\66"+
    "\10\0\1\66\101\0\1\274\121\0\1\275\31\0\3\276"+
    "\1\277\2\0\27\276\1\142\45\276\4\133\2\0\75\133"+
    "\4\30\2\0\75\30\1\0\2\146\3\0\5\146\1\0"+
    "\12\146\5\0\1\146\21\0\17\146\34\0\1\300\71\0"+
    "\1\301\4\0\1\154\35\0\1\302\45\0\1\303\103\0"+
    "\1\304\43\0\1\305\35\0\1\306\32\0\1\307\51\0"+
    "\1\310\102\0\1\311\147\0\1\312\31\0\1\313\100\0"+
    "\1\314\145\0\1\315\71\0\1\316\103\0\1\317\102\0"+
    "\1\320\46\0\1\321\5\0\1\322\74\0\1\323\107\0"+
    "\1\324\75\0\1\325\1\0\1\326\4\0\1\327\135\0"+
    "\1\330\114\0\1\331\35\0\1\332\127\0\1\333\32\0"+
    "\2\4\3\0\5\4\1\0\5\4\1\334\4\4\5\0"+
    "\1\4\21\0\17\4\10\0\2\4\3\0\5\4\1\0"+
    "\3\4\1\241\6\4\5\0\1\4\21\0\17\4\10\0"+
    "\2\4\3\0\5\4\1\0\5\4\1\335\4\4\5\0"+
    "\1\4\21\0\17\4\10\0\2\4\3\0\5\4\1\0"+
    "\12\4\5\0\1\4\21\0\2\4\1\336\14\4\10\0"+
    "\2\4\3\0\5\4\1\0\12\4\5\0\1\4\21\0"+
    "\2\4\1\337\14\4\10\0\2\4\3\0\5\4\1\0"+
    "\12\4\5\0\1\4\21\0\11\4\1\340\5\4\10\0"+
    "\2\4\3\0\5\4\1\0\7\4\1\341\2\4\5\0"+
    "\1\4\21\0\17\4\10\0\2\4\3\0\5\4\1\0"+
    "\12\4\5\0\1\4\21\0\1\342\16\4\10\0\2\4"+
    "\3\0\5\4\1\0\10\4\1\343\1\4\5\0\1\4"+
    "\21\0\17\4\10\0\2\4\3\0\5\4\1\0\12\4"+
    "\5\0\1\4\21\0\1\344\16\4\10\0\2\4\3\0"+
    "\5\4\1\0\12\4\5\0\1\4\21\0\10\4\1\345"+
    "\6\4\10\0\2\4\3\0\5\4\1\0\12\4\5\0"+
    "\1\4\21\0\4\4\1\346\12\4\10\0\2\4\3\0"+
    "\5\4\1\0\12\4\5\0\1\4\21\0\5\4\1\347"+
    "\11\4\10\0\2\4\3\0\5\4\1\0\6\4\1\350"+
    "\3\4\5\0\1\4\21\0\17\4\10\0\2\4\3\0"+
    "\5\4\1\0\1\351\11\4\5\0\1\4\21\0\17\4"+
    "\10\0\2\4\3\0\5\4\1\0\1\352\1\4\1\353"+
    "\3\4\1\354\1\355\1\4\1\356\5\0\1\4\21\0"+
    "\1\357\5\4\1\360\10\4\10\0\2\4\3\0\5\4"+
    "\1\0\12\4\5\0\1\4\21\0\2\4\1\361\14\4"+
    "\10\0\2\4\3\0\5\4\1\0\6\4\1\362\3\4"+
    "\5\0\1\4\21\0\17\4\10\0\2\4\3\0\5\4"+
    "\1\0\3\4\1\363\4\4\1\364\1\4\5\0\1\4"+
    "\21\0\17\4\10\0\2\4\3\0\5\4\1\0\12\4"+
    "\5\0\1\4\21\0\3\4\1\365\13\4\10\0\2\4"+
    "\3\0\5\4\1\0\12\4\5\0\1\4\21\0\3\4"+
    "\1\241\13\4\10\0\2\4\3\0\5\4\1\0\1\366"+
    "\5\4\1\367\3\4\5\0\1\4\21\0\17\4\10\0"+
    "\2\4\3\0\5\4\1\0\2\4\1\370\7\4\5\0"+
    "\1\4\21\0\17\4\10\0\2\234\3\0\5\234\1\0"+
    "\12\234\5\0\1\234\21\0\17\234\15\0\2\235\1\0"+
    "\1\235\72\0\2\4\3\0\5\4\1\0\1\371\11\4"+
    "\5\0\1\4\21\0\17\4\10\0\2\4\3\0\5\4"+
    "\1\0\3\4\1\372\5\4\1\373\5\0\1\4\21\0"+
    "\17\4\10\0\2\4\3\0\5\4\1\0\7\4\1\374"+
    "\2\4\5\0\1\4\21\0\17\4\10\0\2\4\3\0"+
    "\5\4\1\0\12\4\5\0\1\4\21\0\2\4\1\375"+
    "\14\4\10\0\2\4\3\0\5\4\1\0\6\4\1\376"+
    "\3\4\5\0\1\4\21\0\3\4\1\377\13\4\10\0"+
    "\2\4\3\0\5\4\1\0\12\4\5\0\1\4\21\0"+
    "\10\4\1\u0100\6\4\10\0\2\4\3\0\5\4\1\0"+
    "\12\4\5\0\1\4\21\0\1\u0101\16\4\10\0\2\4"+
    "\3\0\5\4\1\0\12\4\5\0\1\4\5\0\1\u0102"+
    "\13\0\17\4\10\0\2\4\3\0\5\4\1\0\12\4"+
    "\5\0\1\4\21\0\1\u0103\16\4\10\0\2\4\3\0"+
    "\5\4\1\0\3\4\1\u0104\6\4\5\0\1\4\21\0"+
    "\17\4\10\0\2\4\3\0\5\4\1\0\6\4\1\u0105"+
    "\3\4\5\0\1\4\21\0\17\4\10\0\2\4\3\0"+
    "\5\4\1\0\6\4\1\u0106\3\4\5\0\1\4\21\0"+
    "\17\4\10\0\2\4\3\0\5\4\1\0\6\4\1\u0107"+
    "\3\4\5\0\1\4\21\0\4\4\1\u0108\1\4\1\u0109"+
    "\10\4\10\0\2\4\3\0\5\4\1\0\12\4\5\0"+
    "\1\4\5\0\1\u010a\13\0\17\4\10\0\2\4\3\0"+
    "\5\4\1\0\6\4\1\u010b\3\4\5\0\1\4\21\0"+
    "\17\4\10\0\2\4\3\0\5\4\1\0\5\4\1\u010c"+
    "\4\4\5\0\1\4\21\0\17\4\10\0\2\4\3\0"+
    "\5\4\1\0\12\4\1\0\1\u010d\3\0\1\4\21\0"+
    "\17\4\10\0\2\4\3\0\5\4\1\0\12\4\5\0"+
    "\1\4\5\0\1\u010e\13\0\17\4\10\0\2\4\3\0"+
    "\5\4\1\0\4\4\1\u010f\5\4\5\0\1\4\21\0"+
    "\17\4\10\0\2\4\3\0\5\4\1\0\10\4\1\u0110"+
    "\1\4\5\0\1\4\21\0\17\4\7\0\3\267\1\270"+
    "\2\0\100\267\1\270\1\u0111\101\267\1\270\2\0\20\267"+
    "\1\u0112\54\267\27\272\1\u0113\53\272\27\u0114\1\273\1\u0114"+
    "\1\u0115\51\u0114\32\0\1\u0116\50\0\3\276\1\u0117\2\0"+
    "\27\276\1\136\51\276\2\0\75\276\15\0\1\u0118\144\0"+
    "\1\302\103\0\1\u0119\41\0\1\u011a\106\0\1\u011b\137\0"+
    "\1\u011c\40\0\1\u011d\100\0\1\u011e\112\0\1\u011f\100\0"+
    "\1\u0120\105\0\1\u0121\137\0\1\u0122\45\0\1\u0123\74\0"+
    "\1\u0124\3\0\1\u0125\130\0\1\u0126\47\0\1\u0127\101\0"+
    "\1\u0128\3\0\1\u0129\102\0\1\u012a\104\0\1\u012b\100\0"+
    "\1\u012c\75\0\1\u012d\42\0\1\u012e\47\0\1\u012f\135\0"+
    "\1\u0130\45\0\1\u0131\74\0\1\u0132\67\0\2\4\3\0"+
    "\5\4\1\0\10\4\1\u0133\1\4\5\0\1\4\21\0"+
    "\17\4\10\0\2\4\3\0\5\4\1\0\12\4\5\0"+
    "\1\4\21\0\3\4\1\u0134\1\4\1\u0135\1\u0136\10\4"+
    "\10\0\2\4\3\0\5\4\1\0\4\4\1\u0137\5\4"+
    "\5\0\1\4\21\0\17\4\10\0\2\4\3\0\5\4"+
    "\1\0\1\u0138\11\4\5\0\1\4\21\0\17\4\10\0"+
    "\2\4\3\0\5\4\1\0\12\4\5\0\1\4\21\0"+
    "\2\4\1\u0139\14\4\10\0\2\4\3\0\5\4\1\0"+
    "\12\4\5\0\1\4\21\0\3\4\1\u013a\13\4\10\0"+
    "\2\4\3\0\5\4\1\0\2\4\1\u013b\1\u013c\1\4"+
    "\1\u013d\4\4\5\0\1\4\21\0\3\4\1\u013e\13\4"+
    "\10\0\2\4\3\0\5\4\1\0\1\u013f\5\4\1\u0140"+
    "\3\4\5\0\1\4\21\0\17\4\10\0\2\4\3\0"+
    "\5\4\1\0\6\4\1\u0141\3\4\5\0\1\4\21\0"+
    "\17\4\10\0\2\4\3\0\5\4\1\0\1\4\1\u0142"+
    "\10\4\5\0\1\4\21\0\17\4\10\0\2\4\3\0"+
    "\5\4\1\0\1\4\1\u0143\10\4\5\0\1\4\21\0"+
    "\17\4\10\0\2\4\3\0\5\4\1\0\12\4\5\0"+
    "\1\4\21\0\10\4\1\u0144\6\4\10\0\2\4\3\0"+
    "\5\4\1\0\12\4\5\0\1\4\21\0\1\u0145\16\4"+
    "\10\0\2\4\3\0\5\4\1\0\7\4\1\u0146\2\4"+
    "\5\0\1\4\21\0\17\4\10\0\2\4\3\0\5\4"+
    "\1\0\1\4\1\257\2\4\1\116\5\4\5\0\1\4"+
    "\21\0\17\4\10\0\2\4\3\0\5\4\1\0\12\4"+
    "\5\0\1\4\21\0\5\4\1\u0147\11\4\10\0\2\4"+
    "\3\0\5\4\1\0\12\4\5\0\1\4\21\0\12\4"+
    "\1\u0148\4\4\10\0\2\4\3\0\5\4\1\0\12\4"+
    "\5\0\1\4\21\0\1\u0149\16\4\10\0\2\4\3\0"+
    "\5\4\1\0\12\4\5\0\1\4\21\0\3\4\1\354"+
    "\13\4\10\0\2\4\3\0\5\4\1\0\12\4\5\0"+
    "\1\4\21\0\7\4\1\u014a\7\4\10\0\2\4\3\0"+
    "\5\4\1\0\12\4\5\0\1\4\1\u014b\16\0\1\u014b"+
    "\1\0\17\4\10\0\2\4\3\0\5\4\1\0\12\4"+
    "\5\0\1\4\21\0\14\4\1\u014c\2\4\10\0\2\4"+
    "\3\0\5\4\1\0\3\4\1\u014d\6\4\5\0\1\4"+
    "\21\0\17\4\10\0\2\4\3\0\5\4\1\0\1\4"+
    "\1\u014e\6\4\1\u014f\1\4\5\0\1\4\21\0\17\4"+
    "\10\0\2\4\3\0\5\4\1\0\5\4\1\u0150\2\4"+
    "\1\u0151\1\4\5\0\1\4\21\0\17\4\10\0\2\4"+
    "\3\0\5\4\1\0\12\4\5\0\1\4\21\0\12\4"+
    "\1\u0152\4\4\10\0\2\4\3\0\5\4\1\0\6\4"+
    "\1\u0153\3\4\5\0\1\4\21\0\17\4\10\0\2\4"+
    "\3\0\5\4\1\0\10\4\1\u0154\1\4\5\0\1\4"+
    "\21\0\17\4\10\0\2\4\3\0\5\4\1\0\1\u0155"+
    "\11\4\5\0\1\4\21\0\17\4\10\0\2\4\3\0"+
    "\5\4\1\0\12\4\5\0\1\4\21\0\2\4\1\u0156"+
    "\14\4\10\0\2\4\3\0\5\4\1\0\12\4\5\0"+
    "\1\4\1\u0157\16\0\1\u0157\1\0\17\4\10\0\2\4"+
    "\3\0\5\4\1\0\7\4\1\116\2\4\5\0\1\4"+
    "\21\0\17\4\10\0\2\4\3\0\5\4\1\0\3\4"+
    "\1\u0158\6\4\5\0\1\4\21\0\17\4\10\0\2\4"+
    "\3\0\5\4\1\0\12\4\5\0\1\4\21\0\2\4"+
    "\1\u0159\1\u015a\1\4\1\u015b\1\u015c\10\4\10\0\2\4"+
    "\3\0\5\4\1\0\11\4\1\u015d\5\0\1\4\21\0"+
    "\17\4\10\0\2\4\3\0\5\4\1\0\12\4\5\0"+
    "\1\4\21\0\5\4\1\u015e\11\4\10\0\2\4\3\0"+
    "\5\4\1\0\10\4\1\u015f\1\4\5\0\1\4\21\0"+
    "\17\4\10\0\2\4\3\0\5\4\1\0\12\4\5\0"+
    "\1\4\21\0\5\4\1\u0160\11\4\10\0\2\4\3\0"+
    "\5\4\1\0\12\4\5\0\1\4\21\0\1\u0161\16\4"+
    "\10\0\2\4\3\0\5\4\1\0\12\4\5\0\1\4"+
    "\5\0\1\u0162\13\0\17\4\10\0\2\4\3\0\5\4"+
    "\1\0\12\4\5\0\1\4\5\0\1\u0163\13\0\17\4"+
    "\10\0\2\4\3\0\5\4\1\0\1\u0164\11\4\5\0"+
    "\1\4\21\0\17\4\10\0\2\4\3\0\5\4\1\0"+
    "\3\4\1\u0165\6\4\5\0\1\4\21\0\17\4\14\0"+
    "\1\267\75\0\3\u0112\1\u0166\2\u0167\75\u0112\27\272\1\u0113"+
    "\1\126\52\272\27\u0114\1\u0168\53\u0114\60\0\1\u0169\24\0"+
    "\1\u016a\155\0\1\u016b\112\0\1\u016c\37\0\1\u016d\1\u016e"+
    "\35\0\1\u016f\1\0\1\u0170\1\0\1\u0171\4\0\1\u0172"+
    "\12\0\1\u0173\22\0\1\u0174\134\0\1\u0175\105\0\1\u0176"+
    "\75\0\1\u0177\111\0\1\u0178\20\0\1\u0179\14\0\1\u017a"+
    "\145\0\1\u017b\45\0\1\u017c\71\0\1\u017d\3\0\1\u017e"+
    "\133\0\1\u017f\50\0\1\u0180\104\0\1\u0181\103\0\1\u0182"+
    "\102\0\1\u0183\74\0\1\u0184\102\0\1\u0185\111\0\1\u0186"+
    "\101\0\1\u0187\105\0\1\u0188\77\0\1\u0189\75\0\1\u018a"+
    "\102\0\1\u018b\66\0\2\4\3\0\5\4\1\0\12\4"+
    "\5\0\1\4\5\0\1\u018c\13\0\17\4\10\0\2\4"+
    "\3\0\3\4\1\u018d\1\4\1\0\12\4\5\0\1\4"+
    "\21\0\4\4\1\u018e\12\4\10\0\2\4\3\0\5\4"+
    "\1\0\10\4\1\u018f\1\4\5\0\1\4\21\0\17\4"+
    "\10\0\2\4\3\0\5\4\1\0\1\u0190\11\4\5\0"+
    "\1\4\21\0\3\4\1\u0134\13\4\10\0\2\4\3\0"+
    "\5\4\1\0\12\4\5\0\1\4\21\0\10\4\1\u0191"+
    "\6\4\10\0\2\4\3\0\5\4\1\0\1\4\1\u0192"+
    "\10\4\5\0\1\4\21\0\17\4\10\0\2\4\3\0"+
    "\5\4\1\0\6\4\1\u0193\3\4\5\0\1\4\21\0"+
    "\17\4\10\0\2\4\3\0\5\4\1\0\5\4\1\u0194"+
    "\4\4\5\0\1\4\21\0\17\4\10\0\2\4\3\0"+
    "\5\4\1\0\12\4\5\0\1\4\21\0\2\4\1\u0195"+
    "\14\4\10\0\2\4\3\0\5\4\1\0\11\4\1\u0196"+
    "\5\0\1\4\21\0\17\4\10\0\2\4\3\0\5\4"+
    "\1\0\6\4\1\u0197\3\4\5\0\1\4\21\0\17\4"+
    "\10\0\2\4\3\0\5\4\1\0\1\u0198\11\4\5\0"+
    "\1\4\21\0\17\4\10\0\2\4\3\0\5\4\1\0"+
    "\1\4\1\u0199\10\4\5\0\1\4\21\0\17\4\10\0"+
    "\2\4\3\0\5\4\1\0\3\4\1\u019a\6\4\5\0"+
    "\1\4\21\0\17\4\10\0\2\4\3\0\5\4\1\0"+
    "\5\4\1\u019b\4\4\5\0\1\4\1\u019c\16\0\1\u019c"+
    "\1\0\17\4\10\0\2\4\3\0\5\4\1\0\5\4"+
    "\1\u019d\4\4\5\0\1\4\21\0\17\4\10\0\2\4"+
    "\3\0\5\4\1\0\12\4\5\0\1\4\21\0\5\4"+
    "\1\u019e\11\4\10\0\2\4\3\0\5\4\1\0\12\4"+
    "\5\0\1\4\21\0\2\4\1\u019f\14\4\10\0\2\4"+
    "\3\0\5\4\1\0\1\u01a0\11\4\5\0\1\4\21\0"+
    "\17\4\10\0\2\4\3\0\5\4\1\0\5\4\1\u019b"+
    "\4\4\5\0\1\4\21\0\17\4\10\0\2\4\3\0"+
    "\5\4\1\0\1\257\11\4\5\0\1\4\21\0\17\4"+
    "\10\0\2\4\3\0\5\4\1\0\3\4\1\u01a1\4\4"+
    "\1\364\1\4\5\0\1\4\21\0\17\4\10\0\2\4"+
    "\3\0\5\4\1\0\5\4\1\u019b\4\4\5\0\1\4"+
    "\5\0\1\u01a2\13\0\3\4\1\u01a3\13\4\10\0\2\4"+
    "\3\0\5\4\1\0\12\4\5\0\1\4\21\0\3\4"+
    "\1\u01a4\1\4\1\u01a5\1\u01a6\10\4\10\0\2\4\3\0"+
    "\5\4\1\0\6\4\1\u01a7\3\4\5\0\1\4\21\0"+
    "\17\4\10\0\2\4\3\0\5\4\1\0\6\4\1\u01a8"+
    "\3\4\5\0\1\4\21\0\17\4\10\0\2\4\3\0"+
    "\5\4\1\0\6\4\1\u01a9\3\4\5\0\1\4\21\0"+
    "\17\4\10\0\2\4\3\0\5\4\1\0\11\4\1\u01aa"+
    "\5\0\1\4\21\0\17\4\10\0\2\4\3\0\5\4"+
    "\1\0\3\4\1\u01ab\4\4\1\u01ab\1\4\5\0\1\4"+
    "\21\0\17\4\10\0\2\4\3\0\5\4\1\0\12\4"+
    "\5\0\1\4\21\0\10\4\1\u01ac\6\4\10\0\2\4"+
    "\3\0\5\4\1\0\12\4\5\0\1\4\21\0\3\4"+
    "\1\u01ad\13\4\10\0\2\4\3\0\5\4\1\0\12\4"+
    "\5\0\1\4\21\0\12\4\1\u01ae\4\4\10\0\2\4"+
    "\3\0\5\4\1\0\5\4\1\u01af\4\4\5\0\1\4"+
    "\21\0\17\4\10\0\2\4\3\0\5\4\1\0\11\4"+
    "\1\u01b0\5\0\1\4\21\0\17\4\10\0\2\4\3\0"+
    "\5\4\1\0\12\4\5\0\1\4\21\0\4\4\1\u01b1"+
    "\12\4\10\0\2\4\3\0\5\4\1\0\10\4\1\u01b2"+
    "\1\4\5\0\1\4\21\0\17\4\10\0\2\4\3\0"+
    "\5\4\1\0\1\u01b3\11\4\5\0\1\4\21\0\3\4"+
    "\1\u015a\13\4\10\0\2\4\3\0\5\4\1\0\12\4"+
    "\5\0\1\4\21\0\1\u01b4\16\4\10\0\2\4\3\0"+
    "\5\4\1\0\12\4\5\0\1\4\21\0\3\4\1\u01b5"+
    "\13\4\10\0\2\4\3\0\5\4\1\0\1\4\1\u01b6"+
    "\10\4\5\0\1\4\21\0\17\4\10\0\2\4\3\0"+
    "\5\4\1\0\6\4\1\u01b7\3\4\5\0\1\4\21\0"+
    "\17\4\10\0\2\4\3\0\5\4\1\0\10\4\1\u01b8"+
    "\1\4\5\0\1\4\21\0\17\4\10\0\2\4\3\0"+
    "\5\4\1\0\10\4\1\u01b9\1\4\5\0\1\4\21\0"+
    "\17\4\10\0\2\4\3\0\5\4\1\0\11\4\1\u01ba"+
    "\5\0\1\4\21\0\17\4\7\0\3\u0112\1\u0166\1\u01bb"+
    "\76\u0112\103\u0167\27\u0114\1\u0168\1\u0115\52\u0114\14\0\1\u01bc"+
    "\146\0\1\u01bd\2\0\1\u01be\100\0\1\u01bf\76\0\1\u01c0"+
    "\51\0\1\u01c1\74\0\1\u01c2\146\0\1\u01c3\75\0\1\u01c4"+
    "\43\0\1\u01c5\100\0\1\u01c6\146\0\1\u01c7\2\0\1\u01c8"+
    "\43\0\1\u01c9\100\0\1\u01ca\137\0\1\u01cb\1\u01cc\114\0"+
    "\1\u01cd\70\0\1\u01ce\102\0\1\u01cf\2\0\1\u01d0\41\0"+
    "\1\u01d1\141\0\1\u01d2\37\0\1\u01d3\103\0\1\u01d4\100\0"+
    "\1\u01d5\105\0\1\u01d6\104\0\1\u01d7\103\0\1\u01d8\102\0"+
    "\1\u01d9\74\0\1\u01da\110\0\1\u01db\74\0\1\u01dc\3\0"+
    "\1\u01dd\105\0\1\u01de\102\0\1\u01df\136\0\1\u01e0\23\0"+
    "\2\4\3\0\5\4\1\0\12\4\5\0\1\4\21\0"+
    "\4\4\1\u018e\12\4\10\0\2\4\3\0\5\4\1\0"+
    "\12\4\5\0\1\4\21\0\5\4\1\u01e1\11\4\10\0"+
    "\2\4\3\0\5\4\1\0\11\4\1\u01e2\5\0\1\4"+
    "\21\0\17\4\10\0\2\4\3\0\5\4\1\0\6\4"+
    "\1\u01e3\3\4\5\0\1\4\21\0\17\4\10\0\2\4"+
    "\3\0\5\4\1\0\6\4\1\u01e4\3\4\5\0\1\4"+
    "\21\0\17\4\10\0\2\4\3\0\5\4\1\0\6\4"+
    "\1\u01e5\3\4\5\0\1\4\21\0\17\4\10\0\2\4"+
    "\3\0\5\4\1\0\12\4\5\0\1\4\21\0\3\4"+
    "\1\u01e6\13\4\10\0\2\4\3\0\5\4\1\0\12\4"+
    "\5\0\1\4\21\0\1\u01e7\16\4\10\0\2\4\3\0"+
    "\5\4\1\0\7\4\1\u01e8\2\4\5\0\1\4\21\0"+
    "\17\4\10\0\2\4\3\0\5\4\1\0\2\4\1\u01e9"+
    "\7\4\5\0\1\4\21\0\17\4\10\0\2\4\3\0"+
    "\5\4\1\0\12\4\5\0\1\4\21\0\3\4\1\u01ea"+
    "\13\4\10\0\2\4\3\0\5\4\1\0\1\u01eb\11\4"+
    "\5\0\1\4\21\0\17\4\10\0\2\4\3\0\5\4"+
    "\1\0\6\4\1\u01ec\3\4\5\0\1\4\21\0\17\4"+
    "\10\0\2\4\3\0\5\4\1\0\6\4\1\u01ed\3\4"+
    "\5\0\1\4\21\0\17\4\10\0\2\4\3\0\5\4"+
    "\1\0\3\4\1\372\6\4\5\0\1\4\21\0\17\4"+
    "\10\0\2\4\3\0\5\4\1\0\6\4\1\u01ee\3\4"+
    "\5\0\1\4\21\0\17\4\10\0\2\4\3\0\5\4"+
    "\1\0\12\4\5\0\1\4\21\0\12\4\1\u01ab\4\4"+
    "\10\0\2\4\3\0\5\4\1\0\12\4\5\0\1\4"+
    "\21\0\4\4\1\u01ef\12\4\10\0\2\4\3\0\5\4"+
    "\1\0\12\4\5\0\1\4\21\0\4\4\1\u01f0\12\4"+
    "\10\0\2\4\3\0\5\4\1\0\10\4\1\u01f1\1\4"+
    "\5\0\1\4\21\0\17\4\10\0\2\4\3\0\5\4"+
    "\1\0\1\u01f2\11\4\5\0\1\4\21\0\17\4\10\0"+
    "\2\4\3\0\5\4\1\0\12\4\1\0\1\u01f3\3\0"+
    "\1\4\21\0\17\4\10\0\2\4\3\0\5\4\1\0"+
    "\7\4\1\u01f4\2\4\5\0\1\4\21\0\17\4\10\0"+
    "\2\4\3\0\5\4\1\0\5\4\1\u0150\4\4\5\0"+
    "\1\4\21\0\17\4\10\0\2\4\3\0\5\4\1\0"+
    "\6\4\1\u01f5\3\4\5\0\1\4\21\0\17\4\10\0"+
    "\2\4\3\0\5\4\1\0\6\4\1\u01f6\3\4\5\0"+
    "\1\4\21\0\17\4\10\0\2\4\3\0\5\4\1\0"+
    "\10\4\1\u01f7\1\4\5\0\1\4\21\0\17\4\10\0"+
    "\2\4\3\0\5\4\1\0\12\4\5\0\1\4\21\0"+
    "\5\4\1\u01f8\11\4\10\0\2\4\3\0\5\4\1\0"+
    "\11\4\1\u01f9\5\0\1\4\21\0\17\4\10\0\2\4"+
    "\3\0\5\4\1\0\6\4\1\u01fa\3\4\5\0\1\4"+
    "\21\0\17\4\10\0\2\4\3\0\5\4\1\0\5\4"+
    "\1\u01fb\4\4\5\0\1\4\21\0\17\4\10\0\2\4"+
    "\3\0\5\4\1\0\1\u01fc\11\4\5\0\1\4\21\0"+
    "\17\4\10\0\2\4\3\0\5\4\1\0\6\4\1\u01fd"+
    "\3\4\5\0\1\4\21\0\17\4\10\0\2\4\3\0"+
    "\5\4\1\0\12\4\5\0\1\4\21\0\1\u01fe\16\4"+
    "\7\0\5\u0167\1\u0112\75\u0167\15\0\1\u01ff\145\0\1\u01bd"+
    "\101\0\1\u0200\40\0\1\u0201\142\0\1\u0202\47\0\1\u0203"+
    "\77\0\1\u0204\140\0\1\u0205\42\0\1\u0206\145\0\1\u01c7"+
    "\43\0\1\u0207\154\0\1\u0208\33\0\1\u0209\137\0\1\u020a"+
    "\101\0\1\u01cf\24\0\1\u0179\122\0\1\u020b\135\0\1\u020c"+
    "\47\0\1\u020d\76\0\1\u020e\105\0\1\u020f\104\0\1\u0210"+
    "\101\0\1\u0211\101\0\1\u0212\103\0\1\u0213\140\0\1\u0214"+
    "\23\0\2\4\3\0\5\4\1\0\6\4\1\u0215\3\4"+
    "\5\0\1\4\21\0\17\4\10\0\2\4\3\0\5\4"+
    "\1\0\12\4\5\0\1\4\21\0\5\4\1\u0215\11\4"+
    "\10\0\2\4\3\0\5\4\1\0\12\4\5\0\1\4"+
    "\21\0\7\4\1\u0216\7\4\10\0\2\4\3\0\5\4"+
    "\1\0\7\4\1\u0217\2\4\5\0\1\4\21\0\17\4"+
    "\10\0\2\4\3\0\5\4\1\0\5\4\1\u0218\4\4"+
    "\5\0\1\4\21\0\17\4\10\0\2\4\3\0\5\4"+
    "\1\0\10\4\1\u0219\1\4\5\0\1\4\21\0\17\4"+
    "\10\0\2\4\3\0\5\4\1\0\12\4\5\0\1\4"+
    "\21\0\10\4\1\u021a\6\4\10\0\2\4\3\0\5\4"+
    "\1\0\7\4\1\u021b\2\4\5\0\1\4\21\0\17\4"+
    "\10\0\2\4\3\0\5\4\1\0\7\4\1\u021c\2\4"+
    "\5\0\1\4\21\0\17\4\10\0\2\4\3\0\5\4"+
    "\1\0\12\4\5\0\1\4\21\0\5\4\1\u021d\11\4"+
    "\10\0\2\4\3\0\5\4\1\0\12\4\5\0\1\4"+
    "\21\0\5\4\1\u021e\11\4\10\0\2\4\3\0\5\4"+
    "\1\0\11\4\1\u021f\5\0\1\4\21\0\17\4\10\0"+
    "\2\4\3\0\5\4\1\0\6\4\1\u0220\3\4\5\0"+
    "\1\4\21\0\17\4\10\0\2\4\3\0\5\4\1\0"+
    "\1\4\1\u0221\10\4\5\0\1\4\21\0\17\4\10\0"+
    "\2\4\3\0\5\4\1\0\2\4\1\u0222\7\4\5\0"+
    "\1\4\21\0\17\4\10\0\2\4\3\0\5\4\1\0"+
    "\12\4\5\0\1\4\21\0\3\4\1\u0223\13\4\10\0"+
    "\2\4\3\0\5\4\1\0\6\4\1\u0224\3\4\5\0"+
    "\1\4\21\0\17\4\10\0\2\4\3\0\5\4\1\0"+
    "\12\4\5\0\1\4\21\0\5\4\1\u0224\11\4\10\0"+
    "\2\4\3\0\5\4\1\0\12\4\5\0\1\4\21\0"+
    "\7\4\1\u0225\7\4\10\0\2\4\3\0\5\4\1\0"+
    "\11\4\1\u0226\5\0\1\4\21\0\17\4\10\0\2\4"+
    "\3\0\5\4\1\0\5\4\1\u0227\4\4\5\0\1\4"+
    "\21\0\17\4\27\0\1\u0228\154\0\1\u0229\27\0\1\u022a"+
    "\65\0\1\u022b\117\0\1\u022c\104\0\1\u022d\63\0\1\u0173"+
    "\157\0\1\u022e\105\0\1\u022f\35\0\1\u0230\145\0\1\u0231"+
    "\37\0\1\u0232\145\0\1\u0233\44\0\1\u0234\102\0\1\u0235"+
    "\103\0\1\u0236\60\0\2\4\3\0\5\4\1\0\12\4"+
    "\5\0\1\4\21\0\3\4\1\u0237\13\4\10\0\2\4"+
    "\3\0\5\4\1\0\6\4\1\u0147\3\4\5\0\1\4"+
    "\21\0\17\4\10\0\2\4\3\0\5\4\1\0\6\4"+
    "\1\u0238\3\4\5\0\1\4\21\0\17\4\10\0\2\4"+
    "\3\0\5\4\1\0\12\4\5\0\1\4\21\0\5\4"+
    "\1\u0238\11\4\10\0\2\4\3\0\5\4\1\0\12\4"+
    "\5\0\1\4\21\0\7\4\1\u0239\7\4\10\0\2\4"+
    "\3\0\5\4\1\0\12\4\5\0\1\4\21\0\3\4"+
    "\1\u023a\13\4\10\0\2\4\3\0\5\4\1\0\12\4"+
    "\5\0\1\4\21\0\3\4\1\u015a\13\4\10\0\2\4"+
    "\3\0\5\4\1\0\1\4\1\u023b\10\4\5\0\1\4"+
    "\21\0\17\4\31\0\1\u023c\77\0\1\u023d\142\0\1\u023e"+
    "\42\0\1\u023f\77\0\1\u0240\110\0\1\u0241\143\0\1\u0242"+
    "\33\0\1\u0243\143\0\1\u0244\41\0\1\u0245\111\0\1\u0246"+
    "\60\0\2\4\3\0\3\4\1\u018d\1\4\1\0\12\4"+
    "\5\0\1\4\5\0\1\u0247\13\0\4\4\1\u018e\12\4"+
    "\10\0\2\4\3\0\5\4\1\0\12\4\5\0\1\4"+
    "\21\0\3\4\1\u01a4\13\4\67\0\1\u0248\115\0\1\u0249"+
    "\11\0\1\u024a\125\0\1\u024b\142\0\1\u024c\42\0\1\u024d"+
    "\136\0\1\u024e\45\0\1\u024f\100\0\1\u0208\143\0\1\u0250"+
    "\34\0\1\u0251\107\0\1\u0252\75\0\1\u0253\147\0\1\u0254"+
    "\40\0\1\u0255\142\0\1\u0256\44\0\1\u0257\76\0\1\u0258"+
    "\115\0\1\u0259\131\0\1\u025a\105\0\1\u025b\77\0\1\u025c"+
    "\52\0\1\u025d\52\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[31691];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\1\1\11\1\1\2\11\15\1\1\11\4\1\2\11"+
    "\2\1\1\11\10\1\1\11\11\1\3\11\1\1\1\11"+
    "\41\1\1\11\1\0\6\1\1\11\3\1\4\11\1\1"+
    "\3\11\14\0\2\1\1\11\4\0\1\11\3\0\1\1"+
    "\1\11\27\1\2\11\40\1\1\11\1\0\2\1\17\0"+
    "\2\11\1\0\1\1\10\0\1\11\46\1\1\11\7\1"+
    "\1\11\2\1\2\11\2\1\1\0\1\1\1\0\1\1"+
    "\2\11\1\1\1\0\1\1\3\0\1\1\4\0\1\1"+
    "\3\0\1\1\14\0\30\1\1\11\13\1\1\11\12\1"+
    "\2\11\4\1\27\0\1\11\6\0\1\1\1\11\2\0"+
    "\1\11\1\0\1\11\17\1\1\11\5\1\1\11\31\1"+
    "\1\0\1\11\1\0\1\11\7\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\0\1\11\1\0\1\1\6\0\2\11"+
    "\1\0\1\11\2\0\1\11\1\0\1\11\22\1\1\11"+
    "\13\1\2\0\1\11\1\0\1\1\1\11\2\0\1\1"+
    "\1\11\7\0\2\11\2\0\1\11\23\1\1\0\1\11"+
    "\3\0\1\11\6\0\1\11\1\0\1\11\5\1\2\11"+
    "\1\0\1\11\1\0\1\11\4\0\1\11\11\0\1\1"+
    "\3\11\3\0\1\11\2\0\1\11\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[605];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  // Not sure if needed:
  StringBuffer string = new StringBuffer();

  // Placeholders for line and column information:
  private int yyline;
  private int yycolumn;

  public int getYyline() { return yyline; }
  public int getYycolumn() { return yycolumn; }



  public ATSLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ATSLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1624) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch ((zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL] : zzBufferL.charAt(zzCurrentPosL))) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = (zzBufferArrayL != null ? zzBufferArrayL[zzMarkedPosL] : zzBufferL.charAt(zzMarkedPosL)) == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = (zzBufferArrayL != null ? zzBufferArrayL[zzMarkedPosL] : zzBufferL.charAt(zzMarkedPosL)) == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 163: 
          { return ATSTokenTypes.DLRMYFUNCTION;
          }
        case 165: break;
        case 146: 
          { return ATSTokenTypes.DATATYPE;
          }
        case 166: break;
        case 116: 
          { return ATSTokenTypes.DLRBREAK;
          }
        case 167: break;
        case 80: 
          { return ATSTokenTypes.VAR;
          }
        case 168: break;
        case 138: 
          { return ATSTokenTypes.SORTDEF;
          }
        case 169: break;
        case 28: 
          { return ATSTokenTypes.RBRACKET;
          }
        case 170: break;
        case 40: 
          { return ATSTokenTypes.COMMENT_BLOCK;
          }
        case 171: break;
        case 11: 
          { return ATSTokenTypes.STRING;
          }
        case 172: break;
        case 39: 
          { return ATSTokenTypes.COMMENT_LINE;
          }
        case 173: break;
        case 26: 
          { return ATSTokenTypes.COMMA;
          }
        case 174: break;
        case 128: 
          { return ATSTokenTypes.DYNLOAD;
          }
        case 175: break;
        case 13: 
          { return ATSTokenTypes.LBRACKET;
          }
        case 176: break;
        case 117: 
          { return ATSTokenTypes.SRPIFDEF;
          }
        case 177: break;
        case 115: 
          { return ATSTokenTypes.DLRRAISE;
          }
        case 178: break;
        case 140: 
          { return ATSTokenTypes.SYMINTR;
          }
        case 179: break;
        case 12: 
          { return ATSTokenTypes.CHAR;
          }
        case 180: break;
        case 125: 
          { return ATSTokenTypes.STATIC;
          }
        case 181: break;
        case 160: 
          { return ATSTokenTypes.DLRVCOPYENV;
          }
        case 182: break;
        case 45: 
          { return ATSTokenTypes.QUOTELBRACKET;
          }
        case 183: break;
        case 59: 
          { return ATSTokenTypes.MINUSGT;
          }
        case 184: break;
        case 164: 
          { return ATSTokenTypes.DLREXTYPE_STRUCT;
          }
        case 185: break;
        case 20: 
          { return ATSTokenTypes.LT;
          }
        case 186: break;
        case 127: 
          { return ATSTokenTypes.MACDEF;
          }
        case 187: break;
        case 33: 
          { return ATSTokenTypes.IN;
          }
        case 188: break;
        case 16: 
          { return ATSTokenTypes.BANG;
          }
        case 189: break;
        case 49: 
          { return ATSTokenTypes.ATLBRACE;
          }
        case 190: break;
        case 157: 
          { return ATSTokenTypes.DLREXTMCALL;
          }
        case 191: break;
        case 46: 
          { return ATSTokenTypes.QUOTELBRACE;
          }
        case 192: break;
        case 137: 
          { return ATSTokenTypes.ABSTYPE;
          }
        case 193: break;
        case 72: 
          { return ATSTokenTypes.EQLTGT;
          }
        case 194: break;
        case 56: 
          { return ATSTokenTypes.GTDOT;
          }
        case 195: break;
        case 63: 
          { return ATSTokenTypes.REF_IDENTIFIER;
          }
        case 196: break;
        case 25: 
          { return ATSTokenTypes.TILDE;
          }
        case 197: break;
        case 18: 
          { return ATSTokenTypes.BQUOTE;
          }
        case 198: break;
        case 66: 
          { return ATSTokenTypes.LAM;
          }
        case 199: break;
        case 57: 
          { return ATSTokenTypes.HASHLBRACKETOLON;
          }
        case 200: break;
        case 48: 
          { return ATSTokenTypes.ATLBRACKET;
          }
        case 201: break;
        case 21: 
          { return ATSTokenTypes.DOLLAR;
          }
        case 202: break;
        case 122: 
          { return ATSTokenTypes.ASSUME;
          }
        case 203: break;
        case 77: 
          { return ATSTokenTypes.SIF;
          }
        case 204: break;
        case 96: 
          { return ATSTokenTypes.FREEAT;
          }
        case 205: break;
        case 87: 
          { return ATSTokenTypes.DLRREC;
          }
        case 206: break;
        case 55: 
          { return ATSTokenTypes.EQGT;
          }
        case 207: break;
        case 136: 
          { return ATSTokenTypes.SRPASSERT;
          }
        case 208: break;
        case 97: 
          { return ATSTokenTypes.FOLDAT;
          }
        case 209: break;
        case 82: 
          { return ATSTokenTypes.ELSE;
          }
        case 210: break;
        case 101: 
          { return ATSTokenTypes.SRPELSE;
          }
        case 211: break;
        case 69: 
          { return ATSTokenTypes.REC;
          }
        case 212: break;
        case 100: 
          { return ATSTokenTypes.SRPELIF;
          }
        case 213: break;
        case 132: 
          { return ATSTokenTypes.DLREXTVAL;
          }
        case 214: break;
        case 31: 
          { return ATSTokenTypes.QMARK;
          }
        case 215: break;
        case 109: 
          { return ATSTokenTypes.IMPORT;
          }
        case 216: break;
        case 149: 
          { return ATSTokenTypes.DLREXTKIND;
          }
        case 217: break;
        case 78: 
          { return ATSTokenTypes.TRY;
          }
        case 218: break;
        case 104: 
          { return ATSTokenTypes.BEGIN;
          }
        case 219: break;
        case 94: 
          { return ATSTokenTypes.FIXITY;
          }
        case 220: break;
        case 62: 
          { return ATSTokenTypes.PERCENTLPAREN;
          }
        case 221: break;
        case 139: 
          { return ATSTokenTypes.STALOAD;
          }
        case 222: break;
        case 3: 
          { return ATSTokenTypes.BAD_CHARACTER;
          }
        case 223: break;
        case 147: 
          { return ATSTokenTypes.OVERLOAD;
          }
        case 224: break;
        case 156: 
          { return ATSTokenTypes.DLREXTFCALL;
          }
        case 225: break;
        case 111: 
          { return ATSTokenTypes.EXTERN;
          }
        case 226: break;
        case 135: 
          { return ATSTokenTypes.SRPDEFINE;
          }
        case 227: break;
        case 7: 
          { return ATSTokenTypes.INT;
          }
        case 228: break;
        case 70: 
          { return ATSTokenTypes.COMMENT;
          }
        case 229: break;
        case 113: 
          { return ATSTokenTypes.EXTVAR;
          }
        case 230: break;
        case 90: 
          { return ATSTokenTypes.TYPE;
          }
        case 231: break;
        case 152: 
          { return ATSTokenTypes.WITHTYPE;
          }
        case 232: break;
        case 124: 
          { return ATSTokenTypes.STADEF;
          }
        case 233: break;
        case 106: 
          { return ATSTokenTypes.VIEWAT;
          }
        case 234: break;
        case 86: 
          { return ATSTokenTypes.DLRLST;
          }
        case 235: break;
        case 47: 
          { return ATSTokenTypes.ATLPAREN;
          }
        case 236: break;
        case 44: 
          { return ATSTokenTypes.QUOTELPAREN;
          }
        case 237: break;
        case 112: 
          { return ATSTokenTypes.EXTYPE;
          }
        case 238: break;
        case 81: 
          { return ATSTokenTypes.CASE;
          }
        case 239: break;
        case 95: 
          { return ATSTokenTypes.LOCAL;
          }
        case 240: break;
        case 6: 
          { return ATSTokenTypes.WHITE_SPACE;
          }
        case 241: break;
        case 79: 
          { return ATSTokenTypes.VAL;
          }
        case 242: break;
        case 88: 
          { return ATSTokenTypes.DLRTUP;
          }
        case 243: break;
        case 75: 
          { return ATSTokenTypes.MINUSLTGT;
          }
        case 244: break;
        case 126: 
          { return ATSTokenTypes.WHILESTAR;
          }
        case 245: break;
        case 29: 
          { return ATSTokenTypes.RBRACE;
          }
        case 246: break;
        case 158: 
          { return ATSTokenTypes.DLRSHOWTYPE;
          }
        case 247: break;
        case 110: 
          { return ATSTokenTypes.NONFIX;
          }
        case 248: break;
        case 4: 
          { return ATSTokenTypes.IDENTIFIER;
          }
        case 249: break;
        case 5: 
          { return ATSTokenTypes.BACKSLASH;
          }
        case 250: break;
        case 144: 
          { return ATSTokenTypes.CLASSDEC;
          }
        case 251: break;
        case 64: 
          { return ATSTokenTypes.DLREFFMASK_ARG;
          }
        case 252: break;
        case 114: 
          { return ATSTokenTypes.DLRDELAY;
          }
        case 253: break;
        case 52: 
          { return ATSTokenTypes.COLONLT;
          }
        case 254: break;
        case 27: 
          { return ATSTokenTypes.SEMICOLON;
          }
        case 255: break;
        case 41: 
          { return ATSTokenTypes.DOTINT;
          }
        case 256: break;
        case 107: 
          { return ATSTokenTypes.WHILE;
          }
        case 257: break;
        case 58: 
          { return ATSTokenTypes.MINUSLT;
          }
        case 258: break;
        case 153: 
          { return ATSTokenTypes.IMPLEMENT;
          }
        case 259: break;
        case 151: 
          { return ATSTokenTypes.SRPELIFDEF;
          }
        case 260: break;
        case 91: 
          { return ATSTokenTypes.THEN;
          }
        case 261: break;
        case 14: 
          { return ATSTokenTypes.LBRACE;
          }
        case 262: break;
        case 30: 
          { return ATSTokenTypes.PERCENT;
          }
        case 263: break;
        case 102: 
          { return ATSTokenTypes.SRPTHEN;
          }
        case 264: break;
        case 35: 
          { return ATSTokenTypes.DO;
          }
        case 265: break;
        case 73: 
          { return ATSTokenTypes.EQGTGT;
          }
        case 266: break;
        case 65: 
          { return ATSTokenTypes.LET;
          }
        case 267: break;
        case 105: 
          { return ATSTokenTypes.SCASE;
          }
        case 268: break;
        case 108: 
          { return ATSTokenTypes.WHERE;
          }
        case 269: break;
        case 99: 
          { return ATSTokenTypes.EQSLASHEQGTGT;
          }
        case 270: break;
        case 120: 
          { return ATSTokenTypes.SRPERROR;
          }
        case 271: break;
        case 50: 
          { return ATSTokenTypes.VAL_IDENTIFIER;
          }
        case 272: break;
        case 17: 
          { return ATSTokenTypes.BAR;
          }
        case 273: break;
        case 74: 
          { return ATSTokenTypes.SRPIF;
          }
        case 274: break;
        case 36: 
          { return ATSTokenTypes.FUN;
          }
        case 275: break;
        case 162: 
          { return ATSTokenTypes.DLRMYFILENAME;
          }
        case 276: break;
        case 23: 
          { return ATSTokenTypes.GT;
          }
        case 277: break;
        case 148: 
          { return ATSTokenTypes.DLREFFMASK;
          }
        case 278: break;
        case 154: 
          { return ATSTokenTypes.EXCEPTION;
          }
        case 279: break;
        case 85: 
          { return ATSTokenTypes.DOTLTGTDOT;
          }
        case 280: break;
        case 134: 
          { return ATSTokenTypes.SRPIFNDEF;
          }
        case 281: break;
        case 32: 
          { return ATSTokenTypes.FLOAT;
          }
        case 282: break;
        case 54: 
          { return ATSTokenTypes.EQLT;
          }
        case 283: break;
        case 15: 
          { return ATSTokenTypes.AT;
          }
        case 284: break;
        case 37: 
          { return ATSTokenTypes.OF;
          }
        case 285: break;
        case 98: 
          { return ATSTokenTypes.COMMENT_REST;
          }
        case 286: break;
        case 93: 
          { return ATSTokenTypes.WHEN;
          }
        case 287: break;
        case 61: 
          { return ATSTokenTypes.COMMALPAREN;
          }
        case 288: break;
        case 119: 
          { return ATSTokenTypes.SRPENDIF;
          }
        case 289: break;
        case 51: 
          { return ATSTokenTypes.BQUOTELPAREN;
          }
        case 290: break;
        case 150: 
          { return ATSTokenTypes.SRPINCLUDE;
          }
        case 291: break;
        case 34: 
          { return ATSTokenTypes.IF;
          }
        case 292: break;
        case 141: 
          { return ATSTokenTypes.SYMELIM;
          }
        case 293: break;
        case 143: 
          { return ATSTokenTypes.TKINDEF;
          }
        case 294: break;
        case 10: 
          { return ATSTokenTypes.DOT;
          }
        case 295: break;
        case 121: 
          { return ATSTokenTypes.SRPPRINT;
          }
        case 296: break;
        case 19: 
          { return ATSTokenTypes.COLON;
          }
        case 297: break;
        case 60: 
          { return ATSTokenTypes.AS;
          }
        case 298: break;
        case 53: 
          { return ATSTokenTypes.GTLT;
          }
        case 299: break;
        case 130: 
          { return ATSTokenTypes.DLREXTERN;
          }
        case 300: break;
        case 142: 
          { return ATSTokenTypes.TYPEDEF;
          }
        case 301: break;
        case 92: 
          { return ATSTokenTypes.WITH;
          }
        case 302: break;
        case 24: 
          { return ATSTokenTypes.HASH;
          }
        case 303: break;
        case 159: 
          { return ATSTokenTypes.SRPELIFNDEF;
          }
        case 304: break;
        case 67: 
          { return ATSTokenTypes.END;
          }
        case 305: break;
        case 103: 
          { return ATSTokenTypes.ADDRAT;
          }
        case 306: break;
        case 43: 
          { return ATSTokenTypes.DOTLT;
          }
        case 307: break;
        case 84: 
          { return ATSTokenTypes.REFAT;
          }
        case 308: break;
        case 1: 
          { return ATSTokenTypes.EXTCODE;
          }
        case 309: break;
        case 133: 
          { return ATSTokenTypes.DLRARRPSZ;
          }
        case 310: break;
        case 118: 
          { return ATSTokenTypes.SRPUNDEF;
          }
        case 311: break;
        case 8: 
          { return ATSTokenTypes.RPAREN;
          }
        case 312: break;
        case 145: 
          { return ATSTokenTypes.DATASORT;
          }
        case 313: break;
        case 155: 
          { return ATSTokenTypes.DLRCONTINUE;
          }
        case 314: break;
        case 83: 
          { return ATSTokenTypes.FORSTAR;
          }
        case 315: break;
        case 131: 
          { return ATSTokenTypes.DLREXTYPE;
          }
        case 316: break;
        case 161: 
          { return ATSTokenTypes.DLRMYLOCATION;
          }
        case 317: break;
        case 38: 
          { return ATSTokenTypes.OP;
          }
        case 318: break;
        case 22: 
          { return ATSTokenTypes.EQ;
          }
        case 319: break;
        case 2: 
          { return ATSTokenTypes.NONE;
          }
        case 320: break;
        case 9: 
          { return ATSTokenTypes.LPAREN;
          }
        case 321: break;
        case 123: 
          { return ATSTokenTypes.STACST;
          }
        case 322: break;
        case 89: 
          { return ATSTokenTypes.EQSLASHEQGT;
          }
        case 323: break;
        case 76: 
          { return ATSTokenTypes.AND;
          }
        case 324: break;
        case 42: 
          { return ATSTokenTypes.DOTDOT;
          }
        case 325: break;
        case 129: 
          { return ATSTokenTypes.REQUIRE;
          }
        case 326: break;
        case 68: 
          { return ATSTokenTypes.FIX;
          }
        case 327: break;
        case 71: 
          { return ATSTokenTypes.DOTDOTDOT;
          }
        case 328: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
