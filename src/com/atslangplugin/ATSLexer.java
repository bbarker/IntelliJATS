/* The following code was generated by JFlex 1.4.3 on 12/20/14 9:28 PM */

package com.atslangplugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.atslangplugin.psi.ATSTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/20/14 9:28 PM from the specification file
 * <tt>C:/cygwin64/home/brand_000/IntelliJATS/src/com/atslangplugin/ATS.flex</tt>
 */
class ATSLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\0\1\1\1\0\1\4\1\2\22\0\1\10\1\15\1\0"+
    "\1\25\1\21\1\72\1\0\1\71\1\6\1\11\1\7\1\52\1\63"+
    "\1\26\1\22\1\5\1\12\11\13\1\17\1\64\1\20\1\23\1\24"+
    "\1\0\1\14\32\0\1\65\1\3\1\66\1\0\1\62\1\16\1\30"+
    "\1\31\1\51\1\45\1\36\1\55\1\50\1\57\1\42\1\0\1\60"+
    "\1\53\1\47\1\44\1\40\1\35\1\56\1\37\1\32\1\33\1\46"+
    "\1\41\1\43\1\54\1\34\1\61\1\67\1\0\1\70\1\27\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\0\1\2\1\3\1\2\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\2\1\21\21\2\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\2\2\2\5\1\30\2\0\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\13\0\2\37\1\40"+
    "\1\41\1\0\1\42\1\43\1\44\7\0\1\45\1\46"+
    "\1\47\1\0\1\50\23\0\1\51\1\0\1\52\2\0"+
    "\1\53\1\0\1\54\7\0\1\55\12\0\1\56\1\0"+
    "\1\57\1\60\1\61\1\62\1\63\1\0\3\30\1\0"+
    "\1\30\21\0\1\64\1\0\1\65\1\66\7\0\1\67"+
    "\2\0\1\70\2\0\1\71\1\0\1\72\4\0\1\73"+
    "\2\0\1\74\12\0\1\75\3\0\1\76\1\72\2\0"+
    "\1\77\1\100\14\0\1\101\1\102\5\0\1\103\1\56"+
    "\1\0\2\30\6\0\1\104\3\0\1\105\5\0\1\106"+
    "\1\107\1\110\32\0\1\111\1\112\7\0\1\113\4\0"+
    "\1\114\2\0\1\100\4\0\1\115\1\0\1\116\7\0"+
    "\1\117\1\0\1\101\2\0\1\120\1\0\1\103\1\0"+
    "\2\30\2\121\1\122\32\0\1\123\1\0\1\124\3\0"+
    "\1\125\1\126\12\0\1\127\1\130\7\0\1\131\1\111"+
    "\13\0\1\132\1\0\1\133\5\0\1\134\1\135\10\0"+
    "\1\117\1\0\1\136\1\137\1\140\1\0\1\30\4\0"+
    "\1\141\1\0\2\104\10\0\1\142\1\0\1\105\2\0"+
    "\1\143\4\0\1\106\2\0\1\144\1\145\1\146\4\0"+
    "\1\147\1\0\1\150\3\0\1\151\1\152\1\153\1\154"+
    "\6\0\1\133\1\155\1\156\1\157\4\0\1\160\4\0"+
    "\1\161\1\162\5\0\1\163\3\0\1\164\2\0\1\165"+
    "\1\166\1\167\4\0\1\105\5\0\1\170\3\0\1\171"+
    "\1\172\2\173\1\174\1\175\1\176\1\177\1\200\1\201"+
    "\1\0\1\202\12\0\1\203\7\0\1\204\1\205\6\0"+
    "\1\206\1\207\2\0\1\210\1\0\2\211\1\212\2\213"+
    "\1\214\1\0\1\215\1\0\1\216\1\217\4\0\1\220"+
    "\1\221\1\222\1\223\7\0\1\224\1\225\1\226\1\227"+
    "\4\0\1\230\2\0\1\224";

  private static int [] zzUnpackAction() {
    int [] result = new int[594];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\166\0\261\0\354\0\u0127\0\166"+
    "\0\u0162\0\166\0\u019d\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4"+
    "\0\u02ff\0\u033a\0\u0375\0\166\0\u03b0\0\u03eb\0\u0426\0\u0461"+
    "\0\u049c\0\u04d7\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639"+
    "\0\u0674\0\u06af\0\u06ea\0\u0725\0\u0760\0\u079b\0\166\0\166"+
    "\0\166\0\166\0\166\0\u07d6\0\u0811\0\166\0\u084c\0\u0887"+
    "\0\u08c2\0\u0127\0\166\0\166\0\166\0\166\0\166\0\166"+
    "\0\u08fd\0\u0938\0\u0973\0\u09ae\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a"+
    "\0\u0ad5\0\u0b10\0\u0b4b\0\166\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37"+
    "\0\u0c72\0\u0cad\0\166\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4"+
    "\0\u0e0f\0\u0e4a\0\166\0\u0e85\0\166\0\u0ec0\0\u0efb\0\u0f36"+
    "\0\u0f71\0\u0fac\0\u0fe7\0\u1022\0\u105d\0\u1098\0\u10d3\0\u110e"+
    "\0\u1149\0\u1184\0\u11bf\0\u11fa\0\u1235\0\u1270\0\u12ab\0\u12e6"+
    "\0\u1321\0\u135c\0\166\0\u1397\0\166\0\u13d2\0\u140d\0\u1448"+
    "\0\u1483\0\166\0\u14be\0\u14f9\0\u1534\0\u156f\0\u15aa\0\u15e5"+
    "\0\u1620\0\166\0\u165b\0\u1696\0\u16d1\0\u170c\0\u1747\0\u1782"+
    "\0\u17bd\0\u17f8\0\u1833\0\u186e\0\u18a9\0\u18e4\0\166\0\166"+
    "\0\166\0\166\0\166\0\u191f\0\u195a\0\166\0\u1995\0\u19d0"+
    "\0\u1a0b\0\u1a46\0\u1a81\0\u1abc\0\u1af7\0\u1b32\0\u1b6d\0\u1ba8"+
    "\0\u1be3\0\u1c1e\0\u1c59\0\u1c94\0\u1ccf\0\u1d0a\0\u1d45\0\u1d80"+
    "\0\u1dbb\0\u1df6\0\166\0\u1e31\0\166\0\166\0\u1e6c\0\u1ea7"+
    "\0\u1ee2\0\u1f1d\0\u1f58\0\u1f93\0\u1fce\0\u2009\0\u2044\0\u207f"+
    "\0\166\0\u20ba\0\u20f5\0\166\0\u2130\0\166\0\u216b\0\u21a6"+
    "\0\u21e1\0\u221c\0\166\0\u2257\0\u2292\0\166\0\u22cd\0\u2308"+
    "\0\u2343\0\u237e\0\u23b9\0\u23f4\0\u242f\0\u246a\0\u24a5\0\u24e0"+
    "\0\166\0\u251b\0\u2556\0\u2591\0\166\0\u25cc\0\u2607\0\u2642"+
    "\0\166\0\u267d\0\u26b8\0\u26f3\0\u272e\0\u2769\0\u27a4\0\u27df"+
    "\0\u281a\0\u2855\0\u2890\0\u28cb\0\u2906\0\u2941\0\u297c\0\166"+
    "\0\u29b7\0\u29f2\0\u2a2d\0\u2a68\0\u2aa3\0\u2ade\0\166\0\u2b19"+
    "\0\u2b54\0\u2b8f\0\u2bca\0\u2c05\0\u2c40\0\u2c7b\0\u2cb6\0\u2cf1"+
    "\0\u2d2c\0\u2d67\0\u2da2\0\u2ddd\0\u2e18\0\u2e53\0\u2e8e\0\u2ec9"+
    "\0\u2f04\0\u2f3f\0\u2f7a\0\166\0\u2fb5\0\u2ff0\0\u302b\0\u3066"+
    "\0\u30a1\0\u30dc\0\u3117\0\u3152\0\u318d\0\u31c8\0\u3203\0\u323e"+
    "\0\u3279\0\u32b4\0\u32ef\0\u332a\0\u3365\0\u33a0\0\u33db\0\u3416"+
    "\0\u3451\0\u348c\0\u34c7\0\u3502\0\u353d\0\u3578\0\u35b3\0\u35ee"+
    "\0\166\0\u3629\0\u3664\0\u369f\0\u36da\0\u3715\0\u3750\0\u378b"+
    "\0\166\0\u37c6\0\u3801\0\u383c\0\u3877\0\166\0\u38b2\0\u38ed"+
    "\0\166\0\u3928\0\u3963\0\u399e\0\u39d9\0\u3a14\0\u3a4f\0\166"+
    "\0\u3a8a\0\u3ac5\0\u3b00\0\u3b3b\0\u3b76\0\u3bb1\0\u3bec\0\u3c27"+
    "\0\u3c62\0\166\0\u3c9d\0\u3cd8\0\166\0\u3d13\0\166\0\u3d4e"+
    "\0\u3d89\0\u3dc4\0\u3dff\0\u3d89\0\166\0\u3e3a\0\u3e75\0\u3eb0"+
    "\0\u3eeb\0\u3f26\0\u3f61\0\u3f9c\0\u3fd7\0\u4012\0\u404d\0\u4088"+
    "\0\u40c3\0\u40fe\0\u4139\0\u4174\0\u41af\0\u41ea\0\u4225\0\u4260"+
    "\0\u429b\0\u42d6\0\u4311\0\u434c\0\u4387\0\u43c2\0\u43fd\0\166"+
    "\0\u4438\0\166\0\u4473\0\u44ae\0\u44e9\0\166\0\u4524\0\u455f"+
    "\0\u459a\0\u45d5\0\u4610\0\u464b\0\u4686\0\u46c1\0\u46fc\0\u4737"+
    "\0\u4772\0\166\0\166\0\u47ad\0\u47e8\0\u4823\0\u485e\0\u4899"+
    "\0\u48d4\0\u490f\0\166\0\166\0\u494a\0\u4985\0\u49c0\0\u49fb"+
    "\0\u4a36\0\u4a71\0\u4aac\0\u4ae7\0\u4b22\0\u4b5d\0\u4b98\0\166"+
    "\0\u4bd3\0\u4c0e\0\u4c49\0\u4c84\0\u4cbf\0\u4cfa\0\u4d35\0\166"+
    "\0\u4d70\0\u4dab\0\u4de6\0\u4e21\0\u4e5c\0\u4e97\0\u4ed2\0\u4f0d"+
    "\0\u4f48\0\166\0\u4f83\0\166\0\166\0\166\0\u4fbe\0\u4ff9"+
    "\0\u5034\0\u506f\0\u50aa\0\u50e5\0\166\0\u5120\0\u515b\0\166"+
    "\0\u5196\0\u51d1\0\u520c\0\u5247\0\u5282\0\u52bd\0\u52f8\0\u5333"+
    "\0\166\0\u536e\0\166\0\u53a9\0\u53e4\0\166\0\u541f\0\u545a"+
    "\0\u5495\0\u54d0\0\166\0\u550b\0\u5546\0\166\0\166\0\166"+
    "\0\u5581\0\u55bc\0\u55f7\0\u5632\0\166\0\u566d\0\166\0\u56a8"+
    "\0\u56e3\0\u571e\0\166\0\166\0\166\0\166\0\u5759\0\u5794"+
    "\0\u57cf\0\u580a\0\u5845\0\u5880\0\166\0\166\0\166\0\166"+
    "\0\u58bb\0\u58f6\0\u5931\0\u596c\0\166\0\u59a7\0\u59e2\0\u5a1d"+
    "\0\u5a58\0\166\0\166\0\u5a93\0\u5ace\0\u5b09\0\u5b44\0\u5b7f"+
    "\0\166\0\u5bba\0\u5bf5\0\u5c30\0\166\0\u5c6b\0\u5ca6\0\u5ce1"+
    "\0\166\0\166\0\u5d1c\0\u5d57\0\u5d92\0\u5dcd\0\u5e08\0\u5e43"+
    "\0\u5e7e\0\u5eb9\0\u5ef4\0\u5f2f\0\166\0\u5f6a\0\u5fa5\0\u5fe0"+
    "\0\166\0\166\0\166\0\u601b\0\166\0\166\0\166\0\166"+
    "\0\166\0\166\0\u6056\0\166\0\u6091\0\u60cc\0\u6107\0\u6142"+
    "\0\u617d\0\u61b8\0\u61f3\0\u622e\0\u6269\0\u62a4\0\166\0\u62df"+
    "\0\u601b\0\u631a\0\u6355\0\u6390\0\u63cb\0\u6406\0\166\0\166"+
    "\0\u6441\0\u647c\0\u64b7\0\u64f2\0\u652d\0\u6568\0\166\0\166"+
    "\0\u65a3\0\u65de\0\166\0\u6619\0\166\0\u6654\0\166\0\166"+
    "\0\u668f\0\166\0\u66ca\0\166\0\u6705\0\166\0\166\0\u6740"+
    "\0\u677b\0\u67b6\0\u67f1\0\166\0\166\0\166\0\166\0\u682c"+
    "\0\u6867\0\u68a2\0\u68dd\0\u6918\0\u6953\0\u698e\0\u69c9\0\166"+
    "\0\166\0\166\0\u6a04\0\u6a3f\0\u6a7a\0\u6ab5\0\166\0\u6af0"+
    "\0\u6b2b\0\166";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[594];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\3\1\4\1\3\1\5\1\6\1\7\1\3\1\10"+
    "\2\3\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\3\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\3\1\42\1\3\1\43\1\3"+
    "\1\44\1\3\1\45\5\3\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\30\56\1\57\42\56\100\0"+
    "\1\60\74\0\1\61\63\0\7\3\1\62\1\3\1\0"+
    "\61\3\6\0\1\63\56\0\1\64\1\0\1\65\11\0"+
    "\1\66\104\0\1\67\76\0\1\70\76\0\1\71\1\72"+
    "\1\73\1\74\2\0\1\75\1\76\1\0\1\77\3\0"+
    "\1\100\1\0\1\101\1\0\1\102\1\0\1\103\31\0"+
    "\1\104\1\105\4\0\1\106\1\0\1\107\55\0\1\110"+
    "\12\0\1\111\3\0\1\112\70\0\1\113\100\0\1\114"+
    "\2\0\1\115\1\0\1\116\1\117\3\0\1\120\2\0"+
    "\1\121\1\122\16\0\1\123\25\0\1\124\3\0\1\125"+
    "\77\0\1\126\1\127\11\0\1\130\1\131\5\0\1\132"+
    "\55\0\1\133\67\0\1\134\1\135\3\0\1\136\1\0"+
    "\1\137\6\0\1\140\55\0\1\141\2\0\1\142\17\0"+
    "\1\143\1\144\51\0\1\145\1\146\76\0\1\147\6\0"+
    "\1\150\1\151\54\0\1\152\71\0\1\153\3\0\1\154"+
    "\13\0\1\155\45\0\1\156\11\0\1\157\74\0\1\160"+
    "\2\0\1\161\5\0\1\162\54\0\1\163\2\0\1\164"+
    "\14\0\1\165\46\0\1\166\4\0\1\167\62\0\1\170"+
    "\3\0\1\171\3\0\1\172\62\0\1\173\72\0\1\174"+
    "\22\0\1\175\47\0\1\176\5\0\1\177\1\0\1\200"+
    "\12\0\1\201\56\0\1\202\1\203\1\0\1\204\1\0"+
    "\1\205\1\0\1\206\32\0\1\207\72\0\1\210\56\0"+
    "\1\211\1\0\1\212\11\0\1\213\115\0\1\214\41\0"+
    "\1\215\1\216\1\217\1\220\1\0\1\221\2\215\1\0"+
    "\62\215\7\222\1\223\63\222\37\0\1\224\72\0\1\225"+
    "\112\0\1\226\61\0\1\227\100\0\1\230\1\231\45\0"+
    "\1\232\5\0\1\233\105\0\1\234\57\0\1\235\70\0"+
    "\1\236\76\0\1\237\64\0\1\240\7\0\1\241\2\0"+
    "\1\100\37\0\2\105\103\0\1\242\70\0\1\243\73\0"+
    "\1\244\73\0\1\245\72\0\1\246\100\0\1\247\117\0"+
    "\1\250\52\0\1\251\72\0\1\252\4\0\1\253\6\0"+
    "\1\254\63\0\1\255\10\0\1\256\53\0\1\257\100\0"+
    "\1\260\52\0\1\261\100\0\1\262\72\0\1\263\105\0"+
    "\1\264\72\0\1\265\100\0\1\266\67\0\1\267\52\0"+
    "\1\270\111\0\1\271\62\0\1\272\110\0\1\273\45\0"+
    "\1\274\77\0\1\275\71\0\1\276\74\0\1\277\76\0"+
    "\1\300\60\0\1\301\5\0\1\302\1\0\1\303\1\304"+
    "\1\305\6\0\1\306\3\0\1\307\47\0\1\310\105\0"+
    "\1\311\57\0\1\312\73\0\1\313\10\0\1\266\4\0"+
    "\1\314\72\0\1\315\3\0\1\316\1\317\52\0\1\320"+
    "\73\0\1\321\13\0\1\322\55\0\1\323\111\0\1\324"+
    "\52\0\1\325\70\0\1\266\72\0\1\326\75\0\1\327"+
    "\3\0\1\330\77\0\1\266\67\0\1\331\61\0\1\332"+
    "\103\0\1\333\77\0\1\334\53\0\1\335\70\0\1\336"+
    "\111\0\1\337\56\0\1\340\110\0\1\341\51\0\1\342"+
    "\100\0\1\343\73\0\1\344\13\0\1\345\73\0\1\346"+
    "\72\0\1\347\62\0\1\347\60\0\1\350\40\0\1\215"+
    "\1\216\1\217\1\220\1\0\3\215\1\0\62\215\1\0"+
    "\1\216\71\0\2\215\1\351\71\215\1\216\1\217\1\220"+
    "\1\0\1\352\2\215\1\0\62\215\7\222\1\353\63\222"+
    "\7\354\1\223\1\355\1\0\61\354\37\0\1\356\71\0"+
    "\1\357\74\0\1\360\67\0\1\361\70\0\1\362\114\0"+
    "\1\363\57\0\1\364\101\0\1\365\61\0\1\366\105\0"+
    "\1\367\72\0\1\370\1\0\1\371\61\0\1\372\61\0"+
    "\1\373\71\0\1\240\62\0\1\374\74\0\1\375\100\0"+
    "\1\376\76\0\1\377\76\0\1\u0100\67\0\1\u0101\100\0"+
    "\1\u0102\57\0\1\u0103\7\0\1\u0104\101\0\1\u0105\65\0"+
    "\1\u0106\1\u0107\102\0\1\u0108\62\0\1\u0109\60\0\1\u010a"+
    "\1\0\1\u010b\3\0\1\u010c\77\0\1\u010d\63\0\1\u010e"+
    "\75\0\1\u010f\63\0\1\u0110\11\0\1\u0111\3\0\1\u0112"+
    "\1\0\1\u0113\55\0\1\u0114\3\0\1\u0115\63\0\1\u0116"+
    "\71\0\1\u0117\76\0\1\u0118\100\0\1\u0119\72\0\1\u011a"+
    "\102\0\1\u011b\73\0\1\u011c\52\0\1\u011d\65\0\1\u011e"+
    "\111\0\1\u011f\53\0\1\u0120\106\0\1\347\1\0\1\206"+
    "\57\0\1\302\75\0\1\u0121\70\0\1\u0122\1\0\1\u0123"+
    "\2\0\1\u0124\67\0\1\u0125\50\0\1\u0126\124\0\1\u0127"+
    "\63\0\1\u0128\61\0\1\u0129\23\0\1\u0129\63\0\1\u012a"+
    "\71\0\1\u012b\70\0\1\u012c\12\0\1\u012d\76\0\1\u012e"+
    "\52\0\1\u012f\4\0\1\u0130\101\0\1\u0131\74\0\1\u0132"+
    "\45\0\1\u0133\115\0\1\u0134\56\0\1\u0135\5\0\1\u0136"+
    "\60\0\1\u0137\2\0\1\u0138\66\0\1\u0139\54\0\1\u013a"+
    "\106\0\1\u013b\111\0\1\u013a\61\0\1\u013c\43\0\1\u013d"+
    "\130\0\1\u013e\41\0\1\u013f\117\0\1\u0140\31\0\2\215"+
    "\1\217\1\220\1\0\3\215\1\0\62\215\1\352\1\u0141"+
    "\1\u0142\1\u0143\1\u0144\3\352\1\u0144\62\352\7\222\1\353"+
    "\1\222\1\u0145\61\222\7\0\1\u0146\63\0\1\354\1\u0147"+
    "\1\u0148\4\354\1\u0149\1\355\62\354\35\0\1\u014a\65\0"+
    "\1\u014b\105\0\1\u014c\102\0\1\u014d\6\0\1\u014e\44\0"+
    "\1\u014f\1\0\1\u0150\2\0\1\u0151\5\0\1\u0152\5\0"+
    "\1\u0153\2\0\1\u0154\61\0\1\u0155\55\0\1\u0156\100\0"+
    "\1\u0157\21\0\1\u0158\45\0\1\u0159\65\0\1\u015a\102\0"+
    "\1\u015b\74\0\1\u015c\3\0\1\u015d\57\0\1\u015e\121\0"+
    "\1\u015f\34\0\1\u0160\104\0\1\u0161\100\0\1\u0162\72\0"+
    "\1\u0163\66\0\1\u0164\74\0\1\u0165\66\0\1\u0166\111\0"+
    "\1\u0167\70\0\1\u0168\64\0\1\u0169\63\0\1\u016a\76\0"+
    "\1\u016b\66\0\1\u016c\46\0\1\u016d\21\0\1\u016e\75\0"+
    "\1\u016f\66\0\1\u010a\6\0\1\u0170\77\0\1\u0171\37\0"+
    "\1\u0172\122\0\1\u0173\70\0\1\u0174\66\0\1\u0175\66\0"+
    "\1\u0176\100\0\1\u0177\105\0\1\u0178\63\0\1\u0179\73\0"+
    "\1\u017a\63\0\1\u017b\62\0\1\u017c\16\0\1\u017d\4\0"+
    "\1\u017c\65\0\1\u017e\67\0\1\347\72\0\1\u017f\75\0"+
    "\1\u017d\64\0\1\321\13\0\1\u0129\54\0\1\u0180\67\0"+
    "\1\u0181\75\0\1\u0182\74\0\1\u0183\63\0\1\u0184\77\0"+
    "\1\u0185\77\0\1\u0186\103\0\1\u0187\33\0\1\u0188\16\0"+
    "\1\u0189\11\0\1\u017d\101\0\1\u018a\55\0\1\u018b\71\0"+
    "\1\u018c\67\0\1\u018d\1\0\1\u018e\3\0\1\u018f\67\0"+
    "\1\u0190\72\0\1\u0191\76\0\1\u0192\62\0\1\u0193\1\u0194"+
    "\1\0\1\u0195\3\0\1\u0196\71\0\1\u0197\72\0\1\u0198"+
    "\70\0\1\u0199\111\0\1\206\43\0\1\u019a\23\0\1\u019a"+
    "\52\0\1\u019b\113\0\1\u019c\33\0\1\u019d\72\0\1\u019e"+
    "\111\0\1\u010a\6\0\1\u019f\30\0\74\u0144\1\u0141\71\u0144"+
    "\2\352\1\u01a0\70\352\7\0\1\u01a1\1\u01a2\1\3\61\0"+
    "\7\354\1\u0149\64\354\1\u0147\5\354\1\u0149\72\354\1\223"+
    "\1\355\1\3\61\354\32\0\1\u01a3\1\u01a4\117\0\1\u01a5"+
    "\45\0\1\u01a6\75\0\1\u01a7\67\0\1\u01a8\5\0\1\u01a9"+
    "\66\0\1\u01aa\74\0\1\u01ab\63\0\1\u01ac\113\0\1\u01ad"+
    "\72\0\1\u01ae\63\0\1\u01af\60\0\1\u01b0\100\0\1\u01b1"+
    "\73\0\1\u01b2\66\0\1\u01b3\5\0\1\u01b4\65\0\1\u01b5"+
    "\72\0\1\u01b6\107\0\1\u01b7\74\0\1\u01b8\63\0\1\u01b9"+
    "\70\0\1\u01ba\63\0\1\u01bb\5\0\1\u01bc\70\0\1\u01bd"+
    "\66\0\1\u01be\76\0\1\u01bf\110\0\1\u01c0\61\0\1\u01c1"+
    "\1\u01c2\73\0\1\u01c3\62\0\1\u01c4\111\0\1\u01c5\61\0"+
    "\1\u01c6\103\0\1\u01c7\51\0\1\u016e\73\0\1\u01c8\75\0"+
    "\1\u01c9\70\0\1\u01ca\72\0\1\u01cb\105\0\1\u01cc\76\0"+
    "\1\u01cd\50\0\1\u01ce\67\0\1\u01cf\104\0\1\u01d0\63\0"+
    "\1\u01d1\75\0\1\u01d2\72\0\1\u01d3\72\0\1\u01d4\110\0"+
    "\1\u01d5\71\0\1\u012d\55\0\1\u019a\72\0\1\u01d6\100\0"+
    "\1\u01d7\65\0\1\u01d8\66\0\1\u01d9\76\0\1\u01da\73\0"+
    "\1\u01db\66\0\1\u01dc\75\0\1\u01d5\13\0\1\u01d5\52\0"+
    "\1\u01dd\106\0\1\u01de\57\0\1\u01df\75\0\1\u01e0\75\0"+
    "\1\u01e1\37\0\1\u01e2\137\0\1\u01e3\56\0\1\u01e4\66\0"+
    "\1\u01e5\75\0\1\u01e6\66\0\1\u0194\6\0\1\u01e7\60\0"+
    "\1\u01e8\107\0\1\u0136\102\0\1\u01e9\62\0\1\u01ea\63\0"+
    "\1\u01eb\34\0\2\352\1\u0142\1\u0143\1\u0144\3\352\1\u0144"+
    "\62\352\7\0\1\u01a1\1\u01a2\63\0\1\354\1\u01ec\4\0"+
    "\1\u0146\1\u01a2\143\0\1\u01ed\50\0\1\u01ee\67\0\1\u01ef"+
    "\120\0\1\u014e\43\0\1\u01a8\75\0\1\u01f0\100\0\1\u01f1"+
    "\101\0\1\u01f2\47\0\1\u01f3\72\0\1\u01f4\106\0\1\u01f5"+
    "\60\0\1\u01f6\105\0\1\u01f7\60\0\1\u01b3\75\0\1\u01f8"+
    "\64\0\1\u01f9\100\0\1\u01fa\105\0\1\u01fb\65\0\1\u01fc"+
    "\61\0\1\u01bb\72\0\1\u01fd\104\0\1\u01fe\63\0\1\u01ff"+
    "\101\0\1\u0200\102\0\1\u0201\53\0\1\u0202\72\0\1\u0203"+
    "\71\0\1\u0203\100\0\1\u0204\74\0\1\u0205\74\0\1\u0206"+
    "\62\0\1\u0207\110\0\1\u0208\72\0\1\u0209\72\0\1\u020a"+
    "\57\0\1\u020b\66\0\1\u020c\64\0\1\u020d\77\0\1\u020e"+
    "\73\0\1\u020f\71\0\1\u0210\75\0\1\u0211\70\0\1\u0212"+
    "\73\0\1\u0213\70\0\1\u0214\75\0\1\u0215\70\0\1\u0216"+
    "\101\0\1\u0217\63\0\1\u0218\77\0\1\u0219\30\0\1\354"+
    "\5\0\1\u0146\115\0\1\u021a\75\0\1\u021b\117\0\1\u021c"+
    "\63\0\1\u021d\72\0\1\u021e\64\0\1\u021f\105\0\1\u0220"+
    "\74\0\1\u0158\54\0\1\u0221\61\0\1\u0222\103\0\1\u0223"+
    "\61\0\1\u0224\105\0\1\u0225\62\0\1\u0226\111\0\1\u0227"+
    "\53\0\1\u0228\67\0\1\u0229\77\0\1\u022a\77\0\1\u022b"+
    "\63\0\1\u011d\100\0\1\u022c\64\0\1\u022d\71\0\1\u022d"+
    "\100\0\1\u022e\62\0\1\u022f\75\0\1\u0230\71\0\1\u0230"+
    "\100\0\1\u0231\100\0\1\u0232\63\0\1\u0233\66\0\1\u0234"+
    "\66\0\1\u0235\113\0\1\u0236\72\0\1\u0237\60\0\1\u0238"+
    "\73\0\1\u0239\60\0\1\u023a\104\0\1\u023b\66\0\1\u023c"+
    "\111\0\1\u023d\27\0\1\u016d\1\0\1\u016d\17\0\1\u016e"+
    "\102\0\1\u023e\61\0\1\u023f\72\0\1\u018d\72\0\1\u0194"+
    "\120\0\1\u0240\44\0\1\u0241\121\0\1\u0242\50\0\1\u0243"+
    "\101\0\1\u0244\63\0\1\u0245\70\0\1\u01ed\73\0\1\u0246"+
    "\74\0\1\u0247\75\0\1\u0248\64\0\1\u0249\100\0\1\u024a"+
    "\74\0\1\u024b\57\0\1\u024c\110\0\1\u024d\27\0\1\u024e"+
    "\117\0\1\u024f\100\0\1\u0250\64\0\1\u0251\50\0\1\u0252"+
    "\61\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[27494];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\0\2\11\3\1\1\11\1\1\1\11\11\1"+
    "\1\11\22\1\5\11\2\1\1\11\2\1\2\0\6\11"+
    "\13\0\1\11\3\1\1\0\2\1\1\11\7\0\1\11"+
    "\1\1\1\11\1\0\1\1\23\0\1\11\1\0\1\11"+
    "\2\0\1\1\1\0\1\11\7\0\1\11\12\0\1\1"+
    "\1\0\5\11\1\0\1\1\1\11\1\1\1\0\1\1"+
    "\21\0\1\11\1\0\2\11\7\0\1\1\2\0\1\11"+
    "\2\0\1\11\1\0\1\11\4\0\1\11\2\0\1\11"+
    "\12\0\1\11\3\0\1\11\1\1\2\0\1\11\1\1"+
    "\14\0\1\1\1\11\5\0\1\1\1\11\1\0\2\1"+
    "\6\0\1\1\3\0\1\1\5\0\1\1\1\11\1\1"+
    "\32\0\1\1\1\11\7\0\1\11\4\0\1\11\2\0"+
    "\1\11\4\0\1\1\1\0\1\11\7\0\1\1\1\0"+
    "\1\11\2\0\1\11\1\0\1\11\1\0\4\1\1\11"+
    "\32\0\1\11\1\0\1\11\3\0\1\11\1\1\12\0"+
    "\2\11\7\0\2\11\13\0\1\11\1\0\1\1\5\0"+
    "\1\11\1\1\10\0\1\11\1\0\3\11\1\0\1\1"+
    "\4\0\1\11\1\0\1\1\1\11\10\0\1\11\1\0"+
    "\1\11\2\0\1\11\4\0\1\11\2\0\3\11\4\0"+
    "\1\11\1\0\1\11\3\0\4\11\6\0\4\11\4\0"+
    "\1\11\4\0\2\11\5\0\1\11\3\0\1\11\2\0"+
    "\1\1\2\11\4\0\1\1\5\0\1\11\3\0\3\11"+
    "\1\1\6\11\1\0\1\11\12\0\1\11\7\0\2\11"+
    "\6\0\2\11\2\0\1\11\1\0\1\11\1\1\2\11"+
    "\1\1\1\11\1\0\1\11\1\0\2\11\4\0\4\11"+
    "\7\0\1\1\3\11\4\0\1\11\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[594];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  // Not sure if needed:
  StringBuffer string = new StringBuffer();

  // Placeholders for line and column information:
  private int yyline;
  private int yycolumn;


  ATSLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  ATSLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 140) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch ((zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL] : zzBufferL.charAt(zzCurrentPosL))) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = (zzBufferArrayL != null ? zzBufferArrayL[zzMarkedPosL] : zzBufferL.charAt(zzMarkedPosL)) == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = (zzBufferArrayL != null ? zzBufferArrayL[zzMarkedPosL] : zzBufferL.charAt(zzMarkedPosL)) == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 48: 
          { return ATSTypes.QUOTELPAREN;
          }
        case 153: break;
        case 92: 
          { return ATSTypes.WHERE;
          }
        case 154: break;
        case 116: 
          { return ATSTypes.DLRARRPSZ;
          }
        case 155: break;
        case 4: 
          { return ATSTypes.LPAREN;
          }
        case 156: break;
        case 108: 
          { return ATSTypes.STACST;
          }
        case 157: break;
        case 20: 
          { return ATSTypes.LBRACKET;
          }
        case 158: break;
        case 98: 
          { return ATSTypes.DLRRAISE;
          }
        case 159: break;
        case 141: 
          { return ATSTypes.DLRSHOWTYPE;
          }
        case 160: break;
        case 27: 
          { return ATSTypes.ATLBRACE;
          }
        case 161: break;
        case 126: 
          { return ATSTypes.SYMINTR;
          }
        case 162: break;
        case 34: 
          { return ATSTypes.EQLT;
          }
        case 163: break;
        case 37: 
          { return ATSTypes.HASHLBRACKETOLON;
          }
        case 164: break;
        case 123: 
          { return ATSTypes.ABSTYPE;
          }
        case 165: break;
        case 118: 
          { return ATSTypes.DLREXTERN;
          }
        case 166: break;
        case 78: 
          { return ATSTypes.WHEN;
          }
        case 167: break;
        case 134: 
          { return ATSTypes.SRPELIFDEF;
          }
        case 168: break;
        case 89: 
          { return ATSTypes.SCASE;
          }
        case 169: break;
        case 65: 
          { return ATSTypes.LAM;
          }
        case 170: break;
        case 59: 
          { return ATSTypes.SIF;
          }
        case 171: break;
        case 71: 
          { return ATSTypes.DOTLTGTDOT;
          }
        case 172: break;
        case 55: 
          { return ATSTypes.SRPIF;
          }
        case 173: break;
        case 30: 
          { return ATSTypes.GTLT;
          }
        case 174: break;
        case 52: 
          { return ATSTypes.DOTDOTDOT;
          }
        case 175: break;
        case 77: 
          { return ATSTypes.WITH;
          }
        case 176: break;
        case 16: 
          { return ATSTypes.HASH;
          }
        case 177: break;
        case 117: 
          { return ATSTypes.DLREXTYPE;
          }
        case 178: break;
        case 11: 
          { return ATSTypes.LT;
          }
        case 179: break;
        case 62: 
          { return ATSTypes.REC;
          }
        case 180: break;
        case 106: 
          { return ATSTypes.STATIC;
          }
        case 181: break;
        case 133: 
          { return ATSTypes.DLREFFMASK;
          }
        case 182: break;
        case 43: 
          { return ATSTypes.IN;
          }
        case 183: break;
        case 115: 
          { return ATSTypes.MACDEF;
          }
        case 184: break;
        case 60: 
          { return ATSTypes.TRY;
          }
        case 185: break;
        case 51: 
          { return ATSTypes.PERCENTLPAREN;
          }
        case 186: break;
        case 12: 
          { return ATSTypes.DOLLAR;
          }
        case 187: break;
        case 124: 
          { return ATSTypes.STALOAD;
          }
        case 188: break;
        case 95: 
          { return ATSTypes.FREEAT;
          }
        case 189: break;
        case 69: 
          { return ATSTypes.DLRREC;
          }
        case 190: break;
        case 85: 
          { return ATSTypes.SRPELSE;
          }
        case 191: break;
        case 86: 
          { return ATSTypes.SRPELIF;
          }
        case 192: break;
        case 10: 
          { return ATSTypes.COLON;
          }
        case 193: break;
        case 2: 
          { return ATSTypes.COMMENT;
          }
        case 194: break;
        case 96: 
          { return ATSTypes.FOLDAT;
          }
        case 195: break;
        case 1: 
          { return ATSTypes.NONE;
          }
        case 196: break;
        case 53: 
          { return ATSTypes.EQLTGT;
          }
        case 197: break;
        case 137: 
          { return ATSTypes.WITHTYPE;
          }
        case 198: break;
        case 135: 
          { return ATSTypes.SRPINCLUDE;
          }
        case 199: break;
        case 47: 
          { return ATSTypes.COMMALPAREN;
          }
        case 200: break;
        case 9: 
          { return ATSTypes.BQUOTE;
          }
        case 201: break;
        case 32: 
          { return ATSTypes.DOTLT;
          }
        case 202: break;
        case 76: 
          { return ATSTypes.REFAT;
          }
        case 203: break;
        case 112: 
          { return ATSTypes.IMPORT;
          }
        case 204: break;
        case 105: 
          { return ATSTypes.ASSUME;
          }
        case 205: break;
        case 136: 
          { return ATSTypes.OVERLOAD;
          }
        case 206: break;
        case 144: 
          { return ATSTypes.DLRCONTINUE;
          }
        case 207: break;
        case 64: 
          { return ATSTypes.VAL;
          }
        case 208: break;
        case 145: 
          { return ATSTypes.SRPELIFNDEF;
          }
        case 209: break;
        case 81: 
          { return ATSTypes.COMMENT_REST;
          }
        case 210: break;
        case 28: 
          { return ATSTypes.BQUOTELPAREN;
          }
        case 211: break;
        case 25: 
          { return ATSTypes.ATLPAREN;
          }
        case 212: break;
        case 29: 
          { return ATSTypes.COLONLT;
          }
        case 213: break;
        case 91: 
          { return ATSTypes.FIXITY;
          }
        case 214: break;
        case 38: 
          { return ATSTypes.MINUSLT;
          }
        case 215: break;
        case 70: 
          { return ATSTypes.DLRLST;
          }
        case 216: break;
        case 8: 
          { return ATSTypes.BANG;
          }
        case 217: break;
        case 110: 
          { return ATSTypes.EXTERN;
          }
        case 218: break;
        case 140: 
          { return ATSTypes.CLASSDEC;
          }
        case 219: break;
        case 68: 
          { return ATSTypes.DLRTUP;
          }
        case 220: break;
        case 111: 
          { return ATSTypes.EXTVAR;
          }
        case 221: break;
        case 99: 
          { return ATSTypes.DLRDELAY;
          }
        case 222: break;
        case 72: 
          { return ATSTypes.EQSLASHEQGT;
          }
        case 223: break;
        case 5: 
          { throw new Error("Illegal character <"+yytext()+">");
          }
        case 224: break;
        case 66: 
          { return ATSTypes.LET;
          }
        case 225: break;
        case 101: 
          { return ATSTypes.SRPERROR;
          }
        case 226: break;
        case 107: 
          { return ATSTypes.STADEF;
          }
        case 227: break;
        case 90: 
          { return ATSTypes.VIEWAT;
          }
        case 228: break;
        case 83: 
          { return ATSTypes.EQSLASHEQGTGT;
          }
        case 229: break;
        case 120: 
          { return ATSTypes.SRPASSERT;
          }
        case 230: break;
        case 150: 
          { return ATSTypes.DLRMYFILENAME;
          }
        case 231: break;
        case 46: 
          { return ATSTypes.FUN;
          }
        case 232: break;
        case 31: 
          { return ATSTypes.DOTINT;
          }
        case 233: break;
        case 109: 
          { return ATSTypes.EXTYPE;
          }
        case 234: break;
        case 84: 
          { return ATSTypes.SRPTHEN;
          }
        case 235: break;
        case 18: 
          { return ATSTypes.COMMA;
          }
        case 236: break;
        case 122: 
          { return ATSTypes.SRPDEFINE;
          }
        case 237: break;
        case 119: 
          { return ATSTypes.DLREXTVAL;
          }
        case 238: break;
        case 23: 
          { return ATSTypes.RBRACE;
          }
        case 239: break;
        case 114: 
          { return ATSTypes.NONFIX;
          }
        case 240: break;
        case 35: 
          { return ATSTypes.EQGT;
          }
        case 241: break;
        case 75: 
          { return ATSTypes.ELSE;
          }
        case 242: break;
        case 102: 
          { return ATSTypes.SRPENDIF;
          }
        case 243: break;
        case 148: 
          { return ATSTypes.DLRVCOPYENV;
          }
        case 244: break;
        case 45: 
          { return ATSTypes.DO;
          }
        case 245: break;
        case 142: 
          { return ATSTypes.DLREXTMCALL;
          }
        case 246: break;
        case 50: 
          { return ATSTypes.QUOTELBRACE;
          }
        case 247: break;
        case 129: 
          { return ATSTypes.TKINDEF;
          }
        case 248: break;
        case 36: 
          { return ATSTypes.GTDOT;
          }
        case 249: break;
        case 22: 
          { return ATSTypes.LBRACE;
          }
        case 250: break;
        case 13: 
          { return ATSTypes.DOT;
          }
        case 251: break;
        case 17: 
          { return ATSTypes.TILDE;
          }
        case 252: break;
        case 128: 
          { return ATSTypes.TYPEDEF;
          }
        case 253: break;
        case 24: 
          { return ATSTypes.COMMENT_LINE;
          }
        case 254: break;
        case 54: 
          { return ATSTypes.EQGTGT;
          }
        case 255: break;
        case 3: 
          { return ATSTypes.BACKSLASH;
          }
        case 256: break;
        case 61: 
          { return ATSTypes.END;
          }
        case 257: break;
        case 15: 
          { return ATSTypes.GT;
          }
        case 258: break;
        case 19: 
          { return ATSTypes.SEMICOLON;
          }
        case 259: break;
        case 73: 
          { return ATSTypes.TYPE;
          }
        case 260: break;
        case 26: 
          { return ATSTypes.ATLBRACKET;
          }
        case 261: break;
        case 147: 
          { return ATSTypes.IMPLEMENT;
          }
        case 262: break;
        case 100: 
          { return ATSTypes.SRPPRINT;
          }
        case 263: break;
        case 125: 
          { return ATSTypes.SYMELIM;
          }
        case 264: break;
        case 80: 
          { return ATSTypes.FORSTAR;
          }
        case 265: break;
        case 132: 
          { return ATSTypes.DLREXTKIND;
          }
        case 266: break;
        case 56: 
          { return ATSTypes.MINUSLTGT;
          }
        case 267: break;
        case 113: 
          { return ATSTypes.WHILESTAR;
          }
        case 268: break;
        case 149: 
          { return ATSTypes.DLRMYLOCATION;
          }
        case 269: break;
        case 7: 
          { return ATSTypes.AT;
          }
        case 270: break;
        case 42: 
          { return ATSTypes.OF;
          }
        case 271: break;
        case 58: 
          { return ATSTypes.DLREFFMASK_ARG;
          }
        case 272: break;
        case 104: 
          { return ATSTypes.SRPUNDEF;
          }
        case 273: break;
        case 88: 
          { return ATSTypes.BEGIN;
          }
        case 274: break;
        case 138: 
          { return ATSTypes.DATASORT;
          }
        case 275: break;
        case 79: 
          { return ATSTypes.CASE;
          }
        case 276: break;
        case 57: 
          { return ATSTypes.AND;
          }
        case 277: break;
        case 130: 
          { return ATSTypes.REQUIRE;
          }
        case 278: break;
        case 44: 
          { return ATSTypes.IF;
          }
        case 279: break;
        case 151: 
          { return ATSTypes.DLRMYFUNCTION;
          }
        case 280: break;
        case 67: 
          { return ATSTypes.FIX;
          }
        case 281: break;
        case 40: 
          { return ATSTypes.AS;
          }
        case 282: break;
        case 146: 
          { return ATSTypes.EXCEPTION;
          }
        case 283: break;
        case 63: 
          { return ATSTypes.VAR;
          }
        case 284: break;
        case 121: 
          { return ATSTypes.SRPIFNDEF;
          }
        case 285: break;
        case 127: 
          { return ATSTypes.SORTDEF;
          }
        case 286: break;
        case 82: 
          { return ATSTypes.COMMENT_BLOCK;
          }
        case 287: break;
        case 87: 
          { return ATSTypes.ADDRAT;
          }
        case 288: break;
        case 139: 
          { return ATSTypes.DATATYPE;
          }
        case 289: break;
        case 97: 
          { return ATSTypes.DLRBREAK;
          }
        case 290: break;
        case 74: 
          { return ATSTypes.THEN;
          }
        case 291: break;
        case 143: 
          { return ATSTypes.DLREXTFCALL;
          }
        case 292: break;
        case 93: 
          { return ATSTypes.WHILE;
          }
        case 293: break;
        case 6: 
          { return ATSTypes.RPAREN;
          }
        case 294: break;
        case 94: 
          { return ATSTypes.LOCAL;
          }
        case 295: break;
        case 152: 
          { return ATSTypes.DLREXTYPE_STRUCT;
          }
        case 296: break;
        case 33: 
          { return ATSTypes.DOTDOT;
          }
        case 297: break;
        case 103: 
          { return ATSTypes.SRPIFDEF;
          }
        case 298: break;
        case 131: 
          { return ATSTypes.DYNLOAD;
          }
        case 299: break;
        case 41: 
          { return ATSTypes.OP;
          }
        case 300: break;
        case 49: 
          { return ATSTypes.QUOTELBRACKET;
          }
        case 301: break;
        case 14: 
          { return ATSTypes.EQ;
          }
        case 302: break;
        case 39: 
          { return ATSTypes.MINUSGT;
          }
        case 303: break;
        case 21: 
          { return ATSTypes.RBRACKET;
          }
        case 304: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                return ATSTypes.EOF;
              }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
