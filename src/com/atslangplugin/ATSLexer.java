/* The following code was generated by JFlex 1.4.3 on 12/22/14 5:42 PM */

package com.atslangplugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.atslangplugin.ATSTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/22/14 5:42 PM from the specification file
 * <tt>C:/cygwin64/home/brand_000/IntelliJATS/src/com/atslangplugin/ATS.flex</tt>
 */
public class ATSLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int PRAGMA = 6;
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int PRE = 4;
  public static final int DEFINE_CONTINUATION = 10;
  public static final int CONTINUATION = 12;
  public static final int DEFINE = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  2,  2,  2,  2,  2,  2,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\0\1\2\1\0\1\0\1\3\22\0\1\30\1\33\1\14"+
    "\1\42\1\37\1\72\1\0\1\13\1\27\1\31\1\6\1\12\1\64"+
    "\1\43\1\11\1\5\1\10\7\1\2\1\1\35\1\65\1\36\1\40"+
    "\1\41\1\0\1\32\4\0\1\0\1\0\21\0\1\0\2\0\1\66"+
    "\1\7\1\67\1\0\1\4\1\34\1\45\1\46\1\17\1\22\1\23"+
    "\1\24\1\56\1\61\1\15\1\0\1\62\1\20\1\55\1\16\1\26"+
    "\1\52\1\60\1\25\1\47\1\50\1\21\1\53\1\54\1\57\1\51"+
    "\1\63\1\70\1\0\1\71\1\44\53\0\1\0\12\0\1\0\4\0"+
    "\1\0\5\0\27\0\1\0\37\0\1\0\u01ca\0\4\0\14\0\16\0"+
    "\5\0\7\0\1\0\1\0\1\0\201\0\5\0\1\0\2\0\2\0"+
    "\4\0\10\0\1\0\1\0\3\0\1\0\1\0\1\0\24\0\1\0"+
    "\123\0\1\0\213\0\10\0\236\0\11\0\46\0\2\0\1\0\7\0"+
    "\47\0\110\0\33\0\5\0\3\0\55\0\53\0\43\0\2\0\1\0"+
    "\143\0\1\0\1\0\17\0\2\0\7\0\2\0\12\0\3\0\2\0"+
    "\1\0\20\0\1\0\1\0\36\0\35\0\131\0\13\0\1\0\30\0"+
    "\41\0\11\0\2\0\4\0\1\0\5\0\26\0\4\0\1\0\11\0"+
    "\1\0\3\0\1\0\27\0\31\0\107\0\1\0\1\0\13\0\127\0"+
    "\66\0\3\0\1\0\22\0\1\0\7\0\12\0\17\0\7\0\1\0"+
    "\7\0\5\0\10\0\2\0\2\0\2\0\26\0\1\0\7\0\1\0"+
    "\1\0\3\0\4\0\3\0\1\0\20\0\1\0\15\0\2\0\1\0"+
    "\3\0\16\0\2\0\23\0\6\0\4\0\2\0\2\0\26\0\1\0"+
    "\7\0\1\0\2\0\1\0\2\0\1\0\2\0\37\0\4\0\1\0"+
    "\1\0\23\0\3\0\20\0\11\0\1\0\3\0\1\0\26\0\1\0"+
    "\7\0\1\0\2\0\1\0\5\0\3\0\1\0\22\0\1\0\17\0"+
    "\2\0\43\0\10\0\2\0\2\0\2\0\26\0\1\0\7\0\1\0"+
    "\2\0\1\0\5\0\3\0\1\0\36\0\2\0\1\0\3\0\17\0"+
    "\1\0\21\0\1\0\1\0\6\0\3\0\3\0\1\0\4\0\3\0"+
    "\2\0\1\0\1\0\1\0\2\0\3\0\2\0\3\0\3\0\3\0"+
    "\14\0\26\0\1\0\64\0\10\0\1\0\3\0\1\0\27\0\1\0"+
    "\12\0\1\0\5\0\3\0\1\0\32\0\2\0\6\0\2\0\43\0"+
    "\10\0\1\0\3\0\1\0\27\0\1\0\12\0\1\0\5\0\3\0"+
    "\1\0\40\0\1\0\1\0\2\0\17\0\2\0\22\0\10\0\1\0"+
    "\3\0\1\0\51\0\2\0\1\0\20\0\1\0\21\0\2\0\30\0"+
    "\6\0\5\0\22\0\3\0\30\0\1\0\11\0\1\0\1\0\2\0"+
    "\7\0\72\0\60\0\1\0\2\0\14\0\7\0\72\0\2\0\1\0"+
    "\1\0\2\0\2\0\1\0\1\0\2\0\1\0\6\0\4\0\1\0"+
    "\7\0\1\0\3\0\1\0\1\0\1\0\1\0\2\0\2\0\1\0"+
    "\4\0\1\0\2\0\11\0\1\0\2\0\5\0\1\0\1\0\25\0"+
    "\4\0\40\0\1\0\77\0\10\0\1\0\44\0\33\0\5\0\163\0"+
    "\53\0\24\0\1\0\20\0\6\0\4\0\4\0\3\0\1\0\3\0"+
    "\2\0\7\0\3\0\4\0\15\0\14\0\1\0\21\0\46\0\1\0"+
    "\1\0\5\0\1\0\2\0\53\0\1\0\u014d\0\1\0\4\0\2\0"+
    "\7\0\1\0\1\0\1\0\4\0\2\0\51\0\1\0\4\0\2\0"+
    "\41\0\1\0\4\0\2\0\7\0\1\0\1\0\1\0\4\0\2\0"+
    "\17\0\1\0\71\0\1\0\4\0\2\0\103\0\45\0\20\0\20\0"+
    "\125\0\14\0\u026c\0\2\0\21\0\1\0\32\0\5\0\113\0\25\0"+
    "\15\0\1\0\4\0\16\0\22\0\16\0\22\0\16\0\15\0\1\0"+
    "\3\0\17\0\64\0\43\0\1\0\4\0\1\0\103\0\130\0\10\0"+
    "\51\0\1\0\1\0\5\0\106\0\12\0\35\0\63\0\36\0\2\0"+
    "\5\0\13\0\54\0\25\0\7\0\70\0\27\0\11\0\65\0\122\0"+
    "\1\0\135\0\57\0\21\0\7\0\67\0\36\0\15\0\2\0\12\0"+
    "\54\0\32\0\44\0\51\0\3\0\12\0\44\0\153\0\4\0\1\0"+
    "\4\0\3\0\2\0\11\0\300\0\100\0\u0116\0\2\0\6\0\2\0"+
    "\46\0\2\0\6\0\2\0\10\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\37\0\2\0\65\0\1\0\7\0\1\0\1\0\3\0"+
    "\3\0\1\0\7\0\3\0\4\0\2\0\6\0\4\0\15\0\5\0"+
    "\3\0\1\0\7\0\164\0\1\0\15\0\1\0\20\0\15\0\145\0"+
    "\1\0\4\0\1\0\2\0\12\0\1\0\1\0\3\0\5\0\6\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\4\0\1\0\13\0\2\0"+
    "\4\0\5\0\5\0\4\0\1\0\64\0\2\0\u0a7b\0\57\0\1\0"+
    "\57\0\1\0\205\0\6\0\4\0\3\0\2\0\14\0\46\0\1\0"+
    "\1\0\5\0\1\0\2\0\70\0\7\0\1\0\20\0\27\0\11\0"+
    "\7\0\1\0\7\0\1\0\7\0\1\0\7\0\1\0\7\0\1\0"+
    "\7\0\1\0\7\0\1\0\7\0\120\0\1\0\u01d5\0\2\0\52\0"+
    "\5\0\5\0\2\0\4\0\126\0\6\0\3\0\1\0\132\0\1\0"+
    "\4\0\5\0\51\0\3\0\136\0\21\0\33\0\65\0\20\0\u0200\0"+
    "\u19b6\0\112\0\u51cd\0\63\0\u048d\0\103\0\56\0\2\0\u010d\0\3\0"+
    "\20\0\12\0\2\0\24\0\57\0\20\0\31\0\10\0\106\0\61\0"+
    "\11\0\2\0\147\0\2\0\4\0\1\0\4\0\14\0\13\0\115\0"+
    "\12\0\1\0\3\0\1\0\4\0\1\0\27\0\35\0\64\0\16\0"+
    "\62\0\76\0\6\0\3\0\1\0\16\0\34\0\12\0\27\0\31\0"+
    "\35\0\7\0\57\0\34\0\1\0\60\0\51\0\27\0\3\0\1\0"+
    "\10\0\24\0\27\0\3\0\1\0\5\0\60\0\1\0\1\0\3\0"+
    "\2\0\2\0\5\0\2\0\1\0\1\0\1\0\30\0\3\0\2\0"+
    "\13\0\7\0\3\0\14\0\6\0\2\0\6\0\2\0\6\0\11\0"+
    "\7\0\1\0\7\0\221\0\43\0\35\0\u2ba4\0\14\0\27\0\4\0"+
    "\61\0\u2104\0\u016e\0\2\0\152\0\46\0\7\0\14\0\5\0\5\0"+
    "\1\0\1\0\12\0\1\0\15\0\1\0\5\0\1\0\1\0\1\0"+
    "\2\0\1\0\2\0\1\0\154\0\41\0\u016b\0\22\0\100\0\2\0"+
    "\66\0\50\0\14\0\164\0\5\0\1\0\207\0\44\0\32\0\6\0"+
    "\32\0\13\0\131\0\3\0\6\0\2\0\6\0\2\0\6\0\2\0"+
    "\3\0\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\2\0\2\2\1\3\1\4\1\5\12\2\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\2\1\21\10\2\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\2\1\30\1\3\1\31\1\32"+
    "\1\33\1\0\2\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\11\0\1\44\6\0\1\45\4\0\1\46"+
    "\1\47\2\0\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\14\0\1\56\1\57\1\60\7\0\1\61\1\62\1\63"+
    "\4\0\1\64\22\0\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\3\33\1\73\4\0\1\74\3\0\1\75\1\0"+
    "\1\76\2\0\1\77\3\0\1\100\1\45\3\0\1\101"+
    "\1\74\23\0\1\102\1\103\1\0\1\104\10\0\1\105"+
    "\1\106\4\0\1\107\4\0\1\110\14\0\1\111\1\112"+
    "\4\0\1\33\1\113\5\0\1\114\1\0\1\76\3\0"+
    "\1\115\4\0\1\100\2\0\1\116\1\117\6\0\1\120"+
    "\3\0\1\121\4\0\1\122\3\0\1\123\32\0\1\124"+
    "\1\125\10\0\1\111\1\126\1\0\1\127\3\0\1\33"+
    "\1\130\4\0\1\114\1\131\11\0\1\132\1\133\2\0"+
    "\1\134\32\0\1\135\6\0\1\136\1\137\2\0\1\140"+
    "\1\0\1\141\5\0\1\142\1\143\7\0\1\124\5\0"+
    "\1\144\4\0\1\145\1\146\2\0\1\147\1\130\1\0"+
    "\1\150\1\151\7\0\1\152\1\153\1\154\5\0\1\120"+
    "\1\0\1\155\7\0\1\121\2\0\1\156\2\0\1\157"+
    "\1\0\1\122\1\0\1\122\6\0\1\160\1\161\1\0"+
    "\1\162\2\0\1\163\1\0\1\164\3\0\1\165\1\0"+
    "\1\166\1\0\1\167\1\170\10\0\1\171\1\172\6\0"+
    "\1\173\1\0\1\174\4\0\1\175\1\0\1\176\1\177"+
    "\2\0\1\121\1\200\7\0\1\201\1\202\2\0\1\203"+
    "\2\204\1\205\1\206\1\207\1\210\1\211\1\212\5\0"+
    "\1\213\1\214\2\215\1\0\1\216\1\0\1\217\3\0"+
    "\1\220\6\0\1\221\1\0\1\222\1\0\2\223\1\224"+
    "\1\225\1\226\1\227\1\0\1\230\1\0\1\231\4\0"+
    "\1\232\7\0\1\233\1\234\1\235\1\236\4\0\1\237"+
    "\2\0\1\233";

  private static int [] zzUnpackAction() {
    int [] result = new int[589];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\261\0\u0162"+
    "\0\u019d\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff\0\u033a"+
    "\0\u0375\0\u03b0\0\u03eb\0\261\0\u0426\0\261\0\u0461\0\u049c"+
    "\0\u04d7\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe\0\261\0\u0639"+
    "\0\u0674\0\u06af\0\u06ea\0\u0725\0\u0760\0\u079b\0\u07d6\0\u0811"+
    "\0\261\0\261\0\261\0\261\0\261\0\u084c\0\u0887\0\261"+
    "\0\u08c2\0\261\0\u08fd\0\u0127\0\u0938\0\261\0\u0973\0\u09ae"+
    "\0\261\0\261\0\261\0\u09e9\0\261\0\u0a24\0\u0a5f\0\u0a9a"+
    "\0\u0ad5\0\u0b10\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc\0\261\0\u0c37"+
    "\0\u0c72\0\u0cad\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f"+
    "\0\u0e4a\0\u0e85\0\261\0\261\0\u0ec0\0\u0efb\0\261\0\261"+
    "\0\261\0\261\0\261\0\261\0\u0f36\0\u0f71\0\u0fac\0\u0fe7"+
    "\0\u1022\0\u105d\0\u1098\0\u10d3\0\u110e\0\u1149\0\u1184\0\u11bf"+
    "\0\u11fa\0\u1235\0\261\0\u1270\0\u12ab\0\u12e6\0\u1321\0\u135c"+
    "\0\u1397\0\u13d2\0\261\0\u140d\0\261\0\u1448\0\u1483\0\u14be"+
    "\0\u14f9\0\u1534\0\u156f\0\u15aa\0\u15e5\0\u1620\0\u165b\0\u1696"+
    "\0\u16d1\0\u170c\0\u1747\0\u1782\0\u17bd\0\u17f8\0\u1833\0\u186e"+
    "\0\u18a9\0\u18e4\0\u191f\0\u195a\0\261\0\261\0\261\0\261"+
    "\0\261\0\261\0\u1995\0\261\0\u19d0\0\261\0\u1a0b\0\u1a46"+
    "\0\u1a81\0\u1abc\0\261\0\u1af7\0\u1b32\0\u1b6d\0\261\0\u1ba8"+
    "\0\u1be3\0\u1c1e\0\u1c59\0\261\0\u1c94\0\u1ccf\0\u1d0a\0\u1d45"+
    "\0\261\0\u1d80\0\u1dbb\0\u1df6\0\261\0\u1e31\0\u1e6c\0\u1ea7"+
    "\0\u1ee2\0\u1f1d\0\u1f58\0\u1f93\0\u1fce\0\u2009\0\u2044\0\u207f"+
    "\0\u20ba\0\u20f5\0\u2130\0\u216b\0\u21a6\0\u21e1\0\u221c\0\u2257"+
    "\0\u2292\0\261\0\261\0\u22cd\0\u2308\0\u2343\0\u237e\0\u23b9"+
    "\0\u23f4\0\u242f\0\u246a\0\u24a5\0\u24e0\0\261\0\261\0\u251b"+
    "\0\u2556\0\u2591\0\u25cc\0\261\0\u2607\0\u2642\0\u267d\0\u26b8"+
    "\0\261\0\u26f3\0\u272e\0\u2769\0\u27a4\0\u27df\0\u281a\0\u2855"+
    "\0\u2890\0\u28cb\0\u2906\0\u2941\0\u297c\0\u29b7\0\261\0\u29f2"+
    "\0\u2a2d\0\u2a68\0\u2aa3\0\u2ade\0\261\0\u2b19\0\u2b54\0\u2b8f"+
    "\0\u2bca\0\u2c05\0\u2c40\0\u2c7b\0\261\0\u2cb6\0\u2cf1\0\u2d2c"+
    "\0\261\0\u2d67\0\u2da2\0\u2ddd\0\u2e18\0\261\0\u2e53\0\u2e8e"+
    "\0\261\0\261\0\u2ec9\0\u2f04\0\u2f3f\0\u2f7a\0\u2fb5\0\u2ff0"+
    "\0\u302b\0\u3066\0\u30a1\0\u30dc\0\u3117\0\u3152\0\u318d\0\u31c8"+
    "\0\u3203\0\u323e\0\u3279\0\u32b4\0\u32ef\0\u332a\0\u3365\0\u33a0"+
    "\0\u33db\0\u3416\0\u3451\0\u348c\0\u34c7\0\u3502\0\u353d\0\u3578"+
    "\0\u35b3\0\u35ee\0\u3629\0\u3664\0\u369f\0\u36da\0\u3715\0\u3750"+
    "\0\u378b\0\u37c6\0\u3801\0\u383c\0\u3877\0\u38b2\0\u38ed\0\u3928"+
    "\0\u3963\0\261\0\u399e\0\u39d9\0\u3a14\0\u3a4f\0\u3a8a\0\u3ac5"+
    "\0\u3b00\0\u3b3b\0\261\0\u3b76\0\u3bb1\0\261\0\u3bec\0\u3c27"+
    "\0\u3c62\0\u3c9d\0\u3cd8\0\u3d13\0\u3d4e\0\u3d89\0\u3dc4\0\261"+
    "\0\261\0\u3dff\0\u3e3a\0\u3e75\0\u3eb0\0\u3eeb\0\u3f26\0\u3f61"+
    "\0\u3f9c\0\u3fd7\0\261\0\261\0\u4012\0\u404d\0\261\0\u4088"+
    "\0\u40c3\0\u40fe\0\u4139\0\u4174\0\u41af\0\u41ea\0\u4225\0\u4260"+
    "\0\u429b\0\u42d6\0\u4311\0\u434c\0\u4387\0\u43c2\0\u43fd\0\u4438"+
    "\0\u4473\0\u44ae\0\u44e9\0\u4524\0\u455f\0\u459a\0\u45d5\0\u4610"+
    "\0\u464b\0\261\0\u4686\0\u46c1\0\u46fc\0\u4737\0\u4772\0\u47ad"+
    "\0\u47e8\0\261\0\u4823\0\u485e\0\261\0\u4899\0\261\0\u48d4"+
    "\0\u490f\0\u494a\0\u4985\0\u49c0\0\261\0\261\0\u49fb\0\u4a36"+
    "\0\u4a71\0\u4aac\0\u4ae7\0\u4b22\0\u4b5d\0\261\0\u4b98\0\u4bd3"+
    "\0\u4c0e\0\u4c49\0\u4c84\0\261\0\u4cbf\0\u4cfa\0\u4d35\0\u4d70"+
    "\0\u4dab\0\261\0\u4de6\0\u4e21\0\u3c9d\0\261\0\u4e5c\0\261"+
    "\0\261\0\u4e97\0\u4ed2\0\u4f0d\0\u4f48\0\u4f83\0\u4fbe\0\u4ff9"+
    "\0\261\0\261\0\261\0\u5034\0\u506f\0\u50aa\0\u50e5\0\u5120"+
    "\0\261\0\u515b\0\261\0\u5196\0\u51d1\0\u520c\0\u5247\0\u5282"+
    "\0\u52bd\0\u52f8\0\261\0\u5333\0\u536e\0\261\0\u53a9\0\u53e4"+
    "\0\261\0\u541f\0\261\0\u545a\0\u5495\0\u54d0\0\u550b\0\u5546"+
    "\0\u5581\0\u55bc\0\u55f7\0\261\0\261\0\u5632\0\261\0\u566d"+
    "\0\u56a8\0\261\0\u56e3\0\261\0\u571e\0\u5759\0\u5794\0\261"+
    "\0\u57cf\0\261\0\u580a\0\261\0\261\0\u5845\0\u5880\0\u58bb"+
    "\0\u58f6\0\u5931\0\u596c\0\u59a7\0\u59e2\0\261\0\261\0\u5a1d"+
    "\0\u5a58\0\u5a93\0\u5ace\0\u5b09\0\u5b44\0\261\0\u5b7f\0\261"+
    "\0\u5bba\0\u5bf5\0\u5c30\0\u5c6b\0\261\0\u5ca6\0\u5ce1\0\261"+
    "\0\u5d1c\0\u5d57\0\u5d92\0\261\0\u5dcd\0\u5e08\0\u5e43\0\u5e7e"+
    "\0\u5eb9\0\u5ef4\0\u5f2f\0\261\0\261\0\u5f6a\0\u5fa5\0\261"+
    "\0\261\0\u5fe0\0\261\0\261\0\261\0\261\0\261\0\261"+
    "\0\u601b\0\u6056\0\u6091\0\u60cc\0\u6107\0\261\0\261\0\261"+
    "\0\u6142\0\u617d\0\261\0\u61b8\0\261\0\u61f3\0\u622e\0\u6269"+
    "\0\261\0\u62a4\0\u62df\0\u631a\0\u6355\0\u6390\0\u63cb\0\261"+
    "\0\u6406\0\261\0\u6441\0\261\0\u647c\0\261\0\261\0\261"+
    "\0\261\0\u64b7\0\261\0\u64f2\0\261\0\u652d\0\u6568\0\u65a3"+
    "\0\u65de\0\261\0\u6619\0\u6654\0\u668f\0\u66ca\0\u6705\0\u6740"+
    "\0\u677b\0\u67b6\0\261\0\261\0\261\0\u67f1\0\u682c\0\u6867"+
    "\0\u68a2\0\261\0\u68dd\0\u6918\0\261";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[589];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\5\4\1\5\1\6\1\7\1\4\1\10\1\4\1\11"+
    "\1\4\1\12\1\13\1\14\1\15\1\4\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\4\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\4\1\44\1\45"+
    "\1\46\1\47\6\4\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\2\57\2\60\3\57\1\61\4\57\1\62"+
    "\56\57\73\60\100\0\1\63\65\0\6\4\1\64\22\4"+
    "\1\0\41\4\1\0\1\65\6\0\1\66\1\67\24\0"+
    "\1\70\63\0\1\71\36\0\1\72\1\0\1\73\20\0"+
    "\1\74\5\0\1\75\30\0\1\76\43\0\1\77\21\0"+
    "\1\100\42\0\1\101\24\0\1\102\45\0\1\103\2\0"+
    "\1\104\2\0\1\105\16\0\1\106\53\0\1\107\16\0"+
    "\1\110\3\0\1\111\37\0\1\112\1\0\1\113\36\0"+
    "\1\114\30\0\1\115\1\116\2\0\1\117\3\0\1\120"+
    "\1\121\67\0\1\122\73\0\1\123\25\0\1\124\1\125"+
    "\25\0\1\126\113\0\1\127\36\0\1\130\1\0\1\131"+
    "\31\0\1\132\101\0\1\133\75\0\1\134\50\0\1\135"+
    "\1\136\1\0\1\137\1\140\1\0\1\141\17\0\1\142"+
    "\1\143\1\144\1\145\2\0\1\146\1\0\1\147\22\0"+
    "\1\150\30\0\1\151\2\0\1\152\42\0\1\153\76\0"+
    "\1\154\3\0\1\155\1\156\1\157\21\0\1\160\2\0"+
    "\1\161\1\0\1\162\13\0\1\163\42\0\1\164\2\0"+
    "\1\165\47\0\1\166\1\0\1\167\1\0\1\170\23\0"+
    "\1\171\1\172\46\0\1\173\64\0\1\174\1\0\1\175"+
    "\6\0\1\176\21\0\1\177\1\200\46\0\1\201\23\0"+
    "\1\202\7\0\1\203\1\204\35\0\1\205\1\206\61\0"+
    "\1\207\27\0\1\210\42\0\1\211\7\0\1\212\33\0"+
    "\1\213\56\0\1\214\54\0\1\215\72\0\1\216\43\0"+
    "\2\57\2\0\3\57\1\0\4\57\1\0\56\57\14\0"+
    "\1\217\1\0\1\220\6\0\1\221\22\0\1\222\22\0"+
    "\2\223\1\224\2\223\1\225\65\223\1\0\1\65\6\0"+
    "\1\65\73\0\1\226\122\0\1\227\55\0\1\230\120\0"+
    "\1\231\36\0\1\232\131\0\1\233\62\0\1\234\74\0"+
    "\1\235\70\0\1\236\75\0\1\237\41\0\1\240\130\0"+
    "\1\241\65\0\1\242\40\0\1\243\76\0\1\244\117\0"+
    "\1\245\41\0\1\233\1\246\30\0\1\247\101\0\1\250"+
    "\72\0\1\251\31\0\1\251\77\0\1\252\67\0\1\253"+
    "\4\0\1\254\64\0\1\255\4\0\1\256\33\0\1\257"+
    "\35\0\1\260\47\0\6\261\1\262\64\261\26\0\1\263"+
    "\61\0\1\264\4\0\1\137\24\0\1\265\46\0\1\266"+
    "\73\0\1\267\32\0\1\270\36\0\1\271\21\0\1\272"+
    "\52\0\1\273\72\0\1\274\126\0\1\275\32\0\1\276"+
    "\70\0\1\277\124\0\1\300\61\0\1\301\73\0\1\302"+
    "\72\0\1\303\47\0\1\304\5\0\1\305\64\0\1\306"+
    "\77\0\1\307\65\0\1\310\1\0\1\311\4\0\1\312"+
    "\114\0\1\313\104\0\1\314\36\0\1\315\106\0\1\316"+
    "\53\0\1\317\70\0\1\233\74\0\1\320\117\0\1\321"+
    "\72\0\1\322\101\0\1\323\40\0\1\324\113\0\1\325"+
    "\52\0\1\326\112\0\1\327\102\0\1\330\66\0\1\331"+
    "\73\0\1\332\43\0\1\333\64\0\1\334\72\0\1\335"+
    "\1\0\1\336\3\0\1\337\1\340\1\0\1\341\16\0"+
    "\1\342\5\0\1\343\66\0\1\344\46\0\1\345\67\0"+
    "\1\346\4\0\1\347\115\0\1\350\72\0\1\233\37\0"+
    "\1\351\5\0\1\352\66\0\1\353\53\0\2\223\1\224"+
    "\72\223\1\224\2\223\1\354\65\223\11\0\1\355\76\0"+
    "\1\356\75\0\1\357\5\0\1\360\70\0\1\361\115\0"+
    "\1\362\46\0\1\363\24\0\1\364\77\0\1\365\62\0"+
    "\1\366\57\0\1\365\105\0\1\367\45\0\1\370\75\0"+
    "\1\371\72\0\1\372\72\0\1\373\25\0\1\374\1\0"+
    "\1\375\51\0\1\376\63\0\1\377\71\0\1\u0100\56\0"+
    "\1\u0101\116\0\1\u0102\61\0\1\u0103\76\0\1\u0104\45\0"+
    "\6\261\1\u0105\64\261\6\u0106\1\262\21\u0106\1\u0107\1\0"+
    "\41\u0106\16\0\1\u0108\123\0\1\265\73\0\1\u0109\42\0"+
    "\1\u010a\76\0\1\u010b\116\0\1\u010c\41\0\1\u010d\70\0"+
    "\1\u010e\102\0\1\u010f\70\0\1\u0110\75\0\1\u0111\116\0"+
    "\1\u0112\46\0\1\u0113\64\0\1\u0114\3\0\1\u0115\107\0"+
    "\1\u0116\50\0\1\u0117\71\0\1\u0118\3\0\1\u0119\72\0"+
    "\1\u011a\74\0\1\u011b\70\0\1\u011c\65\0\1\u011d\31\0"+
    "\1\u011e\50\0\1\u011f\114\0\1\u0120\46\0\1\u0121\64\0"+
    "\1\u0122\102\0\1\u0123\115\0\1\u0124\1\0\1\u0125\1\u0126"+
    "\40\0\1\u0127\66\0\1\u0128\124\0\1\u0129\73\0\1\u012a"+
    "\41\0\1\u012b\1\u012c\1\0\1\u012d\25\0\1\u012e\37\0"+
    "\1\u012f\5\0\1\u0130\72\0\1\u0131\65\0\1\u0132\72\0"+
    "\1\u0133\131\0\1\u0134\62\0\1\u0135\51\0\1\u0136\64\0"+
    "\1\251\2\0\1\117\123\0\1\u0137\77\0\1\u0138\60\0"+
    "\1\u0139\75\0\1\337\76\0\1\u013a\30\0\1\u013b\30\0"+
    "\1\u013b\110\0\1\u013c\31\0\1\u013d\70\0\1\u013e\6\0"+
    "\1\u013f\67\0\1\u0140\2\0\1\u0141\45\0\2\354\1\u0142"+
    "\70\354\57\0\1\u0143\36\0\1\u0144\74\0\1\u0145\62\0"+
    "\1\u0146\124\0\1\u0147\35\0\1\u0148\30\0\1\u0148\53\0"+
    "\1\117\66\0\1\u0149\121\0\1\u014a\1\u014b\1\0\1\u014c"+
    "\1\u014d\45\0\1\u014e\116\0\1\u014f\45\0\1\u0150\117\0"+
    "\1\u0151\65\0\1\u0152\57\0\1\u0153\72\0\1\u0154\55\0"+
    "\1\u0155\75\0\1\u0156\52\0\6\261\1\u0105\22\261\1\u0157"+
    "\41\261\6\0\1\u0158\64\0\2\u0106\1\u0159\1\u015a\2\u0106"+
    "\1\u015b\21\u0106\1\u0107\42\u0106\50\0\1\u015c\26\0\1\u015d"+
    "\133\0\1\u015e\102\0\1\u015f\40\0\1\u0160\1\u0161\24\0"+
    "\1\u0162\1\0\1\u0163\1\0\1\u0164\4\0\1\u0165\14\0"+
    "\1\u0166\21\0\1\u0167\113\0\1\u0168\75\0\1\u0169\65\0"+
    "\1\u016a\101\0\1\u016b\22\0\1\u016c\13\0\1\u016d\124\0"+
    "\1\u016e\46\0\1\u016f\61\0\1\u0170\3\0\1\u0171\112\0"+
    "\1\u0172\51\0\1\u0173\74\0\1\u0174\73\0\1\u0175\72\0"+
    "\1\u0176\64\0\1\u0177\72\0\1\u0178\101\0\1\u0179\71\0"+
    "\1\u017a\75\0\1\u017b\67\0\1\u017c\65\0\1\u017d\72\0"+
    "\1\u017e\106\0\1\u017f\50\0\1\u0180\40\0\1\u0181\46\0"+
    "\1\u0182\62\0\1\u0183\32\0\1\u0124\77\0\1\u0184\33\0"+
    "\1\u0185\77\0\1\u0186\71\0\1\u0187\117\0\1\u0188\51\0"+
    "\1\u0189\67\0\1\u018a\64\0\1\u018b\73\0\1\u018c\74\0"+
    "\1\u018d\64\0\1\u018e\7\0\1\u018f\20\0\1\u018e\51\0"+
    "\1\u0190\122\0\1\u0191\67\0\1\u0192\40\0\1\u0193\77\0"+
    "\1\u018f\65\0\1\251\75\0\1\u013b\4\0\1\347\67\0"+
    "\1\u018f\7\0\1\u0194\15\0\1\u0195\72\0\1\u0196\1\0"+
    "\1\u0197\1\u0198\42\0\1\u0199\72\0\1\u019a\72\0\1\u019b"+
    "\75\0\1\u019c\44\0\73\u019d\20\0\1\u019e\4\0\1\u019e"+
    "\122\0\1\u019f\65\0\1\u01a0\101\0\1\u01a1\35\0\1\u01a2"+
    "\76\0\1\u01a3\115\0\1\u01a4\46\0\1\u01a5\62\0\1\u01a6"+
    "\32\0\1\u014b\67\0\1\u01a7\75\0\1\u01a8\40\0\1\u01a9"+
    "\77\0\1\u01aa\74\0\1\u01ab\72\0\1\u01ac\73\0\1\u01ad"+
    "\52\0\1\u01ae\21\0\1\u01af\1\4\41\0\6\u0106\1\u015b"+
    "\66\u0106\1\u0159\3\u0106\1\u015b\72\u0106\1\262\21\u0106\1\u0107"+
    "\1\4\41\u0106\15\0\1\u01b0\125\0\1\u01b1\2\0\1\u01b2"+
    "\70\0\1\u01b3\66\0\1\u01b4\52\0\1\u01b5\64\0\1\u01b6"+
    "\125\0\1\u01b7\65\0\1\u01b8\44\0\1\u01b9\70\0\1\u01ba"+
    "\125\0\1\u01bb\2\0\1\u01bc\44\0\1\u01bd\70\0\1\u01be"+
    "\116\0\1\u01bf\1\u01c0\104\0\1\u01c1\60\0\1\u01c2\72\0"+
    "\1\u01c3\2\0\1\u01c4\42\0\1\u01c5\120\0\1\u01c6\40\0"+
    "\1\u01c7\73\0\1\u01c8\70\0\1\u01c9\75\0\1\u01ca\74\0"+
    "\1\u01cb\73\0\1\u01cc\72\0\1\u01cd\64\0\1\u01ce\100\0"+
    "\1\u01cf\64\0\1\u01d0\3\0\1\u01d1\75\0\1\u01d2\72\0"+
    "\1\u01d3\115\0\1\u01d4\73\0\1\u0181\73\0\1\u01d5\46\0"+
    "\1\u01d6\67\0\1\u01d7\72\0\1\u01d8\72\0\1\u01d9\117\0"+
    "\1\u01da\67\0\1\u01db\51\0\1\u01dc\65\0\1\u01dd\123\0"+
    "\1\u01de\37\0\1\u01df\100\0\1\u01e0\72\0\1\u01e1\67\0"+
    "\1\357\75\0\1\u0148\126\0\1\u019e\64\0\1\u01e2\72\0"+
    "\1\u01e3\46\0\1\u01e4\62\0\1\u01e5\63\0\1\u01e6\110\0"+
    "\1\u01e7\70\0\1\u0140\73\0\1\u01e8\72\0\1\u01e9\74\0"+
    "\1\u01ea\117\0\1\u01eb\46\0\1\u01ec\67\0\1\u01ed\71\0"+
    "\1\u01ee\65\0\1\u01ef\100\0\1\u01f0\114\0\1\u01f1\33\0"+
    "\1\u01ae\21\0\1\u01af\44\0\1\u0106\1\u01f2\2\0\1\u0158"+
    "\21\0\1\u01af\60\0\1\u01f3\124\0\1\u01b1\71\0\1\u01f4"+
    "\41\0\1\u01f5\121\0\1\u01f6\50\0\1\u01f7\67\0\1\u01f8"+
    "\117\0\1\u01f9\43\0\1\u01fa\124\0\1\u01bb\44\0\1\u01fb"+
    "\133\0\1\u01fc\34\0\1\u01fd\116\0\1\u01fe\71\0\1\u01c3"+
    "\26\0\1\u016c\111\0\1\u01ff\114\0\1\u0200\50\0\1\u0201"+
    "\66\0\1\u0202\75\0\1\u0203\74\0\1\u0204\71\0\1\u0205"+
    "\71\0\1\u0206\73\0\1\u0207\117\0\1\u0208\45\0\1\u0209"+
    "\121\0\1\u0209\74\0\1\u020a\42\0\1\u020b\70\0\1\u020c"+
    "\75\0\1\u020d\122\0\1\u020e\41\0\1\u020f\72\0\1\u0210"+
    "\120\0\1\u0211\72\0\1\u0212\46\0\1\u0213\67\0\1\u0214"+
    "\65\0\1\u0215\73\0\1\u0216\123\0\1\u0217\45\0\1\u0218"+
    "\121\0\1\u0218\74\0\1\u0219\44\0\1\u021a\66\0\1\u021b"+
    "\52\0\1\u0106\3\0\1\u0158\105\0\1\u021c\133\0\1\u021d"+
    "\30\0\1\u021e\56\0\1\u021f\106\0\1\u0220\74\0\1\u0221"+
    "\54\0\1\u0166\135\0\1\u0222\75\0\1\u0223\36\0\1\u0224"+
    "\124\0\1\u0225\40\0\1\u0226\124\0\1\u0227\45\0\1\u0228"+
    "\72\0\1\u0229\73\0\1\u022a\116\0\1\u022b\45\0\1\u0137"+
    "\72\0\1\u022c\121\0\1\u022c\74\0\1\u022d\66\0\1\u022e"+
    "\72\0\1\u014b\40\0\1\u022f\77\0\1\u0230\67\0\1\u0231"+
    "\121\0\1\u0232\43\0\1\u0233\67\0\1\u0234\100\0\1\u0235"+
    "\122\0\1\u0236\34\0\1\u0237\122\0\1\u0238\42\0\1\u0239"+
    "\101\0\1\u023a\56\0\1\u0180\21\0\1\u0180\16\0\1\u0181"+
    "\71\0\1\u0196\72\0\1\u023b\105\0\1\u023c\13\0\1\u023d"+
    "\114\0\1\u023e\121\0\1\u023f\43\0\1\u0240\71\0\1\u0241"+
    "\70\0\1\u01fc\122\0\1\u0242\35\0\1\u0243\77\0\1\u0244"+
    "\65\0\1\u0245\75\0\1\u0246\121\0\1\u0247\41\0\1\u0248"+
    "\102\0\1\u0249\113\0\1\u024a\75\0\1\u024b\67\0\1\u024c"+
    "\53\0\1\u024d\41\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[26963];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\2\0\1\11\2\1\1\11\14\1\1\11\1\1"+
    "\1\11\10\1\1\11\11\1\5\11\2\1\1\11\1\1"+
    "\1\11\1\1\1\0\1\1\1\11\2\1\3\11\1\1"+
    "\1\11\11\0\1\11\6\0\1\1\4\0\2\11\2\0"+
    "\6\11\14\0\2\1\1\11\7\0\1\11\1\1\1\11"+
    "\4\0\1\1\22\0\6\11\1\1\1\11\1\1\1\11"+
    "\4\0\1\11\3\0\1\11\1\0\1\1\2\0\1\11"+
    "\3\0\1\1\1\11\3\0\1\11\1\1\23\0\2\11"+
    "\1\0\1\1\10\0\2\11\4\0\1\11\4\0\1\11"+
    "\14\0\1\1\1\11\4\0\1\1\1\11\5\0\1\1"+
    "\1\0\1\11\3\0\1\11\4\0\1\11\2\0\2\11"+
    "\6\0\1\1\3\0\1\1\4\0\1\1\3\0\1\1"+
    "\32\0\1\1\1\11\10\0\1\11\1\1\1\0\1\11"+
    "\3\0\2\1\4\0\2\11\11\0\2\11\2\0\1\11"+
    "\32\0\1\11\6\0\1\1\1\11\2\0\1\11\1\0"+
    "\1\11\5\0\2\11\7\0\1\11\5\0\1\11\4\0"+
    "\1\1\1\11\2\0\1\1\1\11\1\0\2\11\7\0"+
    "\3\11\5\0\1\11\1\0\1\11\7\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\0\1\11\1\0\1\1\6\0"+
    "\2\11\1\0\1\11\2\0\1\11\1\0\1\11\3\0"+
    "\1\11\1\0\1\11\1\0\2\11\10\0\2\11\6\0"+
    "\1\11\1\0\1\11\4\0\1\11\1\0\1\1\1\11"+
    "\2\0\1\1\1\11\7\0\2\11\2\0\2\11\1\1"+
    "\6\11\5\0\3\11\1\1\1\0\1\11\1\0\1\11"+
    "\3\0\1\11\6\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\1\4\11\1\0\1\11\1\0\1\11\4\0\1\11"+
    "\7\0\1\1\3\11\4\0\1\11\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[589];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  // Not sure if needed:
  StringBuffer string = new StringBuffer();

  // Placeholders for line and column information:
  private int yyline;
  private int yycolumn;


  public ATSLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ATSLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1624) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch ((zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL] : zzBufferL.charAt(zzCurrentPosL))) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = (zzBufferArrayL != null ? zzBufferArrayL[zzMarkedPosL] : zzBufferL.charAt(zzMarkedPosL)) == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = (zzBufferArrayL != null ? zzBufferArrayL[zzMarkedPosL] : zzBufferL.charAt(zzMarkedPosL)) == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 31: 
          { return ATSTypes.QUOTELPAREN;
          }
        case 160: break;
        case 102: 
          { return ATSTypes.WHERE;
          }
        case 161: break;
        case 128: 
          { return ATSTypes.DLRARRPSZ;
          }
        case 162: break;
        case 6: 
          { return ATSTypes.LPAREN;
          }
        case 163: break;
        case 118: 
          { return ATSTypes.STACST;
          }
        case 164: break;
        case 20: 
          { return ATSTypes.LBRACKET;
          }
        case 165: break;
        case 110: 
          { return ATSTypes.DLRRAISE;
          }
        case 166: break;
        case 153: 
          { return ATSTypes.DLRSHOWTYPE;
          }
        case 167: break;
        case 42: 
          { return ATSTypes.ATLBRACE;
          }
        case 168: break;
        case 135: 
          { return ATSTypes.SYMINTR;
          }
        case 169: break;
        case 46: 
          { return ATSTypes.EQLT;
          }
        case 170: break;
        case 49: 
          { return ATSTypes.HASHLBRACKETOLON;
          }
        case 171: break;
        case 132: 
          { return ATSTypes.ABSTYPE;
          }
        case 172: break;
        case 125: 
          { return ATSTypes.DLREXTERN;
          }
        case 173: break;
        case 24: 
          { string.append( yytext() );
          }
        case 174: break;
        case 57: 
          { string.append('\r');
          }
        case 175: break;
        case 87: 
          { return ATSTypes.WHEN;
          }
        case 176: break;
        case 146: 
          { return ATSTypes.SRPELIFDEF;
          }
        case 177: break;
        case 99: 
          { return ATSTypes.SCASE;
          }
        case 178: break;
        case 62: 
          { return ATSTypes.LAM;
          }
        case 179: break;
        case 71: 
          { return ATSTypes.SIF;
          }
        case 180: break;
        case 75: 
          { return ATSTypes.DOTLTGTDOT;
          }
        case 181: break;
        case 68: 
          { return ATSTypes.SRPIF;
          }
        case 182: break;
        case 45: 
          { return ATSTypes.GTLT;
          }
        case 183: break;
        case 59: 
          { return ATSTypes.DOTDOTDOT;
          }
        case 184: break;
        case 86: 
          { return ATSTypes.WITH;
          }
        case 185: break;
        case 16: 
          { return ATSTypes.HASH;
          }
        case 186: break;
        case 126: 
          { return ATSTypes.DLREXTYPE;
          }
        case 187: break;
        case 12: 
          { return ATSTypes.LT;
          }
        case 188: break;
        case 65: 
          { return ATSTypes.REC;
          }
        case 189: break;
        case 120: 
          { return ATSTypes.STATIC;
          }
        case 190: break;
        case 143: 
          { return ATSTypes.DLREFFMASK;
          }
        case 191: break;
        case 34: 
          { return ATSTypes.IN;
          }
        case 192: break;
        case 56: 
          { string.append('\n');
          }
        case 193: break;
        case 122: 
          { return ATSTypes.MACDEF;
          }
        case 194: break;
        case 72: 
          { return ATSTypes.TRY;
          }
        case 195: break;
        case 54: 
          { return ATSTypes.PERCENTLPAREN;
          }
        case 196: break;
        case 13: 
          { return ATSTypes.DOLLAR;
          }
        case 197: break;
        case 134: 
          { return ATSTypes.STALOAD;
          }
        case 198: break;
        case 90: 
          { return ATSTypes.FREEAT;
          }
        case 199: break;
        case 81: 
          { return ATSTypes.DLRREC;
          }
        case 200: break;
        case 95: 
          { return ATSTypes.SRPELSE;
          }
        case 201: break;
        case 94: 
          { return ATSTypes.SRPELIF;
          }
        case 202: break;
        case 11: 
          { return ATSTypes.COLON;
          }
        case 203: break;
        case 2: 
          { return ATSTypes.COMMENT;
          }
        case 204: break;
        case 91: 
          { return ATSTypes.FOLDAT;
          }
        case 205: break;
        case 1: 
          { return ATSTypes.NONE;
          }
        case 206: break;
        case 66: 
          { return ATSTypes.EQLTGT;
          }
        case 207: break;
        case 147: 
          { return ATSTypes.WITHTYPE;
          }
        case 208: break;
        case 145: 
          { return ATSTypes.SRPINCLUDE;
          }
        case 209: break;
        case 53: 
          { return ATSTypes.COMMALPAREN;
          }
        case 210: break;
        case 10: 
          { return ATSTypes.BQUOTE;
          }
        case 211: break;
        case 30: 
          { return ATSTypes.DOTLT;
          }
        case 212: break;
        case 79: 
          { return ATSTypes.REFAT;
          }
        case 213: break;
        case 25: 
          { string.append('\\');
          }
        case 214: break;
        case 104: 
          { return ATSTypes.IMPORT;
          }
        case 215: break;
        case 117: 
          { return ATSTypes.ASSUME;
          }
        case 216: break;
        case 142: 
          { return ATSTypes.OVERLOAD;
          }
        case 217: break;
        case 150: 
          { return ATSTypes.DLRCONTINUE;
          }
        case 218: break;
        case 73: 
          { return ATSTypes.VAL;
          }
        case 219: break;
        case 154: 
          { return ATSTypes.SRPELIFNDEF;
          }
        case 220: break;
        case 103: 
          { return ATSTypes.COMMENT_REST;
          }
        case 221: break;
        case 43: 
          { return ATSTypes.BQUOTELPAREN;
          }
        case 222: break;
        case 40: 
          { return ATSTypes.ATLPAREN;
          }
        case 223: break;
        case 44: 
          { return ATSTypes.COLONLT;
          }
        case 224: break;
        case 88: 
          { return ATSTypes.FIXITY;
          }
        case 225: break;
        case 50: 
          { return ATSTypes.MINUSLT;
          }
        case 226: break;
        case 80: 
          { return ATSTypes.DLRLST;
          }
        case 227: break;
        case 9: 
          { return ATSTypes.BANG;
          }
        case 228: break;
        case 106: 
          { return ATSTypes.EXTERN;
          }
        case 229: break;
        case 139: 
          { return ATSTypes.CLASSDEC;
          }
        case 230: break;
        case 82: 
          { return ATSTypes.DLRTUP;
          }
        case 231: break;
        case 108: 
          { return ATSTypes.EXTVAR;
          }
        case 232: break;
        case 109: 
          { return ATSTypes.DLRDELAY;
          }
        case 233: break;
        case 83: 
          { return ATSTypes.EQSLASHEQGT;
          }
        case 234: break;
        case 3: 
          { throw new Error("Illegal character <"+yytext()+">");
          }
        case 235: break;
        case 61: 
          { return ATSTypes.LET;
          }
        case 236: break;
        case 115: 
          { return ATSTypes.SRPERROR;
          }
        case 237: break;
        case 119: 
          { return ATSTypes.STADEF;
          }
        case 238: break;
        case 100: 
          { return ATSTypes.VIEWAT;
          }
        case 239: break;
        case 58: 
          { string.append('\t');
          }
        case 240: break;
        case 93: 
          { return ATSTypes.EQSLASHEQGTGT;
          }
        case 241: break;
        case 131: 
          { return ATSTypes.SRPASSERT;
          }
        case 242: break;
        case 157: 
          { return ATSTypes.DLRMYFILENAME;
          }
        case 243: break;
        case 37: 
          { return ATSTypes.FUN;
          }
        case 244: break;
        case 28: 
          { return ATSTypes.DOTINT;
          }
        case 245: break;
        case 107: 
          { return ATSTypes.EXTYPE;
          }
        case 246: break;
        case 96: 
          { return ATSTypes.SRPTHEN;
          }
        case 247: break;
        case 18: 
          { return ATSTypes.COMMA;
          }
        case 248: break;
        case 130: 
          { return ATSTypes.SRPDEFINE;
          }
        case 249: break;
        case 127: 
          { return ATSTypes.DLREXTVAL;
          }
        case 250: break;
        case 23: 
          { return ATSTypes.RBRACE;
          }
        case 251: break;
        case 105: 
          { return ATSTypes.NONFIX;
          }
        case 252: break;
        case 47: 
          { return ATSTypes.EQGT;
          }
        case 253: break;
        case 77: 
          { return ATSTypes.ELSE;
          }
        case 254: break;
        case 114: 
          { return ATSTypes.SRPENDIF;
          }
        case 255: break;
        case 155: 
          { return ATSTypes.DLRVCOPYENV;
          }
        case 256: break;
        case 152: 
          { return ATSTypes.DLREXTMCALL;
          }
        case 257: break;
        case 36: 
          { return ATSTypes.DO;
          }
        case 258: break;
        case 33: 
          { return ATSTypes.QUOTELBRACE;
          }
        case 259: break;
        case 138: 
          { return ATSTypes.TKINDEF;
          }
        case 260: break;
        case 48: 
          { return ATSTypes.GTDOT;
          }
        case 261: break;
        case 22: 
          { return ATSTypes.LBRACE;
          }
        case 262: break;
        case 5: 
          { return ATSTypes.DOT;
          }
        case 263: break;
        case 17: 
          { return ATSTypes.TILDE;
          }
        case 264: break;
        case 137: 
          { return ATSTypes.TYPEDEF;
          }
        case 265: break;
        case 27: 
          { return ATSTypes.COMMENT_LINE;
          }
        case 266: break;
        case 67: 
          { return ATSTypes.EQGTGT;
          }
        case 267: break;
        case 4: 
          { return ATSTypes.BACKSLASH;
          }
        case 268: break;
        case 63: 
          { return ATSTypes.END;
          }
        case 269: break;
        case 15: 
          { return ATSTypes.GT;
          }
        case 270: break;
        case 19: 
          { return ATSTypes.SEMICOLON;
          }
        case 271: break;
        case 84: 
          { return ATSTypes.TYPE;
          }
        case 272: break;
        case 55: 
          { string.append('\"');
          }
        case 273: break;
        case 41: 
          { return ATSTypes.ATLBRACKET;
          }
        case 274: break;
        case 148: 
          { return ATSTypes.IMPLEMENT;
          }
        case 275: break;
        case 116: 
          { return ATSTypes.SRPPRINT;
          }
        case 276: break;
        case 136: 
          { return ATSTypes.SYMELIM;
          }
        case 277: break;
        case 78: 
          { return ATSTypes.FORSTAR;
          }
        case 278: break;
        case 144: 
          { return ATSTypes.DLREXTKIND;
          }
        case 279: break;
        case 69: 
          { return ATSTypes.MINUSLTGT;
          }
        case 280: break;
        case 121: 
          { return ATSTypes.WHILESTAR;
          }
        case 281: break;
        case 156: 
          { return ATSTypes.DLRMYLOCATION;
          }
        case 282: break;
        case 8: 
          { return ATSTypes.AT;
          }
        case 283: break;
        case 38: 
          { return ATSTypes.OF;
          }
        case 284: break;
        case 60: 
          { return ATSTypes.DLREFFMASK_ARG;
          }
        case 285: break;
        case 113: 
          { return ATSTypes.SRPUNDEF;
          }
        case 286: break;
        case 98: 
          { return ATSTypes.BEGIN;
          }
        case 287: break;
        case 140: 
          { return ATSTypes.DATASORT;
          }
        case 288: break;
        case 76: 
          { return ATSTypes.CASE;
          }
        case 289: break;
        case 70: 
          { return ATSTypes.AND;
          }
        case 290: break;
        case 124: 
          { return ATSTypes.REQUIRE;
          }
        case 291: break;
        case 35: 
          { return ATSTypes.IF;
          }
        case 292: break;
        case 158: 
          { return ATSTypes.DLRMYFUNCTION;
          }
        case 293: break;
        case 64: 
          { return ATSTypes.FIX;
          }
        case 294: break;
        case 52: 
          { return ATSTypes.AS;
          }
        case 295: break;
        case 149: 
          { return ATSTypes.EXCEPTION;
          }
        case 296: break;
        case 74: 
          { return ATSTypes.VAR;
          }
        case 297: break;
        case 129: 
          { return ATSTypes.SRPIFNDEF;
          }
        case 298: break;
        case 133: 
          { return ATSTypes.SORTDEF;
          }
        case 299: break;
        case 26: 
          { yybegin(YYINITIAL); return symbol(sym.STRING_LITERAL, string.toString());
          }
        case 300: break;
        case 92: 
          { return ATSTypes.COMMENT_BLOCK;
          }
        case 301: break;
        case 97: 
          { return ATSTypes.ADDRAT;
          }
        case 302: break;
        case 141: 
          { return ATSTypes.DATATYPE;
          }
        case 303: break;
        case 111: 
          { return ATSTypes.DLRBREAK;
          }
        case 304: break;
        case 85: 
          { return ATSTypes.THEN;
          }
        case 305: break;
        case 151: 
          { return ATSTypes.DLREXTFCALL;
          }
        case 306: break;
        case 101: 
          { return ATSTypes.WHILE;
          }
        case 307: break;
        case 7: 
          { return ATSTypes.RPAREN;
          }
        case 308: break;
        case 89: 
          { return ATSTypes.LOCAL;
          }
        case 309: break;
        case 159: 
          { return ATSTypes.DLREXTYPE_STRUCT;
          }
        case 310: break;
        case 29: 
          { return ATSTypes.DOTDOT;
          }
        case 311: break;
        case 112: 
          { return ATSTypes.SRPIFDEF;
          }
        case 312: break;
        case 123: 
          { return ATSTypes.DYNLOAD;
          }
        case 313: break;
        case 39: 
          { return ATSTypes.OP;
          }
        case 314: break;
        case 32: 
          { return ATSTypes.QUOTELBRACKET;
          }
        case 315: break;
        case 14: 
          { return ATSTypes.EQ;
          }
        case 316: break;
        case 51: 
          { return ATSTypes.MINUSGT;
          }
        case 317: break;
        case 21: 
          { return ATSTypes.RBRACKET;
          }
        case 318: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                return ATSTypes.EOF;
              }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
