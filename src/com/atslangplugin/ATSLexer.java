/* The following code was generated by JFlex 1.4.3 on 1/10/15 5:04 PM */

package com.atslangplugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.atslangplugin.ATSTokenTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 1/10/15 5:04 PM from the specification file
 * <tt>C:/cygwin64/home/brand_000/IntelliJATS/src/com/atslangplugin/ATS.flex</tt>
 */
public class ATSLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int PRAGMA = 6;
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int PRE = 4;
  public static final int DEFINE_CONTINUATION = 10;
  public static final int CONTINUATION = 12;
  public static final int DEFINE = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\21\1\5\1\0\1\21\1\4\22\0\1\21\1\47\1\44"+
    "\1\13\1\15\1\11\1\103\1\43\1\37\1\36\1\35\1\42\1\77"+
    "\1\56\1\40\1\34\1\17\7\7\2\6\1\52\1\100\1\53\1\54"+
    "\1\55\1\102\1\46\4\10\1\41\1\10\21\1\1\20\2\1\1\45"+
    "\1\3\1\101\1\14\1\2\1\51\1\60\1\61\1\24\1\27\1\30"+
    "\1\31\1\71\1\74\1\22\1\1\1\75\1\25\1\70\1\23\1\33"+
    "\1\65\1\73\1\32\1\62\1\63\1\26\1\66\1\67\1\72\1\64"+
    "\1\76\1\12\1\50\1\16\1\57\53\0\1\1\12\0\1\1\4\0"+
    "\1\1\5\0\27\1\1\0\37\1\1\0\u01ca\1\4\0\14\1\16\0"+
    "\5\1\7\0\1\1\1\0\1\1\201\0\5\1\1\0\2\1\2\0"+
    "\4\1\10\0\1\1\1\0\3\1\1\0\1\1\1\0\24\1\1\0"+
    "\123\1\1\0\213\1\10\0\236\1\11\0\46\1\2\0\1\1\7\0"+
    "\47\1\110\0\33\1\5\0\3\1\55\0\53\1\43\0\2\1\1\0"+
    "\143\1\1\0\1\1\17\0\2\1\7\0\2\1\12\0\3\1\2\0"+
    "\1\1\20\0\1\1\1\0\36\1\35\0\131\1\13\0\1\1\30\0"+
    "\41\1\11\0\2\1\4\0\1\1\5\0\26\1\4\0\1\1\11\0"+
    "\1\1\3\0\1\1\27\0\31\1\107\0\1\1\1\0\13\1\127\0"+
    "\66\1\3\0\1\1\22\0\1\1\7\0\12\1\17\0\7\1\1\0"+
    "\7\1\5\0\10\1\2\0\2\1\2\0\26\1\1\0\7\1\1\0"+
    "\1\1\3\0\4\1\3\0\1\1\20\0\1\1\15\0\2\1\1\0"+
    "\3\1\16\0\2\1\23\0\6\1\4\0\2\1\2\0\26\1\1\0"+
    "\7\1\1\0\2\1\1\0\2\1\1\0\2\1\37\0\4\1\1\0"+
    "\1\1\23\0\3\1\20\0\11\1\1\0\3\1\1\0\26\1\1\0"+
    "\7\1\1\0\2\1\1\0\5\1\3\0\1\1\22\0\1\1\17\0"+
    "\2\1\43\0\10\1\2\0\2\1\2\0\26\1\1\0\7\1\1\0"+
    "\2\1\1\0\5\1\3\0\1\1\36\0\2\1\1\0\3\1\17\0"+
    "\1\1\21\0\1\1\1\0\6\1\3\0\3\1\1\0\4\1\3\0"+
    "\2\1\1\0\1\1\1\0\2\1\3\0\2\1\3\0\3\1\3\0"+
    "\14\1\26\0\1\1\64\0\10\1\1\0\3\1\1\0\27\1\1\0"+
    "\12\1\1\0\5\1\3\0\1\1\32\0\2\1\6\0\2\1\43\0"+
    "\10\1\1\0\3\1\1\0\27\1\1\0\12\1\1\0\5\1\3\0"+
    "\1\1\40\0\1\1\1\0\2\1\17\0\2\1\22\0\10\1\1\0"+
    "\3\1\1\0\51\1\2\0\1\1\20\0\1\1\21\0\2\1\30\0"+
    "\6\1\5\0\22\1\3\0\30\1\1\0\11\1\1\0\1\1\2\0"+
    "\7\1\72\0\60\1\1\0\2\1\14\0\7\1\72\0\2\1\1\0"+
    "\1\1\2\0\2\1\1\0\1\1\2\0\1\1\6\0\4\1\1\0"+
    "\7\1\1\0\3\1\1\0\1\1\1\0\1\1\2\0\2\1\1\0"+
    "\4\1\1\0\2\1\11\0\1\1\2\0\5\1\1\0\1\1\25\0"+
    "\4\1\40\0\1\1\77\0\10\1\1\0\44\1\33\0\5\1\163\0"+
    "\53\1\24\0\1\1\20\0\6\1\4\0\4\1\3\0\1\1\3\0"+
    "\2\1\7\0\3\1\4\0\15\1\14\0\1\1\21\0\46\1\1\0"+
    "\1\1\5\0\1\1\2\0\53\1\1\0\u014d\1\1\0\4\1\2\0"+
    "\7\1\1\0\1\1\1\0\4\1\2\0\51\1\1\0\4\1\2\0"+
    "\41\1\1\0\4\1\2\0\7\1\1\0\1\1\1\0\4\1\2\0"+
    "\17\1\1\0\71\1\1\0\4\1\2\0\103\1\45\0\20\1\20\0"+
    "\125\1\14\0\u026c\1\2\0\21\1\1\0\32\1\5\0\113\1\25\0"+
    "\15\1\1\0\4\1\16\0\22\1\16\0\22\1\16\0\15\1\1\0"+
    "\3\1\17\0\64\1\43\0\1\1\4\0\1\1\103\0\130\1\10\0"+
    "\51\1\1\0\1\1\5\0\106\1\12\0\35\1\63\0\36\1\2\0"+
    "\5\1\13\0\54\1\25\0\7\1\70\0\27\1\11\0\65\1\122\0"+
    "\1\1\135\0\57\1\21\0\7\1\67\0\36\1\15\0\2\1\12\0"+
    "\54\1\32\0\44\1\51\0\3\1\12\0\44\1\153\0\4\1\1\0"+
    "\4\1\3\0\2\1\11\0\300\1\100\0\u0116\1\2\0\6\1\2\0"+
    "\46\1\2\0\6\1\2\0\10\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\37\1\2\0\65\1\1\0\7\1\1\0\1\1\3\0"+
    "\3\1\1\0\7\1\3\0\4\1\2\0\6\1\4\0\15\1\5\0"+
    "\3\1\1\0\7\1\164\0\1\1\15\0\1\1\20\0\15\1\145\0"+
    "\1\1\4\0\1\1\2\0\12\1\1\0\1\1\3\0\5\1\6\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\4\1\1\0\13\1\2\0"+
    "\4\1\5\0\5\1\4\0\1\1\64\0\2\1\u0a7b\0\57\1\1\0"+
    "\57\1\1\0\205\1\6\0\4\1\3\0\2\1\14\0\46\1\1\0"+
    "\1\1\5\0\1\1\2\0\70\1\7\0\1\1\20\0\27\1\11\0"+
    "\7\1\1\0\7\1\1\0\7\1\1\0\7\1\1\0\7\1\1\0"+
    "\7\1\1\0\7\1\1\0\7\1\120\0\1\1\u01d5\0\2\1\52\0"+
    "\5\1\5\0\2\1\4\0\126\1\6\0\3\1\1\0\132\1\1\0"+
    "\4\1\5\0\51\1\3\0\136\1\21\0\33\1\65\0\20\1\u0200\0"+
    "\u19b6\1\112\0\u51cd\1\63\0\u048d\1\103\0\56\1\2\0\u010d\1\3\0"+
    "\20\1\12\0\2\1\24\0\57\1\20\0\31\1\10\0\106\1\61\0"+
    "\11\1\2\0\147\1\2\0\4\1\1\0\4\1\14\0\13\1\115\0"+
    "\12\1\1\0\3\1\1\0\4\1\1\0\27\1\35\0\64\1\16\0"+
    "\62\1\76\0\6\1\3\0\1\1\16\0\34\1\12\0\27\1\31\0"+
    "\35\1\7\0\57\1\34\0\1\1\60\0\51\1\27\0\3\1\1\0"+
    "\10\1\24\0\27\1\3\0\1\1\5\0\60\1\1\0\1\1\3\0"+
    "\2\1\2\0\5\1\2\0\1\1\1\0\1\1\30\0\3\1\2\0"+
    "\13\1\7\0\3\1\14\0\6\1\2\0\6\1\2\0\6\1\11\0"+
    "\7\1\1\0\7\1\221\0\43\1\35\0\u2ba4\1\14\0\27\1\4\0"+
    "\61\1\u2104\0\u016e\1\2\0\152\1\46\0\7\1\14\0\5\1\5\0"+
    "\1\1\1\0\12\1\1\0\15\1\1\0\5\1\1\0\1\1\1\0"+
    "\2\1\1\0\2\1\1\0\154\1\41\0\u016b\1\22\0\100\1\2\0"+
    "\66\1\50\0\14\1\164\0\5\1\1\0\207\1\44\0\32\1\6\0"+
    "\32\1\13\0\131\1\3\0\6\1\2\0\6\1\2\0\6\1\2\0"+
    "\3\1\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\2\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\5\11\2\2\1\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\1\1\31\10\2\1\32"+
    "\1\33\1\34\1\35\1\1\1\36\2\37\2\40\1\41"+
    "\4\0\1\42\16\0\1\37\2\5\1\43\1\44\11\2"+
    "\1\45\6\2\1\46\4\2\1\47\1\50\1\2\1\51"+
    "\1\52\1\0\1\53\1\54\1\55\1\17\1\16\1\56"+
    "\1\57\1\16\1\60\2\17\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\0\1\70\1\71\1\72\1\73"+
    "\1\74\4\2\1\75\22\2\1\76\1\77\1\37\1\0"+
    "\1\100\27\0\3\2\1\101\3\2\1\102\1\2\1\103"+
    "\2\2\1\104\3\2\1\105\1\46\3\2\1\106\1\101"+
    "\2\2\3\51\1\52\1\107\1\110\1\0\1\16\1\17"+
    "\1\0\1\111\1\112\1\113\1\114\4\2\1\115\4\2"+
    "\1\116\14\2\1\117\1\120\4\2\15\0\1\121\3\0"+
    "\1\122\4\0\1\123\4\0\5\2\1\124\1\2\1\103"+
    "\1\2\1\103\2\2\1\125\4\2\1\105\2\2\1\126"+
    "\1\127\2\2\1\0\1\51\1\0\2\107\1\130\1\16"+
    "\1\131\16\2\1\132\1\133\10\2\1\117\1\134\1\2"+
    "\1\135\3\2\6\0\1\136\1\137\2\0\1\140\30\0"+
    "\1\141\4\2\1\124\1\142\11\2\1\143\1\144\2\2"+
    "\1\51\1\145\1\0\1\146\1\147\5\2\1\150\1\151"+
    "\10\2\1\132\4\2\1\117\1\152\4\2\1\153\1\154"+
    "\2\2\2\0\1\155\1\156\1\0\1\157\2\0\1\160"+
    "\1\0\1\161\1\0\1\121\1\0\1\162\7\0\1\122"+
    "\2\0\1\163\2\0\1\164\1\0\1\123\1\0\1\123"+
    "\5\0\1\141\1\2\1\165\1\166\7\2\1\167\1\170"+
    "\1\171\2\2\1\145\3\2\1\172\1\2\1\173\1\2"+
    "\1\174\1\175\4\2\1\124\4\2\1\176\1\177\1\0"+
    "\1\200\1\201\2\0\1\202\2\0\1\203\1\0\1\204"+
    "\1\205\2\0\1\122\1\206\7\0\6\2\1\207\1\2"+
    "\1\210\1\2\2\211\1\212\1\213\1\214\1\215\1\216"+
    "\1\217\4\2\1\220\1\0\1\221\1\0\1\222\3\0"+
    "\1\223\7\0\1\2\1\224\1\225\2\226\1\2\1\227"+
    "\1\2\2\230\1\231\1\232\1\233\1\0\1\234\1\0"+
    "\1\235\5\0\1\236\1\237\3\0\1\240\6\0\1\241"+
    "\1\242\1\243\1\244\3\0\1\211\2\0\1\245\2\0"+
    "\1\241";

  private static int [] zzUnpackAction() {
    int [] result = new int[617];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\210\0\u0110\0\210\0\u0154"+
    "\0\u0198\0\210\0\u01dc\0\u0220\0\210\0\u0264\0\u02a8\0\u02ec"+
    "\0\u0330\0\u0374\0\u03b8\0\u03fc\0\u0440\0\u0484\0\u04c8\0\u050c"+
    "\0\u0550\0\210\0\u0594\0\u05d8\0\u061c\0\u0660\0\210\0\u06a4"+
    "\0\u06e8\0\210\0\u072c\0\u0770\0\u07b4\0\u07f8\0\u083c\0\u0880"+
    "\0\210\0\u08c4\0\u0908\0\u094c\0\u0990\0\u09d4\0\u0a18\0\u0a5c"+
    "\0\u0aa0\0\u0ae4\0\210\0\210\0\210\0\u0b28\0\210\0\u0b6c"+
    "\0\u0bb0\0\u0bf4\0\210\0\210\0\u0c38\0\u0c7c\0\u0cc0\0\u0d04"+
    "\0\210\0\u0d48\0\u0d8c\0\u0dd0\0\u0e14\0\u0e58\0\u0e9c\0\u0ee0"+
    "\0\u0f24\0\u0f68\0\u0fac\0\u0ff0\0\u1034\0\u1078\0\u10bc\0\u1100"+
    "\0\u1144\0\u1188\0\u11cc\0\314\0\u1210\0\u1254\0\u1298\0\u12dc"+
    "\0\u1320\0\u1364\0\u13a8\0\u13ec\0\u1430\0\314\0\u1474\0\u14b8"+
    "\0\u14fc\0\u1540\0\u1584\0\u15c8\0\u160c\0\u1650\0\u1694\0\u16d8"+
    "\0\u171c\0\314\0\314\0\u1760\0\u17a4\0\210\0\u17e8\0\u182c"+
    "\0\u1870\0\u18b4\0\u18f8\0\u193c\0\u18f8\0\u18f8\0\210\0\u18f8"+
    "\0\u1980\0\210\0\210\0\210\0\210\0\u19c4\0\210\0\210"+
    "\0\210\0\u1a08\0\u1a4c\0\u1a90\0\210\0\u1ad4\0\210\0\u1b18"+
    "\0\u1b5c\0\u1ba0\0\u1be4\0\u1c28\0\u1c6c\0\u1cb0\0\u1cf4\0\u1d38"+
    "\0\u1d7c\0\u1dc0\0\u1e04\0\u1e48\0\u1e8c\0\u1ed0\0\u1f14\0\u1f58"+
    "\0\u1f9c\0\u1fe0\0\u2024\0\u2068\0\u20ac\0\u20f0\0\210\0\u2134"+
    "\0\u2178\0\u21bc\0\u2200\0\u2244\0\u2288\0\u22cc\0\u2310\0\u2354"+
    "\0\u2398\0\u23dc\0\u2420\0\u2464\0\u24a8\0\u24ec\0\u2530\0\u2574"+
    "\0\u25b8\0\u25fc\0\u2640\0\u2684\0\u26c8\0\u270c\0\u2750\0\u2794"+
    "\0\u27d8\0\u281c\0\u2860\0\u28a4\0\u28e8\0\314\0\u292c\0\u2970"+
    "\0\u29b4\0\314\0\u29f8\0\u2a3c\0\u2a80\0\u2ac4\0\314\0\u2b08"+
    "\0\u2b4c\0\u2b90\0\u2bd4\0\314\0\u2c18\0\u2c5c\0\u2ca0\0\314"+
    "\0\u2ce4\0\u2d28\0\u2d6c\0\u2db0\0\u2df4\0\u2e38\0\u2e7c\0\u2ec0"+
    "\0\210\0\u2f04\0\u2f48\0\u2f8c\0\u2fd0\0\210\0\210\0\210"+
    "\0\314\0\u3014\0\u3058\0\u309c\0\u30e0\0\314\0\u3124\0\u3168"+
    "\0\u31ac\0\u31f0\0\314\0\u3234\0\u3278\0\u32bc\0\u3300\0\u3344"+
    "\0\u3388\0\u33cc\0\u3410\0\u3454\0\u3498\0\u34dc\0\u3520\0\u3564"+
    "\0\314\0\u35a8\0\u35ec\0\u3630\0\u3674\0\u36b8\0\u36fc\0\u3740"+
    "\0\u3784\0\u37c8\0\u380c\0\u3850\0\u3894\0\u38d8\0\u391c\0\u3960"+
    "\0\u39a4\0\u39e8\0\u3a2c\0\u3a70\0\u3ab4\0\u3af8\0\u3b3c\0\u3b80"+
    "\0\u3bc4\0\u3c08\0\u3c4c\0\u3c90\0\u3cd4\0\u3d18\0\u3d5c\0\u3da0"+
    "\0\u3de4\0\u3e28\0\u3e6c\0\u3eb0\0\u3ef4\0\u3f38\0\u3f7c\0\314"+
    "\0\u3fc0\0\210\0\u4004\0\u4048\0\314\0\u408c\0\u40d0\0\u4114"+
    "\0\u4158\0\210\0\u419c\0\u41e0\0\210\0\210\0\u4224\0\u4268"+
    "\0\u42ac\0\u42f0\0\u4334\0\u4378\0\210\0\210\0\u2f8c\0\u43bc"+
    "\0\u4400\0\u4444\0\u4488\0\u44cc\0\u4510\0\u4554\0\u4598\0\u45dc"+
    "\0\u4620\0\u4664\0\u46a8\0\u46ec\0\u4730\0\u4774\0\u47b8\0\314"+
    "\0\u47fc\0\u4840\0\u4884\0\u48c8\0\u490c\0\u4950\0\u4994\0\u49d8"+
    "\0\210\0\u4a1c\0\u4a60\0\314\0\u4aa4\0\u4ae8\0\u4b2c\0\u4b70"+
    "\0\u4bb4\0\u4bf8\0\u4c3c\0\u4c80\0\u4cc4\0\u4d08\0\210\0\u4d4c"+
    "\0\u4d90\0\210\0\u4dd4\0\u4e18\0\u4e5c\0\u4ea0\0\u4ee4\0\u4f28"+
    "\0\u4f6c\0\u4fb0\0\u4ff4\0\u5038\0\u507c\0\u50c0\0\u5104\0\u5148"+
    "\0\u518c\0\u51d0\0\u5214\0\u5258\0\u529c\0\u52e0\0\u5324\0\u5368"+
    "\0\u53ac\0\u53f0\0\u5434\0\u5478\0\u54bc\0\u5500\0\u5544\0\210"+
    "\0\314\0\u5588\0\u55cc\0\u5610\0\u5654\0\u5698\0\u56dc\0\u5720"+
    "\0\u5764\0\u57a8\0\210\0\210\0\u57ec\0\u5830\0\u5874\0\u58b8"+
    "\0\u58fc\0\210\0\210\0\u5940\0\u5984\0\u59c8\0\u5a0c\0\u5a50"+
    "\0\314\0\314\0\u5a94\0\u5ad8\0\u5b1c\0\u5b60\0\u5ba4\0\u5be8"+
    "\0\u5c2c\0\u5c70\0\210\0\u5cb4\0\u5cf8\0\u5d3c\0\u5d80\0\314"+
    "\0\210\0\u5dc4\0\u5e08\0\u5e4c\0\u5e90\0\u5ed4\0\314\0\u5f18"+
    "\0\u5f5c\0\u5fa0\0\u5fe4\0\210\0\210\0\u6028\0\210\0\u606c"+
    "\0\u60b0\0\210\0\u60f4\0\210\0\u6138\0\210\0\u617c\0\210"+
    "\0\u61c0\0\u6204\0\u6248\0\u628c\0\u62d0\0\u6314\0\u6358\0\210"+
    "\0\u639c\0\u63e0\0\210\0\u6424\0\u6468\0\210\0\u64ac\0\210"+
    "\0\u64f0\0\u6534\0\u6578\0\u65bc\0\u6600\0\u6644\0\u6688\0\314"+
    "\0\u66cc\0\314\0\314\0\u6710\0\u6754\0\u6798\0\u67dc\0\u6820"+
    "\0\u6864\0\u68a8\0\314\0\314\0\314\0\u68ec\0\u6930\0\u6974"+
    "\0\u69b8\0\u69fc\0\u6a40\0\314\0\u6a84\0\314\0\u6ac8\0\314"+
    "\0\314\0\u6b0c\0\u6b50\0\u6b94\0\u6bd8\0\314\0\u6c1c\0\u6c60"+
    "\0\u6ca4\0\u6ce8\0\210\0\314\0\u6d2c\0\210\0\210\0\u6d70"+
    "\0\u6db4\0\210\0\u6df8\0\u6e3c\0\210\0\u6e80\0\u6ec4\0\210"+
    "\0\u6f08\0\u6f4c\0\u6f90\0\210\0\u6fd4\0\u7018\0\u705c\0\u70a0"+
    "\0\u70e4\0\u7128\0\u716c\0\u71b0\0\u71f4\0\u7238\0\u727c\0\u72c0"+
    "\0\u7304\0\314\0\u7348\0\314\0\u738c\0\314\0\u73d0\0\314"+
    "\0\314\0\314\0\314\0\314\0\314\0\u7414\0\u7458\0\u749c"+
    "\0\u74e0\0\210\0\u7524\0\210\0\u7568\0\210\0\u75ac\0\u75f0"+
    "\0\u7634\0\210\0\u7678\0\u76bc\0\u7700\0\u7744\0\u7788\0\u77cc"+
    "\0\u7810\0\u7854\0\314\0\314\0\314\0\u7898\0\u78dc\0\314"+
    "\0\u7920\0\314\0\u7964\0\210\0\210\0\210\0\u79a8\0\210"+
    "\0\u79ec\0\210\0\u7a30\0\u7a74\0\u7ab8\0\u7afc\0\u7b40\0\314"+
    "\0\314\0\u7b84\0\u7bc8\0\u7c0c\0\210\0\u7c50\0\u7c94\0\u7cd8"+
    "\0\u7d1c\0\u7d60\0\u7da4\0\u7de8\0\210\0\210\0\210\0\u7e2c"+
    "\0\u7e70\0\u7eb4\0\210\0\u7ef8\0\u7f3c\0\210\0\u7f80\0\u7fc4"+
    "\0\210";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[617];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\6\1\7\2\10\1\4\1\11"+
    "\1\12\1\13\1\3\1\14\1\15\1\16\1\4\1\7"+
    "\1\17\1\20\1\21\1\22\1\4\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\4"+
    "\1\3\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\4\1\56\1\57\1\60\1\61\6\4"+
    "\1\62\1\63\1\64\1\65\1\66\104\3\105\0\2\4"+
    "\3\0\3\4\6\0\2\4\1\0\12\4\5\0\1\4"+
    "\16\0\17\4\12\0\1\67\104\0\2\10\7\0\1\10"+
    "\10\0\1\70\7\0\1\71\1\70\54\0\1\72\3\0"+
    "\1\73\20\0\1\74\66\0\1\75\3\0\1\76\1\77"+
    "\1\100\14\0\1\101\12\0\1\102\2\0\1\103\1\0"+
    "\1\104\42\0\1\105\1\106\1\0\1\107\1\110\1\0"+
    "\1\111\25\0\1\112\1\113\1\114\1\115\2\0\1\116"+
    "\1\0\1\117\21\0\1\120\1\121\7\0\1\121\1\122"+
    "\7\0\1\70\7\0\1\71\1\70\30\0\1\122\12\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\1\4\1\123"+
    "\5\4\1\124\2\4\5\0\1\4\16\0\10\4\1\125"+
    "\6\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\11\4\1\126\5\0\1\4\16\0\3\4\1\127\13\4"+
    "\6\0\2\4\3\0\3\4\6\0\2\4\1\0\3\4"+
    "\1\130\6\4\5\0\1\4\16\0\1\131\16\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\3\4\1\132"+
    "\2\4\1\133\2\4\1\134\5\0\1\4\16\0\1\135"+
    "\16\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\11\4\1\136\5\0\1\4\16\0\1\137\3\4\1\140"+
    "\12\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\1\4\1\141\1\4\1\142\6\4\5\0\1\4\16\0"+
    "\12\4\1\143\4\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\1\144\1\145\2\4\1\146\3\4\1\147"+
    "\1\150\5\0\1\4\16\0\17\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\6\4\1\151\3\4\5\0"+
    "\1\4\16\0\17\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\7\4\1\152\2\4\5\0\1\4\16\0"+
    "\5\4\1\153\1\154\10\4\41\0\1\155\105\0\1\156"+
    "\102\0\1\157\54\0\2\160\7\0\1\160\20\0\1\161"+
    "\12\0\1\162\30\0\3\163\1\164\2\0\4\163\1\165"+
    "\24\163\1\166\3\163\1\167\1\163\1\170\36\163\3\36"+
    "\1\171\2\0\36\36\1\172\37\36\12\0\1\173\24\0"+
    "\1\174\5\0\1\175\37\0\2\176\5\0\1\176\7\0"+
    "\1\176\1\0\12\176\5\0\1\176\16\0\17\176\44\0"+
    "\1\177\117\0\1\200\105\0\1\201\62\0\1\202\16\0"+
    "\1\203\1\0\1\204\66\0\1\205\116\0\1\206\1\0"+
    "\1\207\27\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\1\4\1\210\1\4\1\211\1\4\1\212\4\4\5\0"+
    "\1\4\16\0\1\4\1\213\1\214\14\4\6\0\2\4"+
    "\3\0\3\4\6\0\2\4\1\0\6\4\1\215\3\4"+
    "\5\0\1\4\16\0\17\4\6\0\2\4\3\0\3\4"+
    "\6\0\2\4\1\0\1\216\1\4\1\217\6\4\1\220"+
    "\5\0\1\4\16\0\3\4\1\221\1\222\12\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\10\4\1\223"+
    "\1\4\5\0\1\4\16\0\4\4\1\224\7\4\1\225"+
    "\1\226\1\4\6\0\2\4\3\0\3\4\6\0\2\4"+
    "\1\0\10\4\1\227\1\230\5\0\1\4\16\0\17\4"+
    "\6\0\2\4\3\0\3\4\6\0\2\4\1\0\1\231"+
    "\11\4\5\0\1\4\16\0\1\232\16\4\6\0\2\4"+
    "\3\0\3\4\6\0\2\4\1\0\1\233\7\4\1\234"+
    "\1\4\5\0\1\4\16\0\14\4\1\235\2\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\12\4\5\0"+
    "\1\4\16\0\1\236\16\4\44\0\1\237\45\0\2\240"+
    "\5\0\1\240\7\0\1\240\1\0\12\240\5\0\1\240"+
    "\16\0\17\240\13\0\2\241\7\0\1\241\22\0\1\241"+
    "\13\0\1\241\33\0\2\71\7\0\1\71\10\0\1\70"+
    "\10\0\1\70\55\0\3\73\111\0\1\242\5\0\1\243"+
    "\75\0\1\244\110\0\1\245\76\0\1\246\1\0\1\247"+
    "\4\0\1\250\133\0\1\251\115\0\1\252\41\0\1\253"+
    "\104\0\1\254\72\0\1\255\4\0\1\107\32\0\1\256"+
    "\51\0\1\257\104\0\1\260\40\0\1\261\41\0\1\262"+
    "\27\0\1\263\55\0\1\264\103\0\1\265\145\0\1\266"+
    "\35\0\1\267\1\0\1\270\77\0\1\271\143\0\1\272"+
    "\25\0\2\120\7\0\1\120\10\0\1\70\7\0\1\71"+
    "\1\70\50\0\1\120\1\121\7\0\1\121\10\0\1\70"+
    "\7\0\1\71\1\70\50\0\3\122\6\0\1\122\4\0"+
    "\1\122\2\0\3\122\7\0\1\122\16\0\2\122\23\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\7\4\1\273"+
    "\2\4\5\0\1\4\16\0\17\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\12\4\5\0\1\4\16\0"+
    "\5\4\1\274\11\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\1\4\1\275\10\4\5\0\1\4\16\0"+
    "\17\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\12\4\5\0\1\4\16\0\10\4\1\276\6\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\12\4\5\0"+
    "\1\4\16\0\1\277\16\4\6\0\2\4\3\0\3\4"+
    "\6\0\2\4\1\0\12\4\5\0\1\4\16\0\2\4"+
    "\1\300\14\4\6\0\2\4\3\0\3\4\6\0\2\4"+
    "\1\0\12\4\5\0\1\4\16\0\1\301\16\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\12\4\5\0"+
    "\1\4\16\0\3\4\1\302\13\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\2\4\1\303\7\4\5\0"+
    "\1\4\16\0\17\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\12\4\5\0\1\4\16\0\10\4\1\304"+
    "\6\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\12\4\5\0\1\4\16\0\3\4\1\305\13\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\1\4\1\306"+
    "\10\4\5\0\1\4\16\0\17\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\5\4\1\307\4\4\5\0"+
    "\1\4\16\0\17\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\12\4\5\0\1\4\16\0\2\4\1\310"+
    "\14\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\1\4\1\276\1\311\7\4\5\0\1\4\16\0\3\4"+
    "\1\312\13\4\6\0\2\4\3\0\3\4\6\0\2\4"+
    "\1\0\12\4\5\0\1\4\16\0\12\4\1\313\4\4"+
    "\6\0\2\4\3\0\3\4\6\0\2\4\1\0\12\4"+
    "\5\0\1\4\16\0\12\4\1\314\4\4\6\0\2\4"+
    "\3\0\3\4\6\0\2\4\1\0\1\4\1\314\10\4"+
    "\5\0\1\4\16\0\17\4\6\0\2\4\3\0\3\4"+
    "\6\0\2\4\1\0\6\4\1\315\3\4\5\0\1\4"+
    "\16\0\17\4\6\0\2\4\3\0\3\4\6\0\2\4"+
    "\1\0\3\4\1\316\4\4\1\317\1\4\5\0\1\4"+
    "\16\0\17\4\6\0\2\4\3\0\3\4\6\0\2\4"+
    "\1\0\2\4\1\320\4\4\1\321\2\4\5\0\1\4"+
    "\16\0\13\4\1\322\3\4\6\0\2\4\3\0\3\4"+
    "\6\0\2\4\1\0\6\4\1\323\3\4\5\0\1\4"+
    "\16\0\17\4\5\0\3\324\1\325\2\0\26\324\1\326"+
    "\47\324\35\327\1\330\46\327\6\0\2\160\7\0\1\160"+
    "\10\0\1\70\10\0\1\70\102\0\1\331\120\0\1\332"+
    "\26\0\3\333\1\334\2\0\35\333\1\172\40\333\4\163"+
    "\2\0\76\163\4\36\2\0\76\36\1\0\2\176\3\0"+
    "\3\176\6\0\2\176\1\0\12\176\5\0\1\176\16\0"+
    "\17\176\61\0\1\335\104\0\1\336\103\0\1\337\103\0"+
    "\1\340\27\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\5\4\1\341\4\4\5\0\1\4\16\0\17\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\3\4\1\276"+
    "\6\4\5\0\1\4\16\0\17\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\5\4\1\342\4\4\5\0"+
    "\1\4\16\0\17\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\12\4\5\0\1\4\16\0\2\4\1\343"+
    "\14\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\12\4\5\0\1\4\16\0\2\4\1\344\14\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\12\4\5\0"+
    "\1\4\16\0\11\4\1\345\5\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\7\4\1\346\2\4\5\0"+
    "\1\4\16\0\17\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\12\4\5\0\1\4\16\0\1\347\16\4"+
    "\6\0\2\4\3\0\3\4\6\0\2\4\1\0\10\4"+
    "\1\350\1\4\5\0\1\4\16\0\17\4\6\0\2\4"+
    "\3\0\3\4\6\0\2\4\1\0\12\4\5\0\1\4"+
    "\16\0\1\351\16\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\12\4\5\0\1\4\16\0\10\4\1\352"+
    "\6\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\12\4\5\0\1\4\16\0\4\4\1\353\12\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\12\4\5\0"+
    "\1\4\16\0\5\4\1\354\11\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\6\4\1\355\3\4\5\0"+
    "\1\4\16\0\17\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\1\356\11\4\5\0\1\4\16\0\17\4"+
    "\6\0\2\4\3\0\3\4\6\0\2\4\1\0\1\357"+
    "\1\4\1\360\3\4\1\361\1\362\1\4\1\363\5\0"+
    "\1\4\16\0\1\364\5\4\1\365\10\4\6\0\2\4"+
    "\3\0\3\4\6\0\2\4\1\0\12\4\5\0\1\4"+
    "\16\0\2\4\1\366\14\4\6\0\2\4\3\0\3\4"+
    "\6\0\2\4\1\0\6\4\1\367\3\4\5\0\1\4"+
    "\16\0\17\4\6\0\2\4\3\0\3\4\6\0\2\4"+
    "\1\0\3\4\1\370\4\4\1\371\1\4\5\0\1\4"+
    "\16\0\17\4\6\0\2\4\3\0\3\4\6\0\2\4"+
    "\1\0\12\4\5\0\1\4\16\0\3\4\1\372\13\4"+
    "\6\0\2\4\3\0\3\4\6\0\2\4\1\0\12\4"+
    "\5\0\1\4\16\0\3\4\1\276\13\4\6\0\2\4"+
    "\3\0\3\4\6\0\2\4\1\0\1\373\5\4\1\374"+
    "\3\4\5\0\1\4\16\0\17\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\2\4\1\375\7\4\5\0"+
    "\1\4\16\0\17\4\6\0\2\240\3\0\3\240\6\0"+
    "\2\240\1\0\12\240\5\0\1\240\16\0\17\240\13\0"+
    "\2\241\7\0\1\241\110\0\1\376\102\0\1\377\3\0"+
    "\1\u0100\103\0\1\u0101\105\0\1\u0102\101\0\1\u0103\76\0"+
    "\1\u0104\37\0\1\u0105\53\0\1\u0106\133\0\1\u0107\51\0"+
    "\1\u0108\75\0\1\u0109\104\0\1\u010a\142\0\1\256\104\0"+
    "\1\u010b\45\0\1\u010c\107\0\1\u010d\135\0\1\u010e\44\0"+
    "\1\u010f\101\0\1\u0110\113\0\1\u0111\101\0\1\u0112\106\0"+
    "\1\u0113\135\0\1\u0114\106\0\1\u0115\46\0\1\u0116\75\0"+
    "\1\u0117\3\0\1\u0118\53\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\1\u0119\11\4\5\0\1\4\16\0\17\4"+
    "\6\0\2\4\3\0\3\4\6\0\2\4\1\0\3\4"+
    "\1\u011a\5\4\1\u011b\5\0\1\4\16\0\17\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\7\4\1\u011c"+
    "\2\4\5\0\1\4\16\0\17\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\12\4\5\0\1\4\16\0"+
    "\2\4\1\u011d\14\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\6\4\1\u011e\3\4\5\0\1\4\16\0"+
    "\3\4\1\u011f\13\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\12\4\5\0\1\4\16\0\10\4\1\u0120"+
    "\6\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\12\4\5\0\1\4\16\0\1\u0121\16\4\6\0\2\4"+
    "\3\0\3\4\6\0\2\4\1\0\12\4\5\0\1\4"+
    "\4\0\1\u0122\11\0\17\4\6\0\2\4\3\0\3\4"+
    "\6\0\2\4\1\0\12\4\5\0\1\4\16\0\1\u0123"+
    "\16\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\3\4\1\u0124\6\4\5\0\1\4\16\0\17\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\6\4\1\u0125"+
    "\3\4\5\0\1\4\16\0\17\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\6\4\1\u0126\3\4\5\0"+
    "\1\4\16\0\17\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\6\4\1\u0127\3\4\5\0\1\4\16\0"+
    "\4\4\1\u0128\1\4\1\u0129\10\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\12\4\5\0\1\4\4\0"+
    "\1\u012a\11\0\17\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\6\4\1\u012b\3\4\5\0\1\4\16\0"+
    "\17\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\5\4\1\u012c\4\4\5\0\1\4\16\0\17\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\12\4\1\0"+
    "\1\u012d\3\0\1\4\16\0\17\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\12\4\5\0\1\4\4\0"+
    "\1\u012e\11\0\17\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\4\4\1\u012f\5\4\5\0\1\4\16\0"+
    "\17\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\10\4\1\u0130\1\4\5\0\1\4\16\0\17\4\5\0"+
    "\3\324\1\325\2\0\101\324\1\325\1\u0131\102\324\1\325"+
    "\2\0\26\324\1\u0132\47\324\35\327\1\u0133\46\327\35\u0134"+
    "\1\330\1\u0134\1\u0135\44\u0134\40\0\1\u0136\43\0\3\333"+
    "\1\u0137\2\0\35\333\1\167\44\333\2\0\76\333\55\0"+
    "\1\u0138\27\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\10\4\1\u0139\1\4\5\0\1\4\16\0\17\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\12\4\5\0"+
    "\1\4\16\0\3\4\1\u013a\1\4\1\u013b\1\u013c\10\4"+
    "\6\0\2\4\3\0\3\4\6\0\2\4\1\0\4\4"+
    "\1\u013d\5\4\5\0\1\4\16\0\17\4\6\0\2\4"+
    "\3\0\3\4\6\0\2\4\1\0\1\u013e\11\4\5\0"+
    "\1\4\16\0\17\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\12\4\5\0\1\4\16\0\2\4\1\u013f"+
    "\14\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\12\4\5\0\1\4\16\0\3\4\1\u0140\13\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\2\4\1\u0141"+
    "\1\u0142\1\4\1\u0143\4\4\5\0\1\4\16\0\3\4"+
    "\1\u0144\13\4\6\0\2\4\3\0\3\4\6\0\2\4"+
    "\1\0\1\u0145\5\4\1\u0146\3\4\5\0\1\4\16\0"+
    "\17\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\6\4\1\u0147\3\4\5\0\1\4\16\0\17\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\1\4\1\u0148"+
    "\10\4\5\0\1\4\16\0\17\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\1\4\1\u0149\10\4\5\0"+
    "\1\4\16\0\17\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\12\4\5\0\1\4\16\0\10\4\1\u014a"+
    "\6\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\12\4\5\0\1\4\16\0\1\u014b\16\4\6\0\2\4"+
    "\3\0\3\4\6\0\2\4\1\0\7\4\1\u014c\2\4"+
    "\5\0\1\4\16\0\17\4\6\0\2\4\3\0\3\4"+
    "\6\0\2\4\1\0\1\4\1\314\2\4\1\146\5\4"+
    "\5\0\1\4\16\0\17\4\6\0\2\4\3\0\3\4"+
    "\6\0\2\4\1\0\12\4\5\0\1\4\16\0\5\4"+
    "\1\u014d\11\4\6\0\2\4\3\0\3\4\6\0\2\4"+
    "\1\0\12\4\5\0\1\4\16\0\12\4\1\u014e\4\4"+
    "\6\0\2\4\3\0\3\4\6\0\2\4\1\0\12\4"+
    "\5\0\1\4\16\0\1\u014f\16\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\12\4\5\0\1\4\16\0"+
    "\3\4\1\361\13\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\12\4\5\0\1\4\16\0\7\4\1\u0150"+
    "\7\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\12\4\5\0\1\4\1\u0151\13\0\1\u0151\1\0\17\4"+
    "\6\0\2\4\3\0\3\4\6\0\2\4\1\0\12\4"+
    "\5\0\1\4\16\0\14\4\1\u0152\2\4\6\0\2\4"+
    "\3\0\3\4\6\0\2\4\1\0\3\4\1\u0153\6\4"+
    "\5\0\1\4\16\0\17\4\6\0\2\4\3\0\3\4"+
    "\6\0\2\4\1\0\1\4\1\u0154\6\4\1\u0155\1\4"+
    "\5\0\1\4\16\0\17\4\6\0\2\4\3\0\3\4"+
    "\6\0\2\4\1\0\5\4\1\u0156\2\4\1\u0157\1\4"+
    "\5\0\1\4\16\0\17\4\32\0\1\u0158\105\0\1\u0159"+
    "\104\0\1\u015a\103\0\1\u015b\75\0\1\u015c\103\0\1\u015d"+
    "\112\0\1\u015e\102\0\1\u015f\106\0\1\u0160\100\0\1\u0161"+
    "\76\0\1\u0162\103\0\1\u0163\143\0\1\u0164\22\0\1\u0165"+
    "\161\0\1\u0166\113\0\1\u0167\43\0\1\u0168\1\u0169\32\0"+
    "\1\u016a\1\0\1\u016b\1\0\1\u016c\4\0\1\u016d\10\0"+
    "\1\u016e\30\0\1\u016f\132\0\1\u0170\106\0\1\u0171\76\0"+
    "\1\u0172\112\0\1\u0173\16\0\1\u0174\22\0\1\u0175\143\0"+
    "\1\u0176\103\0\1\u0177\51\0\1\u0178\72\0\1\u0179\3\0"+
    "\1\u017a\56\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\12\4\5\0\1\4\16\0\12\4\1\u017b\4\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\6\4\1\u017c"+
    "\3\4\5\0\1\4\16\0\17\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\10\4\1\u017d\1\4\5\0"+
    "\1\4\16\0\17\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\1\u017e\11\4\5\0\1\4\16\0\17\4"+
    "\6\0\2\4\3\0\3\4\6\0\2\4\1\0\12\4"+
    "\5\0\1\4\16\0\2\4\1\u017f\14\4\6\0\2\4"+
    "\3\0\3\4\6\0\2\4\1\0\12\4\5\0\1\4"+
    "\1\u0180\13\0\1\u0180\1\0\17\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\7\4\1\146\2\4\5\0"+
    "\1\4\16\0\17\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\3\4\1\u0181\6\4\5\0\1\4\16\0"+
    "\17\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\12\4\5\0\1\4\16\0\2\4\1\u0182\1\u0183\1\4"+
    "\1\u0184\1\u0185\10\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\11\4\1\u0186\5\0\1\4\16\0\17\4"+
    "\6\0\2\4\3\0\3\4\6\0\2\4\1\0\12\4"+
    "\5\0\1\4\16\0\5\4\1\u0187\11\4\6\0\2\4"+
    "\3\0\3\4\6\0\2\4\1\0\10\4\1\u0188\1\4"+
    "\5\0\1\4\16\0\17\4\6\0\2\4\3\0\3\4"+
    "\6\0\2\4\1\0\12\4\5\0\1\4\16\0\5\4"+
    "\1\u0189\11\4\6\0\2\4\3\0\3\4\6\0\2\4"+
    "\1\0\12\4\5\0\1\4\16\0\1\u018a\16\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\12\4\5\0"+
    "\1\4\4\0\1\u018b\11\0\17\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\12\4\5\0\1\4\4\0"+
    "\1\u018c\11\0\17\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\1\u018d\11\4\5\0\1\4\16\0\17\4"+
    "\6\0\2\4\3\0\3\4\6\0\2\4\1\0\3\4"+
    "\1\u018e\6\4\5\0\1\4\16\0\17\4\12\0\1\324"+
    "\76\0\3\u0132\1\u018f\2\u0190\76\u0132\35\327\1\u0133\1\156"+
    "\45\327\35\u0134\1\u0191\46\u0134\55\0\1\u0192\27\0\2\4"+
    "\3\0\3\4\6\0\2\4\1\0\12\4\5\0\1\4"+
    "\4\0\1\u0193\11\0\17\4\6\0\2\4\3\0\3\4"+
    "\6\0\1\u0194\1\4\1\0\12\4\5\0\1\4\16\0"+
    "\4\4\1\u0195\12\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\10\4\1\u0196\1\4\5\0\1\4\16\0"+
    "\17\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\1\u0197\11\4\5\0\1\4\16\0\3\4\1\u013a\13\4"+
    "\6\0\2\4\3\0\3\4\6\0\2\4\1\0\12\4"+
    "\5\0\1\4\16\0\10\4\1\u0198\6\4\6\0\2\4"+
    "\3\0\3\4\6\0\2\4\1\0\1\4\1\u0199\10\4"+
    "\5\0\1\4\16\0\17\4\6\0\2\4\3\0\3\4"+
    "\6\0\2\4\1\0\6\4\1\u019a\3\4\5\0\1\4"+
    "\16\0\17\4\6\0\2\4\3\0\3\4\6\0\2\4"+
    "\1\0\5\4\1\u019b\4\4\5\0\1\4\16\0\17\4"+
    "\6\0\2\4\3\0\3\4\6\0\2\4\1\0\12\4"+
    "\5\0\1\4\16\0\2\4\1\u019c\14\4\6\0\2\4"+
    "\3\0\3\4\6\0\2\4\1\0\11\4\1\u019d\5\0"+
    "\1\4\16\0\17\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\6\4\1\u019e\3\4\5\0\1\4\16\0"+
    "\17\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\1\u019f\11\4\5\0\1\4\16\0\17\4\6\0\2\4"+
    "\3\0\3\4\6\0\2\4\1\0\1\4\1\u01a0\10\4"+
    "\5\0\1\4\16\0\17\4\6\0\2\4\3\0\3\4"+
    "\6\0\2\4\1\0\3\4\1\u01a1\6\4\5\0\1\4"+
    "\16\0\17\4\6\0\2\4\3\0\3\4\6\0\2\4"+
    "\1\0\5\4\1\u01a2\4\4\5\0\1\4\1\u01a3\13\0"+
    "\1\u01a3\1\0\17\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\5\4\1\u01a4\4\4\5\0\1\4\16\0"+
    "\17\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\12\4\5\0\1\4\16\0\5\4\1\u01a5\11\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\12\4\5\0"+
    "\1\4\16\0\2\4\1\u01a6\14\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\1\u01a7\11\4\5\0\1\4"+
    "\16\0\17\4\6\0\2\4\3\0\3\4\6\0\2\4"+
    "\1\0\5\4\1\u01a2\4\4\5\0\1\4\16\0\17\4"+
    "\6\0\2\4\3\0\3\4\6\0\2\4\1\0\1\314"+
    "\11\4\5\0\1\4\16\0\17\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\3\4\1\u01a8\4\4\1\371"+
    "\1\4\5\0\1\4\16\0\17\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\5\4\1\u01a2\4\4\5\0"+
    "\1\4\4\0\1\u01a9\11\0\3\4\1\u01aa\13\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\12\4\5\0"+
    "\1\4\16\0\3\4\1\u01ab\1\4\1\u01ac\1\u01ad\10\4"+
    "\6\0\2\4\3\0\3\4\6\0\2\4\1\0\6\4"+
    "\1\u01ae\3\4\5\0\1\4\16\0\17\4\6\0\2\4"+
    "\3\0\3\4\6\0\2\4\1\0\6\4\1\u01af\3\4"+
    "\5\0\1\4\16\0\17\4\6\0\2\4\3\0\3\4"+
    "\6\0\2\4\1\0\6\4\1\u01b0\3\4\5\0\1\4"+
    "\16\0\17\4\6\0\2\4\3\0\3\4\6\0\2\4"+
    "\1\0\11\4\1\u01b1\5\0\1\4\16\0\17\4\33\0"+
    "\1\u01b2\105\0\1\u01b3\104\0\1\u01b4\103\0\1\u01b5\75\0"+
    "\1\u01b6\111\0\1\u01b7\75\0\1\u01b8\3\0\1\u01b9\106\0"+
    "\1\u01ba\103\0\1\u01bb\134\0\1\u01bc\42\0\1\u01bd\144\0"+
    "\1\u01be\2\0\1\u01bf\101\0\1\u01c0\77\0\1\u01c1\55\0"+
    "\1\u01c2\75\0\1\u01c3\144\0\1\u01c4\76\0\1\u01c5\47\0"+
    "\1\u01c6\101\0\1\u01c7\144\0\1\u01c8\2\0\1\u01c9\47\0"+
    "\1\u01ca\101\0\1\u01cb\135\0\1\u01cc\1\u01cd\115\0\1\u01ce"+
    "\71\0\1\u01cf\103\0\1\u01d0\2\0\1\u01d1\45\0\1\u01d2"+
    "\103\0\1\u01d3\137\0\1\u01d4\43\0\1\u01d5\104\0\1\u01d6"+
    "\101\0\1\u01d7\61\0\2\4\3\0\3\4\6\0\2\4"+
    "\1\0\3\4\1\u01d8\4\4\1\u01d8\1\4\5\0\1\4"+
    "\16\0\17\4\6\0\2\4\3\0\3\4\6\0\2\4"+
    "\1\0\12\4\5\0\1\4\16\0\10\4\1\u01d9\6\4"+
    "\6\0\2\4\3\0\3\4\6\0\2\4\1\0\12\4"+
    "\5\0\1\4\16\0\3\4\1\u01da\13\4\6\0\2\4"+
    "\3\0\3\4\6\0\2\4\1\0\12\4\5\0\1\4"+
    "\16\0\12\4\1\u01db\4\4\6\0\2\4\3\0\3\4"+
    "\6\0\2\4\1\0\5\4\1\u01dc\4\4\5\0\1\4"+
    "\16\0\17\4\6\0\2\4\3\0\3\4\6\0\2\4"+
    "\1\0\11\4\1\u01dd\5\0\1\4\16\0\17\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\12\4\5\0"+
    "\1\4\16\0\4\4\1\u01de\12\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\10\4\1\u01df\1\4\5\0"+
    "\1\4\16\0\17\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\1\u01e0\11\4\5\0\1\4\16\0\3\4"+
    "\1\u0183\13\4\6\0\2\4\3\0\3\4\6\0\2\4"+
    "\1\0\12\4\5\0\1\4\16\0\1\u01e1\16\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\12\4\5\0"+
    "\1\4\16\0\3\4\1\u01e2\13\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\1\4\1\u01e3\10\4\5\0"+
    "\1\4\16\0\17\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\6\4\1\u01e4\3\4\5\0\1\4\16\0"+
    "\17\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\10\4\1\u01e5\1\4\5\0\1\4\16\0\17\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\10\4\1\u01e6"+
    "\1\4\5\0\1\4\16\0\17\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\11\4\1\u01e7\5\0\1\4"+
    "\16\0\17\4\5\0\3\u0132\1\u018f\1\u01e8\77\u0132\104\u0190"+
    "\35\u0134\1\u0191\1\u0135\45\u0134\1\0\2\4\3\0\3\4"+
    "\6\0\2\4\1\0\12\4\5\0\1\4\16\0\4\4"+
    "\1\u0195\12\4\6\0\2\4\3\0\3\4\6\0\2\4"+
    "\1\0\12\4\5\0\1\4\16\0\5\4\1\u01e9\11\4"+
    "\6\0\2\4\3\0\3\4\6\0\2\4\1\0\11\4"+
    "\1\u01ea\5\0\1\4\16\0\17\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\6\4\1\u01eb\3\4\5\0"+
    "\1\4\16\0\17\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\6\4\1\u01ec\3\4\5\0\1\4\16\0"+
    "\17\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\6\4\1\u01ed\3\4\5\0\1\4\16\0\17\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\12\4\5\0"+
    "\1\4\16\0\3\4\1\u01ee\13\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\12\4\5\0\1\4\16\0"+
    "\1\u01ef\16\4\6\0\2\4\3\0\3\4\6\0\2\4"+
    "\1\0\7\4\1\u01f0\2\4\5\0\1\4\16\0\17\4"+
    "\6\0\2\4\3\0\3\4\6\0\2\4\1\0\2\4"+
    "\1\u01f1\7\4\5\0\1\4\16\0\17\4\6\0\2\4"+
    "\3\0\3\4\6\0\2\4\1\0\12\4\5\0\1\4"+
    "\16\0\3\4\1\u01f2\13\4\6\0\2\4\3\0\3\4"+
    "\6\0\2\4\1\0\1\u01f3\11\4\5\0\1\4\16\0"+
    "\17\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\6\4\1\u01f4\3\4\5\0\1\4\16\0\17\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\6\4\1\u01f5"+
    "\3\4\5\0\1\4\16\0\17\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\3\4\1\u011a\6\4\5\0"+
    "\1\4\16\0\17\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\6\4\1\u01f6\3\4\5\0\1\4\16\0"+
    "\17\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\12\4\5\0\1\4\16\0\12\4\1\u01d8\4\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\12\4\5\0"+
    "\1\4\16\0\4\4\1\u01f7\12\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\12\4\5\0\1\4\16\0"+
    "\4\4\1\u01f8\12\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\10\4\1\u01f9\1\4\5\0\1\4\16\0"+
    "\17\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\1\u01fa\11\4\5\0\1\4\16\0\17\4\6\0\2\4"+
    "\3\0\3\4\6\0\2\4\1\0\12\4\1\0\1\u01fb"+
    "\3\0\1\4\16\0\17\4\6\0\2\4\3\0\3\4"+
    "\6\0\2\4\1\0\7\4\1\u01fc\2\4\5\0\1\4"+
    "\16\0\17\4\6\0\2\4\3\0\3\4\6\0\2\4"+
    "\1\0\5\4\1\u0156\4\4\5\0\1\4\16\0\17\4"+
    "\34\0\1\u01fd\105\0\1\u01fe\102\0\1\u01ff\102\0\1\u0200"+
    "\104\0\1\u0201\136\0\1\u0202\43\0\1\u0203\143\0\1\u01be"+
    "\102\0\1\u0204\44\0\1\u0205\140\0\1\u0206\53\0\1\u0207"+
    "\100\0\1\u0208\136\0\1\u0209\46\0\1\u020a\143\0\1\u01c8"+
    "\47\0\1\u020b\152\0\1\u020c\37\0\1\u020d\135\0\1\u020e"+
    "\102\0\1\u01d0\22\0\1\u0174\124\0\1\u020f\110\0\1\u0210"+
    "\133\0\1\u0211\53\0\1\u0212\77\0\1\u0213\60\0\2\4"+
    "\3\0\3\4\6\0\2\4\1\0\6\4\1\u0214\3\4"+
    "\5\0\1\4\16\0\17\4\6\0\2\4\3\0\3\4"+
    "\6\0\2\4\1\0\6\4\1\u0215\3\4\5\0\1\4"+
    "\16\0\17\4\6\0\2\4\3\0\3\4\6\0\2\4"+
    "\1\0\10\4\1\u0216\1\4\5\0\1\4\16\0\17\4"+
    "\6\0\2\4\3\0\3\4\6\0\2\4\1\0\12\4"+
    "\5\0\1\4\16\0\5\4\1\u0217\11\4\6\0\2\4"+
    "\3\0\3\4\6\0\2\4\1\0\11\4\1\u0218\5\0"+
    "\1\4\16\0\17\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\6\4\1\u0219\3\4\5\0\1\4\16\0"+
    "\17\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\5\4\1\u021a\4\4\5\0\1\4\16\0\17\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\1\u021b\11\4"+
    "\5\0\1\4\16\0\17\4\6\0\2\4\3\0\3\4"+
    "\6\0\2\4\1\0\6\4\1\u021c\3\4\5\0\1\4"+
    "\16\0\17\4\6\0\2\4\3\0\3\4\6\0\2\4"+
    "\1\0\12\4\5\0\1\4\16\0\1\u021d\16\4\5\0"+
    "\5\u0190\1\u0132\76\u0190\1\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\6\4\1\u021e\3\4\5\0\1\4\16\0"+
    "\17\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\12\4\5\0\1\4\16\0\5\4\1\u021e\11\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\12\4\5\0"+
    "\1\4\16\0\7\4\1\u021f\7\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\7\4\1\u0220\2\4\5\0"+
    "\1\4\16\0\17\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\5\4\1\u0221\4\4\5\0\1\4\16\0"+
    "\17\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\10\4\1\u0222\1\4\5\0\1\4\16\0\17\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\12\4\5\0"+
    "\1\4\16\0\10\4\1\u0223\6\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\7\4\1\u0224\2\4\5\0"+
    "\1\4\16\0\17\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\7\4\1\u0225\2\4\5\0\1\4\16\0"+
    "\17\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\12\4\5\0\1\4\16\0\5\4\1\u0226\11\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\12\4\5\0"+
    "\1\4\16\0\5\4\1\u0227\11\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\11\4\1\u0228\5\0\1\4"+
    "\16\0\17\4\6\0\2\4\3\0\3\4\6\0\2\4"+
    "\1\0\6\4\1\u0229\3\4\5\0\1\4\16\0\17\4"+
    "\35\0\1\u022a\103\0\1\u022b\104\0\1\u022c\100\0\1\u022d"+
    "\152\0\1\u022e\33\0\1\u022f\60\0\1\u0230\126\0\1\u0231"+
    "\105\0\1\u0232\56\0\1\u016e\163\0\1\u0233\106\0\1\u0234"+
    "\104\0\1\u0235\40\0\1\u0236\143\0\1\u0237\43\0\1\u0238"+
    "\143\0\1\u0239\21\0\2\4\3\0\3\4\6\0\2\4"+
    "\1\0\1\4\1\u023a\10\4\5\0\1\4\16\0\17\4"+
    "\6\0\2\4\3\0\3\4\6\0\2\4\1\0\2\4"+
    "\1\u023b\7\4\5\0\1\4\16\0\17\4\6\0\2\4"+
    "\3\0\3\4\6\0\2\4\1\0\12\4\5\0\1\4"+
    "\16\0\3\4\1\u023c\13\4\6\0\2\4\3\0\3\4"+
    "\6\0\2\4\1\0\6\4\1\u023d\3\4\5\0\1\4"+
    "\16\0\17\4\6\0\2\4\3\0\3\4\6\0\2\4"+
    "\1\0\12\4\5\0\1\4\16\0\5\4\1\u023d\11\4"+
    "\6\0\2\4\3\0\3\4\6\0\2\4\1\0\12\4"+
    "\5\0\1\4\16\0\7\4\1\u023e\7\4\6\0\2\4"+
    "\3\0\3\4\6\0\2\4\1\0\11\4\1\u023f\5\0"+
    "\1\4\16\0\17\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\5\4\1\u0240\4\4\5\0\1\4\16\0"+
    "\17\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\12\4\5\0\1\4\16\0\3\4\1\u0241\13\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\6\4\1\u014d"+
    "\3\4\5\0\1\4\16\0\17\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\6\4\1\u0242\3\4\5\0"+
    "\1\4\16\0\17\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\12\4\5\0\1\4\16\0\5\4\1\u0242"+
    "\11\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\12\4\5\0\1\4\16\0\7\4\1\u0243\7\4\36\0"+
    "\1\u0244\102\0\1\u0245\100\0\1\u0246\140\0\1\u0247\46\0"+
    "\1\u0248\100\0\1\u0249\111\0\1\u024a\103\0\1\u024b\141\0"+
    "\1\u024c\37\0\1\u024d\141\0\1\u024e\45\0\1\u024f\62\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\12\4\5\0"+
    "\1\4\16\0\3\4\1\u0250\13\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\12\4\5\0\1\4\16\0"+
    "\3\4\1\u0183\13\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\1\4\1\u0251\10\4\5\0\1\4\16\0"+
    "\17\4\6\0\2\4\3\0\3\4\6\0\1\u0194\1\4"+
    "\1\0\12\4\5\0\1\4\4\0\1\u0252\11\0\4\4"+
    "\1\u0195\12\4\6\0\2\4\3\0\3\4\6\0\2\4"+
    "\1\0\12\4\5\0\1\4\16\0\3\4\1\u01ab\13\4"+
    "\70\0\1\u0253\116\0\1\u0254\37\0\1\u0255\53\0\1\u0256"+
    "\134\0\1\u0257\140\0\1\u0258\46\0\1\u0259\134\0\1\u025a"+
    "\51\0\1\u025b\101\0\1\u020c\141\0\1\u025c\40\0\1\u025d"+
    "\110\0\1\u025e\76\0\1\u025f\145\0\1\u0260\44\0\1\u0261"+
    "\140\0\1\u0262\50\0\1\u0263\77\0\1\u0264\116\0\1\u0265"+
    "\127\0\1\u0266\106\0\1\u0267\100\0\1\u0268\56\0\1\u0269"+
    "\45\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[32776];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\1\1\1\11\2\1\1\11"+
    "\2\1\1\11\14\1\1\11\4\1\1\11\2\1\1\11"+
    "\6\1\1\11\11\1\3\11\1\1\1\11\3\1\2\11"+
    "\4\0\1\11\16\0\36\1\1\11\1\0\7\1\1\11"+
    "\2\1\4\11\1\1\3\11\1\0\2\1\1\11\1\1"+
    "\1\11\27\1\1\11\2\1\1\0\1\1\27\0\36\1"+
    "\1\11\1\0\2\1\1\0\3\11\35\1\15\0\1\1"+
    "\3\0\1\1\4\0\1\1\4\0\11\1\1\11\7\1"+
    "\1\11\2\1\2\11\2\1\1\0\1\1\1\0\1\1"+
    "\2\11\32\1\1\11\6\1\6\0\1\1\1\11\2\0"+
    "\1\11\30\0\5\1\1\11\12\1\2\11\4\1\1\0"+
    "\2\11\17\1\1\11\5\1\1\11\10\1\2\0\2\11"+
    "\1\0\1\11\2\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\7\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\1\5\0\43\1\1\11\1\1"+
    "\1\0\2\11\2\0\1\11\2\0\1\11\1\0\1\1"+
    "\1\11\2\0\1\1\1\11\7\0\26\1\1\11\1\0"+
    "\1\11\1\0\1\11\3\0\1\11\7\0\12\1\3\11"+
    "\1\0\1\11\1\0\1\11\5\0\2\1\3\0\1\11"+
    "\6\0\1\1\3\11\3\0\1\11\2\0\1\11\2\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[617];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  // Not sure if needed:
  StringBuffer string = new StringBuffer();

  // Placeholders for line and column information:
  private int yyline;
  private int yycolumn;

  public int getYyline() { return yyline; }
  public int getYycolumn() { return yycolumn; }



  public ATSLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ATSLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1624) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch ((zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL] : zzBufferL.charAt(zzCurrentPosL))) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = (zzBufferArrayL != null ? zzBufferArrayL[zzMarkedPosL] : zzBufferL.charAt(zzMarkedPosL)) == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = (zzBufferArrayL != null ? zzBufferArrayL[zzMarkedPosL] : zzBufferL.charAt(zzMarkedPosL)) == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 164: 
          { return ATSTokenTypes.DLRMYFUNCTION;
          }
        case 166: break;
        case 150: 
          { return ATSTokenTypes.DATATYPE;
          }
        case 167: break;
        case 116: 
          { return ATSTokenTypes.DLRBREAK;
          }
        case 168: break;
        case 80: 
          { return ATSTokenTypes.VAR;
          }
        case 169: break;
        case 138: 
          { return ATSTokenTypes.SORTDEF;
          }
        case 170: break;
        case 28: 
          { return ATSTokenTypes.RBRACKET;
          }
        case 171: break;
        case 42: 
          { return ATSTokenTypes.COMMENT_BLOCK;
          }
        case 172: break;
        case 14: 
          { return ATSTokenTypes.STRING;
          }
        case 173: break;
        case 41: 
          { return ATSTokenTypes.COMMENT_LINE;
          }
        case 174: break;
        case 26: 
          { return ATSTokenTypes.COMMA;
          }
        case 175: break;
        case 135: 
          { return ATSTokenTypes.DYNLOAD;
          }
        case 176: break;
        case 16: 
          { return ATSTokenTypes.LBRACKET;
          }
        case 177: break;
        case 109: 
          { return ATSTokenTypes.SRPIFDEF;
          }
        case 178: break;
        case 115: 
          { return ATSTokenTypes.DLRRAISE;
          }
        case 179: break;
        case 140: 
          { return ATSTokenTypes.SYMINTR;
          }
        case 180: break;
        case 15: 
          { return ATSTokenTypes.CHAR;
          }
        case 181: break;
        case 125: 
          { return ATSTokenTypes.STATIC;
          }
        case 182: break;
        case 161: 
          { return ATSTokenTypes.DLRVCOPYENV;
          }
        case 183: break;
        case 48: 
          { return ATSTokenTypes.QUOTELBRACKET;
          }
        case 184: break;
        case 60: 
          { return ATSTokenTypes.MINUSGT;
          }
        case 185: break;
        case 165: 
          { return ATSTokenTypes.DLREXTYPE_STRUCT;
          }
        case 186: break;
        case 22: 
          { return ATSTokenTypes.LT;
          }
        case 187: break;
        case 127: 
          { return ATSTokenTypes.MACDEF;
          }
        case 188: break;
        case 35: 
          { return ATSTokenTypes.IN;
          }
        case 189: break;
        case 18: 
          { return ATSTokenTypes.BANG;
          }
        case 190: break;
        case 160: 
          { return ATSTokenTypes.DLRTEMPENVER;
          }
        case 191: break;
        case 49: 
          { return ATSTokenTypes.ATLBRACE;
          }
        case 192: break;
        case 156: 
          { return ATSTokenTypes.DLREXTMCALL;
          }
        case 193: break;
        case 46: 
          { return ATSTokenTypes.QUOTELBRACE;
          }
        case 194: break;
        case 137: 
          { return ATSTokenTypes.ABSTYPE;
          }
        case 195: break;
        case 73: 
          { return ATSTokenTypes.EQLTGT;
          }
        case 196: break;
        case 58: 
          { return ATSTokenTypes.GTDOT;
          }
        case 197: break;
        case 63: 
          { return ATSTokenTypes.REF_IDENTIFIER;
          }
        case 198: break;
        case 25: 
          { return ATSTokenTypes.TILDE;
          }
        case 199: break;
        case 20: 
          { return ATSTokenTypes.BQUOTE;
          }
        case 200: break;
        case 67: 
          { return ATSTokenTypes.LAM;
          }
        case 201: break;
        case 34: 
          { return ATSTokenTypes.HASHLBRACKETOLON;
          }
        case 202: break;
        case 51: 
          { return ATSTokenTypes.ATLBRACKET;
          }
        case 203: break;
        case 9: 
          { return ATSTokenTypes.DOLLAR;
          }
        case 204: break;
        case 122: 
          { return ATSTokenTypes.ASSUME;
          }
        case 205: break;
        case 77: 
          { return ATSTokenTypes.SIF;
          }
        case 206: break;
        case 99: 
          { return ATSTokenTypes.FREEAT;
          }
        case 207: break;
        case 82: 
          { return ATSTokenTypes.DLRREC;
          }
        case 208: break;
        case 57: 
          { return ATSTokenTypes.EQGT;
          }
        case 209: break;
        case 130: 
          { return ATSTokenTypes.SRPASSERT;
          }
        case 210: break;
        case 100: 
          { return ATSTokenTypes.FOLDAT;
          }
        case 211: break;
        case 85: 
          { return ATSTokenTypes.ELSE;
          }
        case 212: break;
        case 95: 
          { return ATSTokenTypes.SRPELSE;
          }
        case 213: break;
        case 70: 
          { return ATSTokenTypes.REC;
          }
        case 214: break;
        case 94: 
          { return ATSTokenTypes.SRPELIF;
          }
        case 215: break;
        case 133: 
          { return ATSTokenTypes.DLREXTVAL;
          }
        case 216: break;
        case 29: 
          { return ATSTokenTypes.QMARK;
          }
        case 217: break;
        case 117: 
          { return ATSTokenTypes.IMPORT;
          }
        case 218: break;
        case 147: 
          { return ATSTokenTypes.DLREXTKIND;
          }
        case 219: break;
        case 78: 
          { return ATSTokenTypes.TRY;
          }
        case 220: break;
        case 104: 
          { return ATSTokenTypes.BEGIN;
          }
        case 221: break;
        case 97: 
          { return ATSTokenTypes.FIXITY;
          }
        case 222: break;
        case 33: 
          { return ATSTokenTypes.PERCENTLPAREN;
          }
        case 223: break;
        case 139: 
          { return ATSTokenTypes.STALOAD;
          }
        case 224: break;
        case 1: 
          { return ATSTokenTypes.BAD_CHARACTER;
          }
        case 225: break;
        case 151: 
          { return ATSTokenTypes.OVERLOAD;
          }
        case 226: break;
        case 155: 
          { return ATSTokenTypes.DLREXTFCALL;
          }
        case 227: break;
        case 119: 
          { return ATSTokenTypes.EXTERN;
          }
        case 228: break;
        case 129: 
          { return ATSTokenTypes.SRPDEFINE;
          }
        case 229: break;
        case 5: 
          { return ATSTokenTypes.INT;
          }
        case 230: break;
        case 71: 
          { return ATSTokenTypes.COMMENT;
          }
        case 231: break;
        case 121: 
          { return ATSTokenTypes.EXTVAR;
          }
        case 232: break;
        case 90: 
          { return ATSTokenTypes.TYPE;
          }
        case 233: break;
        case 152: 
          { return ATSTokenTypes.WITHTYPE;
          }
        case 234: break;
        case 124: 
          { return ATSTokenTypes.STADEF;
          }
        case 235: break;
        case 106: 
          { return ATSTokenTypes.VIEWAT;
          }
        case 236: break;
        case 81: 
          { return ATSTokenTypes.DLRLST;
          }
        case 237: break;
        case 50: 
          { return ATSTokenTypes.ATLPAREN;
          }
        case 238: break;
        case 47: 
          { return ATSTokenTypes.QUOTELPAREN;
          }
        case 239: break;
        case 120: 
          { return ATSTokenTypes.EXTYPE;
          }
        case 240: break;
        case 84: 
          { return ATSTokenTypes.CASE;
          }
        case 241: break;
        case 98: 
          { return ATSTokenTypes.LOCAL;
          }
        case 242: break;
        case 4: 
          { return ATSTokenTypes.WHITE_SPACE;
          }
        case 243: break;
        case 79: 
          { return ATSTokenTypes.VAL;
          }
        case 244: break;
        case 83: 
          { return ATSTokenTypes.DLRTUP;
          }
        case 245: break;
        case 75: 
          { return ATSTokenTypes.MINUSLTGT;
          }
        case 246: break;
        case 126: 
          { return ATSTokenTypes.WHILESTAR;
          }
        case 247: break;
        case 10: 
          { return ATSTokenTypes.RBRACE;
          }
        case 248: break;
        case 157: 
          { return ATSTokenTypes.DLRSHOWTYPE;
          }
        case 249: break;
        case 118: 
          { return ATSTokenTypes.NONFIX;
          }
        case 250: break;
        case 2: 
          { return ATSTokenTypes.IDENTIFIER;
          }
        case 251: break;
        case 3: 
          { return ATSTokenTypes.BACKSLASH;
          }
        case 252: break;
        case 148: 
          { return ATSTokenTypes.CLASSDEC;
          }
        case 253: break;
        case 65: 
          { return ATSTokenTypes.DLREFFMASK_ARG;
          }
        case 254: break;
        case 114: 
          { return ATSTokenTypes.DLRDELAY;
          }
        case 255: break;
        case 54: 
          { return ATSTokenTypes.COLONLT;
          }
        case 256: break;
        case 27: 
          { return ATSTokenTypes.SEMICOLON;
          }
        case 257: break;
        case 43: 
          { return ATSTokenTypes.DOTINT;
          }
        case 258: break;
        case 107: 
          { return ATSTokenTypes.WHILE;
          }
        case 259: break;
        case 59: 
          { return ATSTokenTypes.MINUSLT;
          }
        case 260: break;
        case 158: 
          { return ATSTokenTypes.IMPLEMENT;
          }
        case 261: break;
        case 145: 
          { return ATSTokenTypes.SRPELIFDEF;
          }
        case 262: break;
        case 91: 
          { return ATSTokenTypes.THEN;
          }
        case 263: break;
        case 7: 
          { return ATSTokenTypes.LBRACE;
          }
        case 264: break;
        case 6: 
          { return ATSTokenTypes.PERCENT;
          }
        case 265: break;
        case 96: 
          { return ATSTokenTypes.SRPTHEN;
          }
        case 266: break;
        case 37: 
          { return ATSTokenTypes.DO;
          }
        case 267: break;
        case 74: 
          { return ATSTokenTypes.EQGTGT;
          }
        case 268: break;
        case 66: 
          { return ATSTokenTypes.LET;
          }
        case 269: break;
        case 105: 
          { return ATSTokenTypes.SCASE;
          }
        case 270: break;
        case 108: 
          { return ATSTokenTypes.WHERE;
          }
        case 271: break;
        case 30: 
          { return ATSTokenTypes.CRLF;
          }
        case 272: break;
        case 102: 
          { return ATSTokenTypes.EQSLASHEQGTGT;
          }
        case 273: break;
        case 112: 
          { return ATSTokenTypes.SRPERROR;
          }
        case 274: break;
        case 52: 
          { return ATSTokenTypes.VAL_IDENTIFIER;
          }
        case 275: break;
        case 19: 
          { return ATSTokenTypes.BAR;
          }
        case 276: break;
        case 64: 
          { return ATSTokenTypes.SRPIF;
          }
        case 277: break;
        case 38: 
          { return ATSTokenTypes.FUN;
          }
        case 278: break;
        case 163: 
          { return ATSTokenTypes.DLRMYFILENAME;
          }
        case 279: break;
        case 24: 
          { return ATSTokenTypes.GT;
          }
        case 280: break;
        case 146: 
          { return ATSTokenTypes.DLREFFMASK;
          }
        case 281: break;
        case 159: 
          { return ATSTokenTypes.EXCEPTION;
          }
        case 282: break;
        case 88: 
          { return ATSTokenTypes.DOTLTGTDOT;
          }
        case 283: break;
        case 128: 
          { return ATSTokenTypes.SRPIFNDEF;
          }
        case 284: break;
        case 31: 
          { return ATSTokenTypes.FLOAT;
          }
        case 285: break;
        case 56: 
          { return ATSTokenTypes.EQLT;
          }
        case 286: break;
        case 17: 
          { return ATSTokenTypes.AT;
          }
        case 287: break;
        case 39: 
          { return ATSTokenTypes.OF;
          }
        case 288: break;
        case 101: 
          { return ATSTokenTypes.COMMENT_REST;
          }
        case 289: break;
        case 93: 
          { return ATSTokenTypes.WHEN;
          }
        case 290: break;
        case 62: 
          { return ATSTokenTypes.COMMALPAREN;
          }
        case 291: break;
        case 111: 
          { return ATSTokenTypes.SRPENDIF;
          }
        case 292: break;
        case 53: 
          { return ATSTokenTypes.BQUOTELPAREN;
          }
        case 293: break;
        case 144: 
          { return ATSTokenTypes.SRPINCLUDE;
          }
        case 294: break;
        case 36: 
          { return ATSTokenTypes.IF;
          }
        case 295: break;
        case 141: 
          { return ATSTokenTypes.SYMELIM;
          }
        case 296: break;
        case 143: 
          { return ATSTokenTypes.TKINDEF;
          }
        case 297: break;
        case 13: 
          { return ATSTokenTypes.DOT;
          }
        case 298: break;
        case 113: 
          { return ATSTokenTypes.SRPPRINT;
          }
        case 299: break;
        case 21: 
          { return ATSTokenTypes.COLON;
          }
        case 300: break;
        case 61: 
          { return ATSTokenTypes.AS;
          }
        case 301: break;
        case 55: 
          { return ATSTokenTypes.GTLT;
          }
        case 302: break;
        case 131: 
          { return ATSTokenTypes.DLREXTERN;
          }
        case 303: break;
        case 142: 
          { return ATSTokenTypes.TYPEDEF;
          }
        case 304: break;
        case 92: 
          { return ATSTokenTypes.WITH;
          }
        case 305: break;
        case 8: 
          { return ATSTokenTypes.HASH;
          }
        case 306: break;
        case 153: 
          { return ATSTokenTypes.SRPELIFNDEF;
          }
        case 307: break;
        case 68: 
          { return ATSTokenTypes.END;
          }
        case 308: break;
        case 103: 
          { return ATSTokenTypes.ADDRAT;
          }
        case 309: break;
        case 45: 
          { return ATSTokenTypes.DOTLT;
          }
        case 310: break;
        case 87: 
          { return ATSTokenTypes.REFAT;
          }
        case 311: break;
        case 32: 
          { return ATSTokenTypes.EXTCODE;
          }
        case 312: break;
        case 134: 
          { return ATSTokenTypes.DLRARRPSZ;
          }
        case 313: break;
        case 110: 
          { return ATSTokenTypes.SRPUNDEF;
          }
        case 314: break;
        case 11: 
          { return ATSTokenTypes.RPAREN;
          }
        case 315: break;
        case 149: 
          { return ATSTokenTypes.DATASORT;
          }
        case 316: break;
        case 154: 
          { return ATSTokenTypes.DLRCONTINUE;
          }
        case 317: break;
        case 86: 
          { return ATSTokenTypes.FORSTAR;
          }
        case 318: break;
        case 132: 
          { return ATSTokenTypes.DLREXTYPE;
          }
        case 319: break;
        case 162: 
          { return ATSTokenTypes.DLRMYLOCATION;
          }
        case 320: break;
        case 40: 
          { return ATSTokenTypes.OP;
          }
        case 321: break;
        case 23: 
          { return ATSTokenTypes.EQ;
          }
        case 322: break;
        case 12: 
          { return ATSTokenTypes.LPAREN;
          }
        case 323: break;
        case 123: 
          { return ATSTokenTypes.STACST;
          }
        case 324: break;
        case 89: 
          { return ATSTokenTypes.EQSLASHEQGT;
          }
        case 325: break;
        case 76: 
          { return ATSTokenTypes.AND;
          }
        case 326: break;
        case 44: 
          { return ATSTokenTypes.DOTDOT;
          }
        case 327: break;
        case 136: 
          { return ATSTokenTypes.REQUIRE;
          }
        case 328: break;
        case 69: 
          { return ATSTokenTypes.FIX;
          }
        case 329: break;
        case 72: 
          { return ATSTokenTypes.DOTDOTDOT;
          }
        case 330: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
