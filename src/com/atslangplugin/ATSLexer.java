/* The following code was generated by JFlex 1.4.3 on 12/23/14 5:58 PM */

package com.atslangplugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.atslangplugin.ATSTokenTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/23/14 5:58 PM from the specification file
 * <tt>C:/cygwin64/home/brand_000/IntelliJATS/src/com/atslangplugin/ATS.flex</tt>
 */
public class ATSLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int PRAGMA = 6;
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int PRE = 4;
  public static final int DEFINE_CONTINUATION = 10;
  public static final int CONTINUATION = 12;
  public static final int DEFINE = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\13\1\5\1\0\1\13\1\4\22\0\1\13\1\42\1\36"+
    "\1\51\1\46\1\77\1\0\1\35\1\31\1\30\1\27\1\34\1\73"+
    "\1\52\1\32\1\26\1\11\7\7\2\6\1\44\1\74\1\45\1\47"+
    "\1\50\1\100\1\41\4\10\1\33\1\10\21\1\1\12\2\1\1\37"+
    "\1\3\1\75\1\0\1\2\1\43\1\54\1\55\1\16\1\21\1\22"+
    "\1\23\1\65\1\70\1\14\1\1\1\71\1\17\1\64\1\15\1\25"+
    "\1\61\1\67\1\24\1\56\1\57\1\20\1\62\1\63\1\66\1\60"+
    "\1\72\1\40\1\0\1\76\1\53\53\0\1\1\12\0\1\1\4\0"+
    "\1\1\5\0\27\1\1\0\37\1\1\0\u01ca\1\4\0\14\1\16\0"+
    "\5\1\7\0\1\1\1\0\1\1\201\0\5\1\1\0\2\1\2\0"+
    "\4\1\10\0\1\1\1\0\3\1\1\0\1\1\1\0\24\1\1\0"+
    "\123\1\1\0\213\1\10\0\236\1\11\0\46\1\2\0\1\1\7\0"+
    "\47\1\110\0\33\1\5\0\3\1\55\0\53\1\43\0\2\1\1\0"+
    "\143\1\1\0\1\1\17\0\2\1\7\0\2\1\12\0\3\1\2\0"+
    "\1\1\20\0\1\1\1\0\36\1\35\0\131\1\13\0\1\1\30\0"+
    "\41\1\11\0\2\1\4\0\1\1\5\0\26\1\4\0\1\1\11\0"+
    "\1\1\3\0\1\1\27\0\31\1\107\0\1\1\1\0\13\1\127\0"+
    "\66\1\3\0\1\1\22\0\1\1\7\0\12\1\17\0\7\1\1\0"+
    "\7\1\5\0\10\1\2\0\2\1\2\0\26\1\1\0\7\1\1\0"+
    "\1\1\3\0\4\1\3\0\1\1\20\0\1\1\15\0\2\1\1\0"+
    "\3\1\16\0\2\1\23\0\6\1\4\0\2\1\2\0\26\1\1\0"+
    "\7\1\1\0\2\1\1\0\2\1\1\0\2\1\37\0\4\1\1\0"+
    "\1\1\23\0\3\1\20\0\11\1\1\0\3\1\1\0\26\1\1\0"+
    "\7\1\1\0\2\1\1\0\5\1\3\0\1\1\22\0\1\1\17\0"+
    "\2\1\43\0\10\1\2\0\2\1\2\0\26\1\1\0\7\1\1\0"+
    "\2\1\1\0\5\1\3\0\1\1\36\0\2\1\1\0\3\1\17\0"+
    "\1\1\21\0\1\1\1\0\6\1\3\0\3\1\1\0\4\1\3\0"+
    "\2\1\1\0\1\1\1\0\2\1\3\0\2\1\3\0\3\1\3\0"+
    "\14\1\26\0\1\1\64\0\10\1\1\0\3\1\1\0\27\1\1\0"+
    "\12\1\1\0\5\1\3\0\1\1\32\0\2\1\6\0\2\1\43\0"+
    "\10\1\1\0\3\1\1\0\27\1\1\0\12\1\1\0\5\1\3\0"+
    "\1\1\40\0\1\1\1\0\2\1\17\0\2\1\22\0\10\1\1\0"+
    "\3\1\1\0\51\1\2\0\1\1\20\0\1\1\21\0\2\1\30\0"+
    "\6\1\5\0\22\1\3\0\30\1\1\0\11\1\1\0\1\1\2\0"+
    "\7\1\72\0\60\1\1\0\2\1\14\0\7\1\72\0\2\1\1\0"+
    "\1\1\2\0\2\1\1\0\1\1\2\0\1\1\6\0\4\1\1\0"+
    "\7\1\1\0\3\1\1\0\1\1\1\0\1\1\2\0\2\1\1\0"+
    "\4\1\1\0\2\1\11\0\1\1\2\0\5\1\1\0\1\1\25\0"+
    "\4\1\40\0\1\1\77\0\10\1\1\0\44\1\33\0\5\1\163\0"+
    "\53\1\24\0\1\1\20\0\6\1\4\0\4\1\3\0\1\1\3\0"+
    "\2\1\7\0\3\1\4\0\15\1\14\0\1\1\21\0\46\1\1\0"+
    "\1\1\5\0\1\1\2\0\53\1\1\0\u014d\1\1\0\4\1\2\0"+
    "\7\1\1\0\1\1\1\0\4\1\2\0\51\1\1\0\4\1\2\0"+
    "\41\1\1\0\4\1\2\0\7\1\1\0\1\1\1\0\4\1\2\0"+
    "\17\1\1\0\71\1\1\0\4\1\2\0\103\1\45\0\20\1\20\0"+
    "\125\1\14\0\u026c\1\2\0\21\1\1\0\32\1\5\0\113\1\25\0"+
    "\15\1\1\0\4\1\16\0\22\1\16\0\22\1\16\0\15\1\1\0"+
    "\3\1\17\0\64\1\43\0\1\1\4\0\1\1\103\0\130\1\10\0"+
    "\51\1\1\0\1\1\5\0\106\1\12\0\35\1\63\0\36\1\2\0"+
    "\5\1\13\0\54\1\25\0\7\1\70\0\27\1\11\0\65\1\122\0"+
    "\1\1\135\0\57\1\21\0\7\1\67\0\36\1\15\0\2\1\12\0"+
    "\54\1\32\0\44\1\51\0\3\1\12\0\44\1\153\0\4\1\1\0"+
    "\4\1\3\0\2\1\11\0\300\1\100\0\u0116\1\2\0\6\1\2\0"+
    "\46\1\2\0\6\1\2\0\10\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\37\1\2\0\65\1\1\0\7\1\1\0\1\1\3\0"+
    "\3\1\1\0\7\1\3\0\4\1\2\0\6\1\4\0\15\1\5\0"+
    "\3\1\1\0\7\1\164\0\1\1\15\0\1\1\20\0\15\1\145\0"+
    "\1\1\4\0\1\1\2\0\12\1\1\0\1\1\3\0\5\1\6\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\4\1\1\0\13\1\2\0"+
    "\4\1\5\0\5\1\4\0\1\1\64\0\2\1\u0a7b\0\57\1\1\0"+
    "\57\1\1\0\205\1\6\0\4\1\3\0\2\1\14\0\46\1\1\0"+
    "\1\1\5\0\1\1\2\0\70\1\7\0\1\1\20\0\27\1\11\0"+
    "\7\1\1\0\7\1\1\0\7\1\1\0\7\1\1\0\7\1\1\0"+
    "\7\1\1\0\7\1\1\0\7\1\120\0\1\1\u01d5\0\2\1\52\0"+
    "\5\1\5\0\2\1\4\0\126\1\6\0\3\1\1\0\132\1\1\0"+
    "\4\1\5\0\51\1\3\0\136\1\21\0\33\1\65\0\20\1\u0200\0"+
    "\u19b6\1\112\0\u51cd\1\63\0\u048d\1\103\0\56\1\2\0\u010d\1\3\0"+
    "\20\1\12\0\2\1\24\0\57\1\20\0\31\1\10\0\106\1\61\0"+
    "\11\1\2\0\147\1\2\0\4\1\1\0\4\1\14\0\13\1\115\0"+
    "\12\1\1\0\3\1\1\0\4\1\1\0\27\1\35\0\64\1\16\0"+
    "\62\1\76\0\6\1\3\0\1\1\16\0\34\1\12\0\27\1\31\0"+
    "\35\1\7\0\57\1\34\0\1\1\60\0\51\1\27\0\3\1\1\0"+
    "\10\1\24\0\27\1\3\0\1\1\5\0\60\1\1\0\1\1\3\0"+
    "\2\1\2\0\5\1\2\0\1\1\1\0\1\1\30\0\3\1\2\0"+
    "\13\1\7\0\3\1\14\0\6\1\2\0\6\1\2\0\6\1\11\0"+
    "\7\1\1\0\7\1\221\0\43\1\35\0\u2ba4\1\14\0\27\1\4\0"+
    "\61\1\u2104\0\u016e\1\2\0\152\1\46\0\7\1\14\0\5\1\5\0"+
    "\1\1\1\0\12\1\1\0\15\1\1\0\5\1\1\0\1\1\1\0"+
    "\2\1\1\0\2\1\1\0\154\1\41\0\u016b\1\22\0\100\1\2\0"+
    "\66\1\50\0\14\1\164\0\5\1\1\0\207\1\44\0\32\1\6\0"+
    "\32\1\13\0\131\1\3\0\6\1\2\0\6\1\2\0\6\1\2\0"+
    "\3\1\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\1\5\1\6\2\7\11\4"+
    "\2\3\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\3\1\30\10\4\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\3\37\2\7\1\40\1\41\11\4\1\42"+
    "\6\4\1\43\4\4\1\44\1\45\1\4\1\46\1\47"+
    "\1\0\1\50\1\51\1\52\1\14\1\13\1\53\1\13"+
    "\1\54\1\55\2\14\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\14\0\1\64\1\65\1\66\4\0\1\67\3\0"+
    "\1\70\1\71\4\4\1\72\22\4\1\73\1\74\1\37"+
    "\3\4\1\75\3\4\1\76\1\4\1\77\2\4\1\100"+
    "\3\4\1\101\1\43\3\4\1\102\1\75\2\4\3\46"+
    "\1\47\1\103\1\104\1\0\1\13\1\14\17\0\1\105"+
    "\1\106\1\0\1\107\10\0\1\110\1\111\4\4\1\112"+
    "\4\4\1\113\14\4\1\114\1\115\11\4\1\116\1\4"+
    "\1\77\1\4\1\77\2\4\1\117\4\4\1\101\2\4"+
    "\1\120\1\121\2\4\1\0\1\46\1\0\2\103\1\122"+
    "\1\13\1\0\1\123\3\0\1\124\4\0\1\125\3\0"+
    "\1\126\14\0\16\4\1\127\1\130\10\4\1\114\1\131"+
    "\1\4\1\132\3\4\1\133\4\4\1\116\1\134\11\4"+
    "\1\135\1\136\2\4\1\46\1\137\27\0\1\140\6\0"+
    "\1\141\1\142\2\0\1\143\1\0\1\144\5\4\1\145"+
    "\1\146\10\4\1\127\4\4\1\114\1\147\4\4\1\150"+
    "\1\151\2\4\1\133\1\4\1\152\1\153\7\4\1\154"+
    "\1\155\1\156\2\4\1\137\1\0\1\123\1\0\1\157"+
    "\7\0\1\124\2\0\1\160\2\0\1\161\1\0\1\125"+
    "\1\0\1\125\6\0\1\162\1\163\1\0\1\164\2\0"+
    "\1\165\1\0\1\166\3\4\1\167\1\4\1\170\1\4"+
    "\1\171\1\172\4\4\1\116\4\4\1\173\1\174\6\4"+
    "\1\175\1\4\1\176\1\4\2\0\1\177\1\0\1\200"+
    "\1\201\2\0\1\124\1\202\7\0\1\203\1\204\2\0"+
    "\1\205\2\206\1\207\1\210\1\211\1\212\1\213\1\214"+
    "\5\4\1\215\1\216\2\217\1\4\1\220\1\0\1\221"+
    "\3\0\1\222\6\0\1\223\1\0\1\224\1\4\2\225"+
    "\1\226\1\227\1\230\1\231\1\0\1\232\1\0\1\233"+
    "\4\0\1\234\11\0\1\235\1\236\1\237\1\240\3\0"+
    "\1\206\2\0\1\241\2\0\1\235";

  private static int [] zzUnpackAction() {
    int [] result = new int[601];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\202\0\202\0\u0104\0\u0145"+
    "\0\u0186\0\u01c7\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c\0\u034d"+
    "\0\u038e\0\u03cf\0\u0410\0\202\0\u0451\0\u0492\0\u04d3\0\u0514"+
    "\0\202\0\202\0\u0555\0\202\0\u0596\0\u05d7\0\u0618\0\u0659"+
    "\0\u069a\0\u06db\0\u071c\0\u075d\0\202\0\u079e\0\u07df\0\u0820"+
    "\0\u0861\0\u08a2\0\u08e3\0\u0924\0\u0965\0\u09a6\0\202\0\202"+
    "\0\202\0\u09e7\0\202\0\u0a28\0\u0a69\0\u0aaa\0\u0aeb\0\u0b2c"+
    "\0\u0b6d\0\303\0\u0bae\0\u0bef\0\u0c30\0\u0c71\0\u0cb2\0\u0cf3"+
    "\0\u0d34\0\u0d75\0\u0db6\0\303\0\u0df7\0\u0e38\0\u0e79\0\u0eba"+
    "\0\u0efb\0\u0f3c\0\u0f7d\0\u0fbe\0\u0fff\0\u1040\0\u1081\0\303"+
    "\0\303\0\u10c2\0\u1103\0\202\0\u1144\0\u1185\0\u11c6\0\u1207"+
    "\0\u1248\0\u1289\0\u1248\0\202\0\u1248\0\u1248\0\u12ca\0\202"+
    "\0\202\0\202\0\202\0\202\0\202\0\202\0\u130b\0\u134c"+
    "\0\u138d\0\u13ce\0\u140f\0\u1450\0\u1491\0\u14d2\0\u1513\0\u1554"+
    "\0\u1595\0\u15d6\0\u1617\0\u1658\0\202\0\u1699\0\u16da\0\u171b"+
    "\0\u175c\0\202\0\u179d\0\u17de\0\u181f\0\u1860\0\202\0\u18a1"+
    "\0\u18e2\0\u1923\0\u1964\0\u19a5\0\u19e6\0\u1a27\0\u1a68\0\u1aa9"+
    "\0\u1aea\0\u1b2b\0\u1b6c\0\u1bad\0\u1bee\0\u1c2f\0\u1c70\0\u1cb1"+
    "\0\u1cf2\0\u1d33\0\u1d74\0\u1db5\0\u1df6\0\u1e37\0\202\0\202"+
    "\0\u1e78\0\u1eb9\0\u1efa\0\u1f3b\0\303\0\u1f7c\0\u1fbd\0\u1ffe"+
    "\0\303\0\u203f\0\u2080\0\u20c1\0\u2102\0\303\0\u2143\0\u2184"+
    "\0\u21c5\0\u2206\0\303\0\u2247\0\u2288\0\u22c9\0\303\0\u230a"+
    "\0\u234b\0\u238c\0\u23cd\0\u240e\0\u244f\0\u2490\0\u24d1\0\202"+
    "\0\u2512\0\u2553\0\u2594\0\u25d5\0\u2616\0\u2657\0\u2698\0\u26d9"+
    "\0\u271a\0\u275b\0\u279c\0\u27dd\0\u281e\0\u285f\0\u28a0\0\u28e1"+
    "\0\u2922\0\u2963\0\202\0\202\0\u29a4\0\u29e5\0\u2a26\0\u2a67"+
    "\0\u2aa8\0\u2ae9\0\u2b2a\0\u2b6b\0\u2bac\0\u2bed\0\202\0\303"+
    "\0\u2c2e\0\u2c6f\0\u2cb0\0\u2cf1\0\303\0\u2d32\0\u2d73\0\u2db4"+
    "\0\u2df5\0\303\0\u2e36\0\u2e77\0\u2eb8\0\u2ef9\0\u2f3a\0\u2f7b"+
    "\0\u2fbc\0\u2ffd\0\u303e\0\u307f\0\u30c0\0\u3101\0\u3142\0\303"+
    "\0\u3183\0\u31c4\0\u3205\0\u3246\0\u3287\0\u32c8\0\u3309\0\u334a"+
    "\0\u338b\0\u33cc\0\u340d\0\303\0\u344e\0\202\0\u348f\0\u34d0"+
    "\0\303\0\u3511\0\u3552\0\u3593\0\u35d4\0\202\0\u3615\0\u3656"+
    "\0\202\0\202\0\u3697\0\u36d8\0\u3719\0\u375a\0\u379b\0\u37dc"+
    "\0\202\0\202\0\u2594\0\u381d\0\u385e\0\u389f\0\u38e0\0\u3921"+
    "\0\u3962\0\u39a3\0\u39e4\0\u3a25\0\u3a66\0\u3aa7\0\u3ae8\0\u3b29"+
    "\0\u3b6a\0\u3bab\0\u3bec\0\u3c2d\0\u3c6e\0\u3caf\0\u3cf0\0\u3d31"+
    "\0\u3d72\0\u3db3\0\u3df4\0\u3e35\0\u3e76\0\u3eb7\0\u3ef8\0\u3f39"+
    "\0\u3f7a\0\u3fbb\0\u3ffc\0\u403d\0\u407e\0\u40bf\0\u4100\0\u4141"+
    "\0\u4182\0\u41c3\0\u4204\0\u4245\0\u4286\0\303\0\u42c7\0\u4308"+
    "\0\u4349\0\u438a\0\u43cb\0\u440c\0\u444d\0\u448e\0\202\0\u44cf"+
    "\0\u4510\0\303\0\u4551\0\u4592\0\u45d3\0\u4614\0\u4655\0\u4696"+
    "\0\u46d7\0\u4718\0\202\0\303\0\u4759\0\u479a\0\u47db\0\u481c"+
    "\0\u485d\0\u489e\0\u48df\0\u4920\0\u4961\0\202\0\202\0\u49a2"+
    "\0\u49e3\0\u4a24\0\u4a65\0\u4aa6\0\u4ae7\0\u4b28\0\u4b69\0\u4baa"+
    "\0\u4beb\0\u4c2c\0\u4c6d\0\u4cae\0\u4cef\0\u4d30\0\u4d71\0\u4db2"+
    "\0\u4df3\0\u4e34\0\u4e75\0\u4eb6\0\u4ef7\0\u4f38\0\u4f79\0\u4fba"+
    "\0\u4ffb\0\u503c\0\202\0\u507d\0\u50be\0\u50ff\0\u5140\0\u5181"+
    "\0\u51c2\0\u5203\0\202\0\u5244\0\u5285\0\202\0\u52c6\0\202"+
    "\0\u5307\0\u5348\0\u5389\0\u53ca\0\u540b\0\303\0\303\0\u544c"+
    "\0\u548d\0\u54ce\0\u550f\0\u5550\0\u5591\0\u55d2\0\u5613\0\202"+
    "\0\u5654\0\u5695\0\u56d6\0\u5717\0\303\0\202\0\u5758\0\u5799"+
    "\0\u57da\0\u581b\0\u585c\0\303\0\u589d\0\u58de\0\303\0\u591f"+
    "\0\303\0\303\0\u5960\0\u59a1\0\u59e2\0\u5a23\0\u5a64\0\u5aa5"+
    "\0\u5ae6\0\303\0\303\0\303\0\u5b27\0\u5b68\0\u5ba9\0\u5bea"+
    "\0\202\0\u5c2b\0\202\0\u5c6c\0\u5cad\0\u5cee\0\u5d2f\0\u5d70"+
    "\0\u5db1\0\u5df2\0\202\0\u5e33\0\u5e74\0\202\0\u5eb5\0\u5ef6"+
    "\0\202\0\u5f37\0\202\0\u5f78\0\u5fb9\0\u5ffa\0\u603b\0\u607c"+
    "\0\u60bd\0\u60fe\0\u613f\0\202\0\202\0\u6180\0\202\0\u61c1"+
    "\0\u6202\0\202\0\u6243\0\202\0\u6284\0\u62c5\0\u6306\0\303"+
    "\0\u6347\0\303\0\u6388\0\303\0\303\0\u63c9\0\u640a\0\u644b"+
    "\0\u648c\0\303\0\u64cd\0\u650e\0\u654f\0\u6590\0\202\0\303"+
    "\0\u65d1\0\u6612\0\u6653\0\u6694\0\u66d5\0\u6716\0\303\0\u6757"+
    "\0\303\0\u6798\0\u67d9\0\u681a\0\202\0\u685b\0\u689c\0\202"+
    "\0\u68dd\0\u691e\0\u695f\0\202\0\u69a0\0\u69e1\0\u6a22\0\u6a63"+
    "\0\u6aa4\0\u6ae5\0\u6b26\0\202\0\202\0\u6b67\0\u6ba8\0\202"+
    "\0\303\0\u6be9\0\303\0\303\0\303\0\303\0\303\0\303"+
    "\0\u6c2a\0\u6c6b\0\u6cac\0\u6ced\0\u6d2e\0\303\0\303\0\303"+
    "\0\u6d6f\0\u6db0\0\303\0\u6df1\0\202\0\u6e32\0\u6e73\0\u6eb4"+
    "\0\202\0\u6ef5\0\u6f36\0\u6f77\0\u6fb8\0\u6ff9\0\u703a\0\202"+
    "\0\u707b\0\202\0\u70bc\0\303\0\u70fd\0\303\0\303\0\202"+
    "\0\202\0\u713e\0\202\0\u717f\0\202\0\u71c0\0\u7201\0\u7242"+
    "\0\u7283\0\202\0\u72c4\0\u7305\0\u7346\0\u7387\0\u73c8\0\u7409"+
    "\0\u744a\0\u748b\0\u74cc\0\u750d\0\202\0\202\0\202\0\u754e"+
    "\0\u758f\0\u75d0\0\202\0\u7611\0\u7652\0\202\0\u7693\0\u76d4"+
    "\0\202";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[601];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\2\6\2\7\1\4\1\10\1\4"+
    "\1\6\1\11\1\12\1\13\1\14\1\4\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\4\1\3\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\4\1\52\1\53"+
    "\1\54\1\55\6\4\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\101\3\102\0\2\4\3\0\5\4\1\0\12\4"+
    "\5\0\1\4\20\0\17\4\14\0\2\7\1\0\1\7"+
    "\10\0\1\64\7\0\1\65\1\64\53\0\1\66\1\67"+
    "\1\0\1\67\1\70\7\0\1\64\7\0\1\65\1\64"+
    "\32\0\1\70\13\0\2\4\3\0\5\4\1\0\1\4"+
    "\1\71\5\4\1\72\2\4\5\0\1\4\20\0\10\4"+
    "\1\73\6\4\7\0\2\4\3\0\5\4\1\0\11\4"+
    "\1\74\5\0\1\4\20\0\3\4\1\75\13\4\7\0"+
    "\2\4\3\0\5\4\1\0\3\4\1\76\6\4\5\0"+
    "\1\4\20\0\1\77\16\4\7\0\2\4\3\0\5\4"+
    "\1\0\3\4\1\100\2\4\1\101\2\4\1\102\5\0"+
    "\1\4\20\0\1\103\16\4\7\0\2\4\3\0\5\4"+
    "\1\0\11\4\1\104\5\0\1\4\20\0\1\105\3\4"+
    "\1\106\12\4\7\0\2\4\3\0\5\4\1\0\1\4"+
    "\1\107\1\4\1\110\6\4\5\0\1\4\20\0\12\4"+
    "\1\111\4\4\7\0\2\4\3\0\5\4\1\0\1\112"+
    "\1\113\2\4\1\114\3\4\1\115\1\116\5\0\1\4"+
    "\20\0\17\4\7\0\2\4\3\0\5\4\1\0\6\4"+
    "\1\117\3\4\5\0\1\4\20\0\17\4\7\0\2\4"+
    "\3\0\5\4\1\0\7\4\1\120\2\4\5\0\1\4"+
    "\20\0\5\4\1\121\1\122\10\4\34\0\1\123\102\0"+
    "\1\124\77\0\1\125\57\0\2\126\1\0\1\126\20\0"+
    "\1\127\12\0\1\130\33\0\3\131\1\132\2\0\23\131"+
    "\1\133\3\131\1\134\1\131\1\135\1\136\40\131\3\30"+
    "\1\137\2\0\30\30\1\140\42\30\31\0\1\141\5\0"+
    "\1\142\1\143\71\0\1\144\114\0\1\145\103\0\1\146"+
    "\46\0\1\147\1\150\1\0\1\151\1\152\1\0\1\153"+
    "\27\0\1\154\1\155\1\156\1\157\2\0\1\160\1\0"+
    "\1\161\42\0\1\162\16\0\1\163\2\0\1\164\62\0"+
    "\1\165\62\0\1\166\3\0\1\167\1\170\1\171\14\0"+
    "\1\172\14\0\1\173\2\0\1\174\1\0\1\175\64\0"+
    "\1\176\2\0\1\177\31\0\2\4\3\0\5\4\1\0"+
    "\1\4\1\200\1\4\1\201\1\4\1\202\4\4\5\0"+
    "\1\4\20\0\1\4\1\203\1\204\14\4\7\0\2\4"+
    "\3\0\5\4\1\0\6\4\1\205\3\4\5\0\1\4"+
    "\20\0\17\4\7\0\2\4\3\0\5\4\1\0\1\206"+
    "\1\4\1\207\6\4\1\210\5\0\1\4\20\0\3\4"+
    "\1\211\1\212\12\4\7\0\2\4\3\0\5\4\1\0"+
    "\10\4\1\213\1\4\5\0\1\4\20\0\4\4\1\214"+
    "\7\4\1\215\1\216\1\4\7\0\2\4\3\0\5\4"+
    "\1\0\10\4\1\217\1\220\5\0\1\4\20\0\17\4"+
    "\7\0\2\4\3\0\5\4\1\0\1\221\11\4\5\0"+
    "\1\4\20\0\1\222\16\4\7\0\2\4\3\0\5\4"+
    "\1\0\1\223\7\4\1\224\1\4\5\0\1\4\20\0"+
    "\14\4\1\225\2\4\7\0\2\4\3\0\5\4\1\0"+
    "\12\4\5\0\1\4\20\0\1\226\16\4\37\0\1\227"+
    "\100\0\1\230\55\0\2\231\1\0\1\231\22\0\1\231"+
    "\15\0\1\231\34\0\2\65\1\0\1\65\10\0\1\64"+
    "\10\0\1\64\53\0\2\66\1\0\1\66\10\0\1\64"+
    "\7\0\1\65\1\64\53\0\1\66\1\67\1\0\1\67"+
    "\10\0\1\64\7\0\1\65\1\64\53\0\4\70\4\0"+
    "\1\70\2\0\3\70\7\0\1\70\20\0\2\70\24\0"+
    "\2\4\3\0\5\4\1\0\7\4\1\232\2\4\5\0"+
    "\1\4\20\0\17\4\7\0\2\4\3\0\5\4\1\0"+
    "\12\4\5\0\1\4\20\0\5\4\1\233\11\4\7\0"+
    "\2\4\3\0\5\4\1\0\1\4\1\234\10\4\5\0"+
    "\1\4\20\0\17\4\7\0\2\4\3\0\5\4\1\0"+
    "\12\4\5\0\1\4\20\0\10\4\1\235\6\4\7\0"+
    "\2\4\3\0\5\4\1\0\12\4\5\0\1\4\20\0"+
    "\1\236\16\4\7\0\2\4\3\0\5\4\1\0\12\4"+
    "\5\0\1\4\20\0\2\4\1\237\14\4\7\0\2\4"+
    "\3\0\5\4\1\0\12\4\5\0\1\4\20\0\1\240"+
    "\16\4\7\0\2\4\3\0\5\4\1\0\12\4\5\0"+
    "\1\4\20\0\3\4\1\241\13\4\7\0\2\4\3\0"+
    "\5\4\1\0\2\4\1\242\7\4\5\0\1\4\20\0"+
    "\17\4\7\0\2\4\3\0\5\4\1\0\12\4\5\0"+
    "\1\4\20\0\10\4\1\243\6\4\7\0\2\4\3\0"+
    "\5\4\1\0\12\4\5\0\1\4\20\0\3\4\1\244"+
    "\13\4\7\0\2\4\3\0\5\4\1\0\1\4\1\245"+
    "\10\4\5\0\1\4\20\0\17\4\7\0\2\4\3\0"+
    "\5\4\1\0\5\4\1\246\4\4\5\0\1\4\20\0"+
    "\17\4\7\0\2\4\3\0\5\4\1\0\12\4\5\0"+
    "\1\4\20\0\2\4\1\247\14\4\7\0\2\4\3\0"+
    "\5\4\1\0\1\4\1\235\1\250\7\4\5\0\1\4"+
    "\20\0\3\4\1\251\13\4\7\0\2\4\3\0\5\4"+
    "\1\0\12\4\5\0\1\4\20\0\12\4\1\252\4\4"+
    "\7\0\2\4\3\0\5\4\1\0\12\4\5\0\1\4"+
    "\20\0\12\4\1\253\4\4\7\0\2\4\3\0\5\4"+
    "\1\0\1\4\1\253\10\4\5\0\1\4\20\0\17\4"+
    "\7\0\2\4\3\0\5\4\1\0\6\4\1\254\3\4"+
    "\5\0\1\4\20\0\17\4\7\0\2\4\3\0\5\4"+
    "\1\0\3\4\1\255\4\4\1\256\1\4\5\0\1\4"+
    "\20\0\17\4\7\0\2\4\3\0\5\4\1\0\2\4"+
    "\1\257\4\4\1\260\2\4\5\0\1\4\20\0\13\4"+
    "\1\261\3\4\7\0\2\4\3\0\5\4\1\0\6\4"+
    "\1\262\3\4\5\0\1\4\20\0\17\4\6\0\3\263"+
    "\1\264\2\0\20\263\1\265\52\263\27\266\1\267\51\266"+
    "\6\0\2\126\1\0\1\126\10\0\1\64\10\0\1\64"+
    "\77\0\1\270\116\0\1\271\30\0\3\272\1\273\2\0"+
    "\27\272\1\140\43\272\4\131\2\0\73\131\4\30\2\0"+
    "\73\30\25\0\1\274\67\0\1\275\4\0\1\151\34\0"+
    "\1\276\44\0\1\277\101\0\1\300\42\0\1\301\34\0"+
    "\1\302\31\0\1\303\50\0\1\304\100\0\1\305\144\0"+
    "\1\306\30\0\1\307\76\0\1\310\142\0\1\311\67\0"+
    "\1\312\101\0\1\313\100\0\1\314\45\0\1\315\5\0"+
    "\1\316\72\0\1\317\105\0\1\320\73\0\1\321\1\0"+
    "\1\322\4\0\1\323\132\0\1\324\112\0\1\325\34\0"+
    "\1\326\124\0\1\327\31\0\2\4\3\0\5\4\1\0"+
    "\5\4\1\330\4\4\5\0\1\4\20\0\17\4\7\0"+
    "\2\4\3\0\5\4\1\0\3\4\1\235\6\4\5\0"+
    "\1\4\20\0\17\4\7\0\2\4\3\0\5\4\1\0"+
    "\5\4\1\331\4\4\5\0\1\4\20\0\17\4\7\0"+
    "\2\4\3\0\5\4\1\0\12\4\5\0\1\4\20\0"+
    "\2\4\1\332\14\4\7\0\2\4\3\0\5\4\1\0"+
    "\12\4\5\0\1\4\20\0\2\4\1\333\14\4\7\0"+
    "\2\4\3\0\5\4\1\0\12\4\5\0\1\4\20\0"+
    "\11\4\1\334\5\4\7\0\2\4\3\0\5\4\1\0"+
    "\7\4\1\335\2\4\5\0\1\4\20\0\17\4\7\0"+
    "\2\4\3\0\5\4\1\0\12\4\5\0\1\4\20\0"+
    "\1\336\16\4\7\0\2\4\3\0\5\4\1\0\10\4"+
    "\1\337\1\4\5\0\1\4\20\0\17\4\7\0\2\4"+
    "\3\0\5\4\1\0\12\4\5\0\1\4\20\0\1\340"+
    "\16\4\7\0\2\4\3\0\5\4\1\0\12\4\5\0"+
    "\1\4\20\0\10\4\1\341\6\4\7\0\2\4\3\0"+
    "\5\4\1\0\12\4\5\0\1\4\20\0\4\4\1\342"+
    "\12\4\7\0\2\4\3\0\5\4\1\0\12\4\5\0"+
    "\1\4\20\0\5\4\1\343\11\4\7\0\2\4\3\0"+
    "\5\4\1\0\6\4\1\344\3\4\5\0\1\4\20\0"+
    "\17\4\7\0\2\4\3\0\5\4\1\0\1\345\11\4"+
    "\5\0\1\4\20\0\17\4\7\0\2\4\3\0\5\4"+
    "\1\0\1\346\1\4\1\347\3\4\1\350\1\351\1\4"+
    "\1\352\5\0\1\4\20\0\1\353\5\4\1\354\10\4"+
    "\7\0\2\4\3\0\5\4\1\0\12\4\5\0\1\4"+
    "\20\0\2\4\1\355\14\4\7\0\2\4\3\0\5\4"+
    "\1\0\6\4\1\356\3\4\5\0\1\4\20\0\17\4"+
    "\7\0\2\4\3\0\5\4\1\0\3\4\1\357\4\4"+
    "\1\360\1\4\5\0\1\4\20\0\17\4\7\0\2\4"+
    "\3\0\5\4\1\0\12\4\5\0\1\4\20\0\3\4"+
    "\1\361\13\4\7\0\2\4\3\0\5\4\1\0\12\4"+
    "\5\0\1\4\20\0\3\4\1\235\13\4\7\0\2\4"+
    "\3\0\5\4\1\0\1\362\5\4\1\363\3\4\5\0"+
    "\1\4\20\0\17\4\7\0\2\4\3\0\5\4\1\0"+
    "\2\4\1\364\7\4\5\0\1\4\20\0\17\4\14\0"+
    "\2\231\1\0\1\231\70\0\2\4\3\0\5\4\1\0"+
    "\1\365\11\4\5\0\1\4\20\0\17\4\7\0\2\4"+
    "\3\0\5\4\1\0\3\4\1\366\5\4\1\367\5\0"+
    "\1\4\20\0\17\4\7\0\2\4\3\0\5\4\1\0"+
    "\7\4\1\370\2\4\5\0\1\4\20\0\17\4\7\0"+
    "\2\4\3\0\5\4\1\0\12\4\5\0\1\4\20\0"+
    "\2\4\1\371\14\4\7\0\2\4\3\0\5\4\1\0"+
    "\6\4\1\372\3\4\5\0\1\4\20\0\3\4\1\373"+
    "\13\4\7\0\2\4\3\0\5\4\1\0\12\4\5\0"+
    "\1\4\20\0\10\4\1\374\6\4\7\0\2\4\3\0"+
    "\5\4\1\0\12\4\5\0\1\4\20\0\1\375\16\4"+
    "\7\0\2\4\3\0\5\4\1\0\12\4\5\0\1\4"+
    "\5\0\1\376\12\0\17\4\7\0\2\4\3\0\5\4"+
    "\1\0\12\4\5\0\1\4\20\0\1\377\16\4\7\0"+
    "\2\4\3\0\5\4\1\0\3\4\1\u0100\6\4\5\0"+
    "\1\4\20\0\17\4\7\0\2\4\3\0\5\4\1\0"+
    "\6\4\1\u0101\3\4\5\0\1\4\20\0\17\4\7\0"+
    "\2\4\3\0\5\4\1\0\6\4\1\u0102\3\4\5\0"+
    "\1\4\20\0\17\4\7\0\2\4\3\0\5\4\1\0"+
    "\6\4\1\u0103\3\4\5\0\1\4\20\0\4\4\1\u0104"+
    "\1\4\1\u0105\10\4\7\0\2\4\3\0\5\4\1\0"+
    "\12\4\5\0\1\4\5\0\1\u0106\12\0\17\4\7\0"+
    "\2\4\3\0\5\4\1\0\6\4\1\u0107\3\4\5\0"+
    "\1\4\20\0\17\4\7\0\2\4\3\0\5\4\1\0"+
    "\5\4\1\u0108\4\4\5\0\1\4\20\0\17\4\7\0"+
    "\2\4\3\0\5\4\1\0\12\4\1\0\1\u0109\3\0"+
    "\1\4\20\0\17\4\7\0\2\4\3\0\5\4\1\0"+
    "\12\4\5\0\1\4\5\0\1\u010a\12\0\17\4\7\0"+
    "\2\4\3\0\5\4\1\0\4\4\1\u010b\5\4\5\0"+
    "\1\4\20\0\17\4\7\0\2\4\3\0\5\4\1\0"+
    "\10\4\1\u010c\1\4\5\0\1\4\20\0\17\4\6\0"+
    "\3\263\1\264\2\0\76\263\1\264\1\u010d\77\263\1\264"+
    "\2\0\20\263\1\u010e\52\263\27\266\1\u010f\51\266\27\u0110"+
    "\1\267\1\u0110\1\u0111\47\u0110\32\0\1\u0112\46\0\3\272"+
    "\1\u0113\2\0\27\272\1\134\47\272\2\0\73\272\15\0"+
    "\1\u0114\141\0\1\276\101\0\1\u0115\40\0\1\u0116\104\0"+
    "\1\u0117\134\0\1\u0118\37\0\1\u0119\76\0\1\u011a\110\0"+
    "\1\u011b\76\0\1\u011c\103\0\1\u011d\134\0\1\u011e\44\0"+
    "\1\u011f\72\0\1\u0120\3\0\1\u0121\125\0\1\u0122\46\0"+
    "\1\u0123\77\0\1\u0124\3\0\1\u0125\100\0\1\u0126\102\0"+
    "\1\u0127\76\0\1\u0128\73\0\1\u0129\41\0\1\u012a\46\0"+
    "\1\u012b\132\0\1\u012c\44\0\1\u012d\72\0\1\u012e\65\0"+
    "\2\4\3\0\5\4\1\0\10\4\1\u012f\1\4\5\0"+
    "\1\4\20\0\17\4\7\0\2\4\3\0\5\4\1\0"+
    "\12\4\5\0\1\4\20\0\3\4\1\u0130\1\4\1\u0131"+
    "\1\u0132\10\4\7\0\2\4\3\0\5\4\1\0\4\4"+
    "\1\u0133\5\4\5\0\1\4\20\0\17\4\7\0\2\4"+
    "\3\0\5\4\1\0\1\u0134\11\4\5\0\1\4\20\0"+
    "\17\4\7\0\2\4\3\0\5\4\1\0\12\4\5\0"+
    "\1\4\20\0\2\4\1\u0135\14\4\7\0\2\4\3\0"+
    "\5\4\1\0\12\4\5\0\1\4\20\0\3\4\1\u0136"+
    "\13\4\7\0\2\4\3\0\5\4\1\0\2\4\1\u0137"+
    "\1\u0138\1\4\1\u0139\4\4\5\0\1\4\20\0\3\4"+
    "\1\u013a\13\4\7\0\2\4\3\0\5\4\1\0\1\u013b"+
    "\5\4\1\u013c\3\4\5\0\1\4\20\0\17\4\7\0"+
    "\2\4\3\0\5\4\1\0\6\4\1\u013d\3\4\5\0"+
    "\1\4\20\0\17\4\7\0\2\4\3\0\5\4\1\0"+
    "\1\4\1\u013e\10\4\5\0\1\4\20\0\17\4\7\0"+
    "\2\4\3\0\5\4\1\0\1\4\1\u013f\10\4\5\0"+
    "\1\4\20\0\17\4\7\0\2\4\3\0\5\4\1\0"+
    "\12\4\5\0\1\4\20\0\10\4\1\u0140\6\4\7\0"+
    "\2\4\3\0\5\4\1\0\12\4\5\0\1\4\20\0"+
    "\1\u0141\16\4\7\0\2\4\3\0\5\4\1\0\7\4"+
    "\1\u0142\2\4\5\0\1\4\20\0\17\4\7\0\2\4"+
    "\3\0\5\4\1\0\1\4\1\253\2\4\1\114\5\4"+
    "\5\0\1\4\20\0\17\4\7\0\2\4\3\0\5\4"+
    "\1\0\12\4\5\0\1\4\20\0\5\4\1\u0143\11\4"+
    "\7\0\2\4\3\0\5\4\1\0\12\4\5\0\1\4"+
    "\20\0\12\4\1\u0144\4\4\7\0\2\4\3\0\5\4"+
    "\1\0\12\4\5\0\1\4\20\0\1\u0145\16\4\7\0"+
    "\2\4\3\0\5\4\1\0\12\4\5\0\1\4\20\0"+
    "\3\4\1\350\13\4\7\0\2\4\3\0\5\4\1\0"+
    "\12\4\5\0\1\4\20\0\7\4\1\u0146\7\4\7\0"+
    "\2\4\3\0\5\4\1\0\12\4\5\0\1\4\1\u0147"+
    "\15\0\1\u0147\1\0\17\4\7\0\2\4\3\0\5\4"+
    "\1\0\12\4\5\0\1\4\20\0\14\4\1\u0148\2\4"+
    "\7\0\2\4\3\0\5\4\1\0\3\4\1\u0149\6\4"+
    "\5\0\1\4\20\0\17\4\7\0\2\4\3\0\5\4"+
    "\1\0\1\4\1\u014a\6\4\1\u014b\1\4\5\0\1\4"+
    "\20\0\17\4\7\0\2\4\3\0\5\4\1\0\5\4"+
    "\1\u014c\2\4\1\u014d\1\4\5\0\1\4\20\0\17\4"+
    "\7\0\2\4\3\0\5\4\1\0\12\4\5\0\1\4"+
    "\20\0\12\4\1\u014e\4\4\7\0\2\4\3\0\5\4"+
    "\1\0\6\4\1\u014f\3\4\5\0\1\4\20\0\17\4"+
    "\7\0\2\4\3\0\5\4\1\0\10\4\1\u0150\1\4"+
    "\5\0\1\4\20\0\17\4\7\0\2\4\3\0\5\4"+
    "\1\0\1\u0151\11\4\5\0\1\4\20\0\17\4\7\0"+
    "\2\4\3\0\5\4\1\0\12\4\5\0\1\4\20\0"+
    "\2\4\1\u0152\14\4\7\0\2\4\3\0\5\4\1\0"+
    "\12\4\5\0\1\4\1\u0153\15\0\1\u0153\1\0\17\4"+
    "\7\0\2\4\3\0\5\4\1\0\7\4\1\114\2\4"+
    "\5\0\1\4\20\0\17\4\7\0\2\4\3\0\5\4"+
    "\1\0\3\4\1\u0154\6\4\5\0\1\4\20\0\17\4"+
    "\7\0\2\4\3\0\5\4\1\0\12\4\5\0\1\4"+
    "\20\0\2\4\1\u0155\1\u0156\1\4\1\u0157\1\u0158\10\4"+
    "\7\0\2\4\3\0\5\4\1\0\11\4\1\u0159\5\0"+
    "\1\4\20\0\17\4\7\0\2\4\3\0\5\4\1\0"+
    "\12\4\5\0\1\4\20\0\5\4\1\u015a\11\4\7\0"+
    "\2\4\3\0\5\4\1\0\10\4\1\u015b\1\4\5\0"+
    "\1\4\20\0\17\4\7\0\2\4\3\0\5\4\1\0"+
    "\12\4\5\0\1\4\20\0\5\4\1\u015c\11\4\7\0"+
    "\2\4\3\0\5\4\1\0\12\4\5\0\1\4\20\0"+
    "\1\u015d\16\4\7\0\2\4\3\0\5\4\1\0\12\4"+
    "\5\0\1\4\5\0\1\u015e\12\0\17\4\7\0\2\4"+
    "\3\0\5\4\1\0\12\4\5\0\1\4\5\0\1\u015f"+
    "\12\0\17\4\7\0\2\4\3\0\5\4\1\0\1\u0160"+
    "\11\4\5\0\1\4\20\0\17\4\7\0\2\4\3\0"+
    "\5\4\1\0\3\4\1\u0161\6\4\5\0\1\4\20\0"+
    "\17\4\13\0\1\263\73\0\3\u010e\1\u0162\2\u0163\73\u010e"+
    "\27\266\1\u010f\1\124\50\266\27\u0110\1\u0164\51\u0110\57\0"+
    "\1\u0165\23\0\1\u0166\152\0\1\u0167\110\0\1\u0168\36\0"+
    "\1\u0169\1\u016a\34\0\1\u016b\1\0\1\u016c\1\0\1\u016d"+
    "\4\0\1\u016e\11\0\1\u016f\22\0\1\u0170\131\0\1\u0171"+
    "\103\0\1\u0172\73\0\1\u0173\107\0\1\u0174\17\0\1\u0175"+
    "\14\0\1\u0176\142\0\1\u0177\44\0\1\u0178\67\0\1\u0179"+
    "\3\0\1\u017a\130\0\1\u017b\47\0\1\u017c\102\0\1\u017d"+
    "\101\0\1\u017e\100\0\1\u017f\72\0\1\u0180\100\0\1\u0181"+
    "\107\0\1\u0182\77\0\1\u0183\103\0\1\u0184\75\0\1\u0185"+
    "\73\0\1\u0186\100\0\1\u0187\64\0\2\4\3\0\5\4"+
    "\1\0\12\4\5\0\1\4\5\0\1\u0188\12\0\17\4"+
    "\7\0\2\4\3\0\3\4\1\u0189\1\4\1\0\12\4"+
    "\5\0\1\4\20\0\4\4\1\u018a\12\4\7\0\2\4"+
    "\3\0\5\4\1\0\10\4\1\u018b\1\4\5\0\1\4"+
    "\20\0\17\4\7\0\2\4\3\0\5\4\1\0\1\u018c"+
    "\11\4\5\0\1\4\20\0\3\4\1\u0130\13\4\7\0"+
    "\2\4\3\0\5\4\1\0\12\4\5\0\1\4\20\0"+
    "\10\4\1\u018d\6\4\7\0\2\4\3\0\5\4\1\0"+
    "\1\4\1\u018e\10\4\5\0\1\4\20\0\17\4\7\0"+
    "\2\4\3\0\5\4\1\0\6\4\1\u018f\3\4\5\0"+
    "\1\4\20\0\17\4\7\0\2\4\3\0\5\4\1\0"+
    "\5\4\1\u0190\4\4\5\0\1\4\20\0\17\4\7\0"+
    "\2\4\3\0\5\4\1\0\12\4\5\0\1\4\20\0"+
    "\2\4\1\u0191\14\4\7\0\2\4\3\0\5\4\1\0"+
    "\11\4\1\u0192\5\0\1\4\20\0\17\4\7\0\2\4"+
    "\3\0\5\4\1\0\6\4\1\u0193\3\4\5\0\1\4"+
    "\20\0\17\4\7\0\2\4\3\0\5\4\1\0\1\u0194"+
    "\11\4\5\0\1\4\20\0\17\4\7\0\2\4\3\0"+
    "\5\4\1\0\1\4\1\u0195\10\4\5\0\1\4\20\0"+
    "\17\4\7\0\2\4\3\0\5\4\1\0\3\4\1\u0196"+
    "\6\4\5\0\1\4\20\0\17\4\7\0\2\4\3\0"+
    "\5\4\1\0\5\4\1\u0197\4\4\5\0\1\4\1\u0198"+
    "\15\0\1\u0198\1\0\17\4\7\0\2\4\3\0\5\4"+
    "\1\0\5\4\1\u0199\4\4\5\0\1\4\20\0\17\4"+
    "\7\0\2\4\3\0\5\4\1\0\12\4\5\0\1\4"+
    "\20\0\5\4\1\u019a\11\4\7\0\2\4\3\0\5\4"+
    "\1\0\12\4\5\0\1\4\20\0\2\4\1\u019b\14\4"+
    "\7\0\2\4\3\0\5\4\1\0\1\u019c\11\4\5\0"+
    "\1\4\20\0\17\4\7\0\2\4\3\0\5\4\1\0"+
    "\5\4\1\u0197\4\4\5\0\1\4\20\0\17\4\7\0"+
    "\2\4\3\0\5\4\1\0\1\253\11\4\5\0\1\4"+
    "\20\0\17\4\7\0\2\4\3\0\5\4\1\0\3\4"+
    "\1\u019d\4\4\1\360\1\4\5\0\1\4\20\0\17\4"+
    "\7\0\2\4\3\0\5\4\1\0\5\4\1\u0197\4\4"+
    "\5\0\1\4\5\0\1\u019e\12\0\3\4\1\u019f\13\4"+
    "\7\0\2\4\3\0\5\4\1\0\12\4\5\0\1\4"+
    "\20\0\3\4\1\u01a0\1\4\1\u01a1\1\u01a2\10\4\7\0"+
    "\2\4\3\0\5\4\1\0\6\4\1\u01a3\3\4\5\0"+
    "\1\4\20\0\17\4\7\0\2\4\3\0\5\4\1\0"+
    "\6\4\1\u01a4\3\4\5\0\1\4\20\0\17\4\7\0"+
    "\2\4\3\0\5\4\1\0\6\4\1\u01a5\3\4\5\0"+
    "\1\4\20\0\17\4\7\0\2\4\3\0\5\4\1\0"+
    "\11\4\1\u01a6\5\0\1\4\20\0\17\4\7\0\2\4"+
    "\3\0\5\4\1\0\3\4\1\u01a7\4\4\1\u01a7\1\4"+
    "\5\0\1\4\20\0\17\4\7\0\2\4\3\0\5\4"+
    "\1\0\12\4\5\0\1\4\20\0\10\4\1\u01a8\6\4"+
    "\7\0\2\4\3\0\5\4\1\0\12\4\5\0\1\4"+
    "\20\0\3\4\1\u01a9\13\4\7\0\2\4\3\0\5\4"+
    "\1\0\12\4\5\0\1\4\20\0\12\4\1\u01aa\4\4"+
    "\7\0\2\4\3\0\5\4\1\0\5\4\1\u01ab\4\4"+
    "\5\0\1\4\20\0\17\4\7\0\2\4\3\0\5\4"+
    "\1\0\11\4\1\u01ac\5\0\1\4\20\0\17\4\7\0"+
    "\2\4\3\0\5\4\1\0\12\4\5\0\1\4\20\0"+
    "\4\4\1\u01ad\12\4\7\0\2\4\3\0\5\4\1\0"+
    "\10\4\1\u01ae\1\4\5\0\1\4\20\0\17\4\7\0"+
    "\2\4\3\0\5\4\1\0\1\u01af\11\4\5\0\1\4"+
    "\20\0\3\4\1\u0156\13\4\7\0\2\4\3\0\5\4"+
    "\1\0\12\4\5\0\1\4\20\0\1\u01b0\16\4\7\0"+
    "\2\4\3\0\5\4\1\0\12\4\5\0\1\4\20\0"+
    "\3\4\1\u01b1\13\4\7\0\2\4\3\0\5\4\1\0"+
    "\1\4\1\u01b2\10\4\5\0\1\4\20\0\17\4\7\0"+
    "\2\4\3\0\5\4\1\0\6\4\1\u01b3\3\4\5\0"+
    "\1\4\20\0\17\4\7\0\2\4\3\0\5\4\1\0"+
    "\10\4\1\u01b4\1\4\5\0\1\4\20\0\17\4\7\0"+
    "\2\4\3\0\5\4\1\0\10\4\1\u01b5\1\4\5\0"+
    "\1\4\20\0\17\4\7\0\2\4\3\0\5\4\1\0"+
    "\11\4\1\u01b6\5\0\1\4\20\0\17\4\6\0\3\u010e"+
    "\1\u0162\1\u01b7\74\u010e\101\u0163\27\u0110\1\u0164\1\u0111\50\u0110"+
    "\14\0\1\u01b8\143\0\1\u01b9\2\0\1\u01ba\76\0\1\u01bb"+
    "\74\0\1\u01bc\50\0\1\u01bd\72\0\1\u01be\143\0\1\u01bf"+
    "\73\0\1\u01c0\42\0\1\u01c1\76\0\1\u01c2\143\0\1\u01c3"+
    "\2\0\1\u01c4\42\0\1\u01c5\76\0\1\u01c6\134\0\1\u01c7"+
    "\1\u01c8\112\0\1\u01c9\66\0\1\u01ca\100\0\1\u01cb\2\0"+
    "\1\u01cc\40\0\1\u01cd\136\0\1\u01ce\36\0\1\u01cf\101\0"+
    "\1\u01d0\76\0\1\u01d1\103\0\1\u01d2\102\0\1\u01d3\101\0"+
    "\1\u01d4\100\0\1\u01d5\72\0\1\u01d6\106\0\1\u01d7\72\0"+
    "\1\u01d8\3\0\1\u01d9\103\0\1\u01da\100\0\1\u01db\133\0"+
    "\1\u01dc\22\0\2\4\3\0\5\4\1\0\12\4\5\0"+
    "\1\4\20\0\4\4\1\u018a\12\4\7\0\2\4\3\0"+
    "\5\4\1\0\12\4\5\0\1\4\20\0\5\4\1\u01dd"+
    "\11\4\7\0\2\4\3\0\5\4\1\0\11\4\1\u01de"+
    "\5\0\1\4\20\0\17\4\7\0\2\4\3\0\5\4"+
    "\1\0\6\4\1\u01df\3\4\5\0\1\4\20\0\17\4"+
    "\7\0\2\4\3\0\5\4\1\0\6\4\1\u01e0\3\4"+
    "\5\0\1\4\20\0\17\4\7\0\2\4\3\0\5\4"+
    "\1\0\6\4\1\u01e1\3\4\5\0\1\4\20\0\17\4"+
    "\7\0\2\4\3\0\5\4\1\0\12\4\5\0\1\4"+
    "\20\0\3\4\1\u01e2\13\4\7\0\2\4\3\0\5\4"+
    "\1\0\12\4\5\0\1\4\20\0\1\u01e3\16\4\7\0"+
    "\2\4\3\0\5\4\1\0\7\4\1\u01e4\2\4\5\0"+
    "\1\4\20\0\17\4\7\0\2\4\3\0\5\4\1\0"+
    "\2\4\1\u01e5\7\4\5\0\1\4\20\0\17\4\7\0"+
    "\2\4\3\0\5\4\1\0\12\4\5\0\1\4\20\0"+
    "\3\4\1\u01e6\13\4\7\0\2\4\3\0\5\4\1\0"+
    "\1\u01e7\11\4\5\0\1\4\20\0\17\4\7\0\2\4"+
    "\3\0\5\4\1\0\6\4\1\u01e8\3\4\5\0\1\4"+
    "\20\0\17\4\7\0\2\4\3\0\5\4\1\0\6\4"+
    "\1\u01e9\3\4\5\0\1\4\20\0\17\4\7\0\2\4"+
    "\3\0\5\4\1\0\3\4\1\366\6\4\5\0\1\4"+
    "\20\0\17\4\7\0\2\4\3\0\5\4\1\0\6\4"+
    "\1\u01ea\3\4\5\0\1\4\20\0\17\4\7\0\2\4"+
    "\3\0\5\4\1\0\12\4\5\0\1\4\20\0\12\4"+
    "\1\u01a7\4\4\7\0\2\4\3\0\5\4\1\0\12\4"+
    "\5\0\1\4\20\0\4\4\1\u01eb\12\4\7\0\2\4"+
    "\3\0\5\4\1\0\12\4\5\0\1\4\20\0\4\4"+
    "\1\u01ec\12\4\7\0\2\4\3\0\5\4\1\0\10\4"+
    "\1\u01ed\1\4\5\0\1\4\20\0\17\4\7\0\2\4"+
    "\3\0\5\4\1\0\1\u01ee\11\4\5\0\1\4\20\0"+
    "\17\4\7\0\2\4\3\0\5\4\1\0\12\4\1\0"+
    "\1\u01ef\3\0\1\4\20\0\17\4\7\0\2\4\3\0"+
    "\5\4\1\0\7\4\1\u01f0\2\4\5\0\1\4\20\0"+
    "\17\4\7\0\2\4\3\0\5\4\1\0\5\4\1\u014c"+
    "\4\4\5\0\1\4\20\0\17\4\7\0\2\4\3\0"+
    "\5\4\1\0\6\4\1\u01f1\3\4\5\0\1\4\20\0"+
    "\17\4\7\0\2\4\3\0\5\4\1\0\6\4\1\u01f2"+
    "\3\4\5\0\1\4\20\0\17\4\7\0\2\4\3\0"+
    "\5\4\1\0\10\4\1\u01f3\1\4\5\0\1\4\20\0"+
    "\17\4\7\0\2\4\3\0\5\4\1\0\12\4\5\0"+
    "\1\4\20\0\5\4\1\u01f4\11\4\7\0\2\4\3\0"+
    "\5\4\1\0\11\4\1\u01f5\5\0\1\4\20\0\17\4"+
    "\7\0\2\4\3\0\5\4\1\0\6\4\1\u01f6\3\4"+
    "\5\0\1\4\20\0\17\4\7\0\2\4\3\0\5\4"+
    "\1\0\5\4\1\u01f7\4\4\5\0\1\4\20\0\17\4"+
    "\7\0\2\4\3\0\5\4\1\0\1\u01f8\11\4\5\0"+
    "\1\4\20\0\17\4\7\0\2\4\3\0\5\4\1\0"+
    "\6\4\1\u01f9\3\4\5\0\1\4\20\0\17\4\7\0"+
    "\2\4\3\0\5\4\1\0\12\4\5\0\1\4\20\0"+
    "\1\u01fa\16\4\6\0\5\u0163\1\u010e\73\u0163\15\0\1\u01fb"+
    "\142\0\1\u01b9\77\0\1\u01fc\37\0\1\u01fd\137\0\1\u01fe"+
    "\46\0\1\u01ff\75\0\1\u0200\135\0\1\u0201\41\0\1\u0202"+
    "\142\0\1\u01c3\42\0\1\u0203\151\0\1\u0204\32\0\1\u0205"+
    "\134\0\1\u0206\77\0\1\u01cb\23\0\1\u0175\120\0\1\u0207"+
    "\132\0\1\u0208\46\0\1\u0209\74\0\1\u020a\103\0\1\u020b"+
    "\102\0\1\u020c\77\0\1\u020d\77\0\1\u020e\101\0\1\u020f"+
    "\135\0\1\u0210\22\0\2\4\3\0\5\4\1\0\6\4"+
    "\1\u0211\3\4\5\0\1\4\20\0\17\4\7\0\2\4"+
    "\3\0\5\4\1\0\12\4\5\0\1\4\20\0\5\4"+
    "\1\u0211\11\4\7\0\2\4\3\0\5\4\1\0\12\4"+
    "\5\0\1\4\20\0\7\4\1\u0212\7\4\7\0\2\4"+
    "\3\0\5\4\1\0\7\4\1\u0213\2\4\5\0\1\4"+
    "\20\0\17\4\7\0\2\4\3\0\5\4\1\0\5\4"+
    "\1\u0214\4\4\5\0\1\4\20\0\17\4\7\0\2\4"+
    "\3\0\5\4\1\0\10\4\1\u0215\1\4\5\0\1\4"+
    "\20\0\17\4\7\0\2\4\3\0\5\4\1\0\12\4"+
    "\5\0\1\4\20\0\10\4\1\u0216\6\4\7\0\2\4"+
    "\3\0\5\4\1\0\7\4\1\u0217\2\4\5\0\1\4"+
    "\20\0\17\4\7\0\2\4\3\0\5\4\1\0\7\4"+
    "\1\u0218\2\4\5\0\1\4\20\0\17\4\7\0\2\4"+
    "\3\0\5\4\1\0\12\4\5\0\1\4\20\0\5\4"+
    "\1\u0219\11\4\7\0\2\4\3\0\5\4\1\0\12\4"+
    "\5\0\1\4\20\0\5\4\1\u021a\11\4\7\0\2\4"+
    "\3\0\5\4\1\0\11\4\1\u021b\5\0\1\4\20\0"+
    "\17\4\7\0\2\4\3\0\5\4\1\0\6\4\1\u021c"+
    "\3\4\5\0\1\4\20\0\17\4\7\0\2\4\3\0"+
    "\5\4\1\0\1\4\1\u021d\10\4\5\0\1\4\20\0"+
    "\17\4\7\0\2\4\3\0\5\4\1\0\2\4\1\u021e"+
    "\7\4\5\0\1\4\20\0\17\4\7\0\2\4\3\0"+
    "\5\4\1\0\12\4\5\0\1\4\20\0\3\4\1\u021f"+
    "\13\4\7\0\2\4\3\0\5\4\1\0\6\4\1\u0220"+
    "\3\4\5\0\1\4\20\0\17\4\7\0\2\4\3\0"+
    "\5\4\1\0\12\4\5\0\1\4\20\0\5\4\1\u0220"+
    "\11\4\7\0\2\4\3\0\5\4\1\0\12\4\5\0"+
    "\1\4\20\0\7\4\1\u0221\7\4\7\0\2\4\3\0"+
    "\5\4\1\0\11\4\1\u0222\5\0\1\4\20\0\17\4"+
    "\7\0\2\4\3\0\5\4\1\0\5\4\1\u0223\4\4"+
    "\5\0\1\4\20\0\17\4\26\0\1\u0224\151\0\1\u0225"+
    "\26\0\1\u0226\63\0\1\u0227\115\0\1\u0228\102\0\1\u0229"+
    "\61\0\1\u016f\154\0\1\u022a\103\0\1\u022b\34\0\1\u022c"+
    "\142\0\1\u022d\36\0\1\u022e\142\0\1\u022f\43\0\1\u0230"+
    "\100\0\1\u0231\101\0\1\u0232\56\0\2\4\3\0\5\4"+
    "\1\0\12\4\5\0\1\4\20\0\3\4\1\u0233\13\4"+
    "\7\0\2\4\3\0\5\4\1\0\6\4\1\u0143\3\4"+
    "\5\0\1\4\20\0\17\4\7\0\2\4\3\0\5\4"+
    "\1\0\6\4\1\u0234\3\4\5\0\1\4\20\0\17\4"+
    "\7\0\2\4\3\0\5\4\1\0\12\4\5\0\1\4"+
    "\20\0\5\4\1\u0234\11\4\7\0\2\4\3\0\5\4"+
    "\1\0\12\4\5\0\1\4\20\0\7\4\1\u0235\7\4"+
    "\7\0\2\4\3\0\5\4\1\0\12\4\5\0\1\4"+
    "\20\0\3\4\1\u0236\13\4\7\0\2\4\3\0\5\4"+
    "\1\0\12\4\5\0\1\4\20\0\3\4\1\u0156\13\4"+
    "\7\0\2\4\3\0\5\4\1\0\1\4\1\u0237\10\4"+
    "\5\0\1\4\20\0\17\4\30\0\1\u0238\75\0\1\u0239"+
    "\137\0\1\u023a\41\0\1\u023b\75\0\1\u023c\106\0\1\u023d"+
    "\140\0\1\u023e\32\0\1\u023f\140\0\1\u0240\40\0\1\u0241"+
    "\107\0\1\u0242\56\0\2\4\3\0\3\4\1\u0189\1\4"+
    "\1\0\12\4\5\0\1\4\5\0\1\u0243\12\0\4\4"+
    "\1\u018a\12\4\7\0\2\4\3\0\5\4\1\0\12\4"+
    "\5\0\1\4\20\0\3\4\1\u01a0\13\4\65\0\1\u0244"+
    "\113\0\1\u0245\10\0\1\u0246\123\0\1\u0247\137\0\1\u0248"+
    "\41\0\1\u0249\133\0\1\u024a\44\0\1\u024b\76\0\1\u0204"+
    "\140\0\1\u024c\33\0\1\u024d\105\0\1\u024e\73\0\1\u024f"+
    "\144\0\1\u0250\37\0\1\u0251\137\0\1\u0252\43\0\1\u0253"+
    "\74\0\1\u0254\113\0\1\u0255\126\0\1\u0256\103\0\1\u0257"+
    "\75\0\1\u0258\51\0\1\u0259\50\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[30485];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\1\1\11\1\1\2\11\15\1\1\11\4\1\2\11"+
    "\1\1\1\11\10\1\1\11\11\1\3\11\1\1\1\11"+
    "\40\1\1\11\1\0\6\1\1\11\3\1\7\11\14\0"+
    "\2\1\1\11\4\0\1\11\3\0\1\1\1\11\27\1"+
    "\2\11\37\1\1\11\1\0\2\1\17\0\2\11\1\0"+
    "\1\1\10\0\1\11\46\1\1\11\7\1\1\11\2\1"+
    "\2\11\2\1\1\0\1\1\1\0\1\1\2\11\1\1"+
    "\1\0\1\1\3\0\1\1\4\0\1\1\3\0\1\1"+
    "\14\0\30\1\1\11\13\1\1\11\12\1\2\11\4\1"+
    "\27\0\1\11\6\0\1\1\1\11\2\0\1\11\1\0"+
    "\1\11\17\1\1\11\5\1\1\11\31\1\1\0\1\11"+
    "\1\0\1\11\7\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\1\6\0\2\11\1\0\1\11"+
    "\2\0\1\11\1\0\1\11\22\1\1\11\13\1\2\0"+
    "\1\11\1\0\1\1\1\11\2\0\1\1\1\11\7\0"+
    "\2\11\2\0\1\11\23\1\1\0\1\11\3\0\1\11"+
    "\6\0\1\11\1\0\1\11\5\1\2\11\1\0\1\11"+
    "\1\0\1\11\4\0\1\11\11\0\1\1\3\11\3\0"+
    "\1\11\2\0\1\11\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[601];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  // Not sure if needed:
  StringBuffer string = new StringBuffer();

  // Placeholders for line and column information:
  private int yyline;
  private int yycolumn;

  public int getYyline() { return yyline; }
  public int getYycolumn() { return yycolumn; }



  public ATSLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ATSLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1624) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch ((zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL] : zzBufferL.charAt(zzCurrentPosL))) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = (zzBufferArrayL != null ? zzBufferArrayL[zzMarkedPosL] : zzBufferL.charAt(zzMarkedPosL)) == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = (zzBufferArrayL != null ? zzBufferArrayL[zzMarkedPosL] : zzBufferL.charAt(zzMarkedPosL)) == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 160: 
          { return ATSTokenTypes.DLRMYFUNCTION;
          }
        case 162: break;
        case 143: 
          { return ATSTokenTypes.DATATYPE;
          }
        case 163: break;
        case 113: 
          { return ATSTokenTypes.DLRBREAK;
          }
        case 164: break;
        case 77: 
          { return ATSTokenTypes.VAR;
          }
        case 165: break;
        case 135: 
          { return ATSTokenTypes.SORTDEF;
          }
        case 166: break;
        case 27: 
          { return ATSTokenTypes.RBRACKET;
          }
        case 167: break;
        case 39: 
          { return ATSTokenTypes.COMMENT_BLOCK;
          }
        case 168: break;
        case 11: 
          { return ATSTokenTypes.STRING;
          }
        case 169: break;
        case 38: 
          { return ATSTokenTypes.COMMENT_LINE;
          }
        case 170: break;
        case 25: 
          { return ATSTokenTypes.COMMA;
          }
        case 171: break;
        case 125: 
          { return ATSTokenTypes.DYNLOAD;
          }
        case 172: break;
        case 13: 
          { return ATSTokenTypes.LBRACKET;
          }
        case 173: break;
        case 114: 
          { return ATSTokenTypes.SRPIFDEF;
          }
        case 174: break;
        case 112: 
          { return ATSTokenTypes.DLRRAISE;
          }
        case 175: break;
        case 137: 
          { return ATSTokenTypes.SYMINTR;
          }
        case 176: break;
        case 12: 
          { return ATSTokenTypes.CHAR;
          }
        case 177: break;
        case 122: 
          { return ATSTokenTypes.STATIC;
          }
        case 178: break;
        case 157: 
          { return ATSTokenTypes.DLRVCOPYENV;
          }
        case 179: break;
        case 44: 
          { return ATSTokenTypes.QUOTELBRACKET;
          }
        case 180: break;
        case 57: 
          { return ATSTokenTypes.MINUSGT;
          }
        case 181: break;
        case 161: 
          { return ATSTokenTypes.DLREXTYPE_STRUCT;
          }
        case 182: break;
        case 19: 
          { return ATSTokenTypes.LT;
          }
        case 183: break;
        case 124: 
          { return ATSTokenTypes.MACDEF;
          }
        case 184: break;
        case 32: 
          { return ATSTokenTypes.IN;
          }
        case 185: break;
        case 16: 
          { return ATSTokenTypes.BANG;
          }
        case 186: break;
        case 48: 
          { return ATSTokenTypes.ATLBRACE;
          }
        case 187: break;
        case 154: 
          { return ATSTokenTypes.DLREXTMCALL;
          }
        case 188: break;
        case 45: 
          { return ATSTokenTypes.QUOTELBRACE;
          }
        case 189: break;
        case 134: 
          { return ATSTokenTypes.ABSTYPE;
          }
        case 190: break;
        case 69: 
          { return ATSTokenTypes.EQLTGT;
          }
        case 191: break;
        case 54: 
          { return ATSTokenTypes.GTDOT;
          }
        case 192: break;
        case 24: 
          { return ATSTokenTypes.TILDE;
          }
        case 193: break;
        case 17: 
          { return ATSTokenTypes.BQUOTE;
          }
        case 194: break;
        case 63: 
          { return ATSTokenTypes.LAM;
          }
        case 195: break;
        case 55: 
          { return ATSTokenTypes.HASHLBRACKETOLON;
          }
        case 196: break;
        case 47: 
          { return ATSTokenTypes.ATLBRACKET;
          }
        case 197: break;
        case 20: 
          { return ATSTokenTypes.DOLLAR;
          }
        case 198: break;
        case 119: 
          { return ATSTokenTypes.ASSUME;
          }
        case 199: break;
        case 74: 
          { return ATSTokenTypes.SIF;
          }
        case 200: break;
        case 93: 
          { return ATSTokenTypes.FREEAT;
          }
        case 201: break;
        case 84: 
          { return ATSTokenTypes.DLRREC;
          }
        case 202: break;
        case 53: 
          { return ATSTokenTypes.EQGT;
          }
        case 203: break;
        case 133: 
          { return ATSTokenTypes.SRPASSERT;
          }
        case 204: break;
        case 94: 
          { return ATSTokenTypes.FOLDAT;
          }
        case 205: break;
        case 79: 
          { return ATSTokenTypes.ELSE;
          }
        case 206: break;
        case 98: 
          { return ATSTokenTypes.SRPELSE;
          }
        case 207: break;
        case 66: 
          { return ATSTokenTypes.REC;
          }
        case 208: break;
        case 97: 
          { return ATSTokenTypes.SRPELIF;
          }
        case 209: break;
        case 129: 
          { return ATSTokenTypes.DLREXTVAL;
          }
        case 210: break;
        case 30: 
          { return ATSTokenTypes.QMARK;
          }
        case 211: break;
        case 106: 
          { return ATSTokenTypes.IMPORT;
          }
        case 212: break;
        case 146: 
          { return ATSTokenTypes.DLREXTKIND;
          }
        case 213: break;
        case 75: 
          { return ATSTokenTypes.TRY;
          }
        case 214: break;
        case 101: 
          { return ATSTokenTypes.BEGIN;
          }
        case 215: break;
        case 91: 
          { return ATSTokenTypes.FIXITY;
          }
        case 216: break;
        case 60: 
          { return ATSTokenTypes.PERCENTLPAREN;
          }
        case 217: break;
        case 136: 
          { return ATSTokenTypes.STALOAD;
          }
        case 218: break;
        case 144: 
          { return ATSTokenTypes.OVERLOAD;
          }
        case 219: break;
        case 153: 
          { return ATSTokenTypes.DLREXTFCALL;
          }
        case 220: break;
        case 108: 
          { return ATSTokenTypes.EXTERN;
          }
        case 221: break;
        case 132: 
          { return ATSTokenTypes.SRPDEFINE;
          }
        case 222: break;
        case 7: 
          { return ATSTokenTypes.INT;
          }
        case 223: break;
        case 67: 
          { return ATSTokenTypes.COMMENT;
          }
        case 224: break;
        case 110: 
          { return ATSTokenTypes.EXTVAR;
          }
        case 225: break;
        case 87: 
          { return ATSTokenTypes.TYPE;
          }
        case 226: break;
        case 149: 
          { return ATSTokenTypes.WITHTYPE;
          }
        case 227: break;
        case 121: 
          { return ATSTokenTypes.STADEF;
          }
        case 228: break;
        case 103: 
          { return ATSTokenTypes.VIEWAT;
          }
        case 229: break;
        case 83: 
          { return ATSTokenTypes.DLRLST;
          }
        case 230: break;
        case 46: 
          { return ATSTokenTypes.ATLPAREN;
          }
        case 231: break;
        case 43: 
          { return ATSTokenTypes.QUOTELPAREN;
          }
        case 232: break;
        case 109: 
          { return ATSTokenTypes.EXTYPE;
          }
        case 233: break;
        case 78: 
          { return ATSTokenTypes.CASE;
          }
        case 234: break;
        case 92: 
          { return ATSTokenTypes.LOCAL;
          }
        case 235: break;
        case 6: 
          { return ATSTokenTypes.WHITE_SPACE;
          }
        case 236: break;
        case 76: 
          { return ATSTokenTypes.VAL;
          }
        case 237: break;
        case 85: 
          { return ATSTokenTypes.DLRTUP;
          }
        case 238: break;
        case 72: 
          { return ATSTokenTypes.MINUSLTGT;
          }
        case 239: break;
        case 123: 
          { return ATSTokenTypes.WHILESTAR;
          }
        case 240: break;
        case 28: 
          { return ATSTokenTypes.RBRACE;
          }
        case 241: break;
        case 155: 
          { return ATSTokenTypes.DLRSHOWTYPE;
          }
        case 242: break;
        case 107: 
          { return ATSTokenTypes.NONFIX;
          }
        case 243: break;
        case 4: 
          { return ATSTokenTypes.IDENTIFIER;
          }
        case 244: break;
        case 5: 
          { return ATSTokenTypes.BACKSLASH;
          }
        case 245: break;
        case 141: 
          { return ATSTokenTypes.CLASSDEC;
          }
        case 246: break;
        case 61: 
          { return ATSTokenTypes.DLREFFMASK_ARG;
          }
        case 247: break;
        case 111: 
          { return ATSTokenTypes.DLRDELAY;
          }
        case 248: break;
        case 50: 
          { return ATSTokenTypes.COLONLT;
          }
        case 249: break;
        case 26: 
          { return ATSTokenTypes.SEMICOLON;
          }
        case 250: break;
        case 40: 
          { return ATSTokenTypes.DOTINT;
          }
        case 251: break;
        case 104: 
          { return ATSTokenTypes.WHILE;
          }
        case 252: break;
        case 56: 
          { return ATSTokenTypes.MINUSLT;
          }
        case 253: break;
        case 150: 
          { return ATSTokenTypes.IMPLEMENT;
          }
        case 254: break;
        case 148: 
          { return ATSTokenTypes.SRPELIFDEF;
          }
        case 255: break;
        case 88: 
          { return ATSTokenTypes.THEN;
          }
        case 256: break;
        case 14: 
          { return ATSTokenTypes.LBRACE;
          }
        case 257: break;
        case 29: 
          { return ATSTokenTypes.PERCENT;
          }
        case 258: break;
        case 99: 
          { return ATSTokenTypes.SRPTHEN;
          }
        case 259: break;
        case 34: 
          { return ATSTokenTypes.DO;
          }
        case 260: break;
        case 70: 
          { return ATSTokenTypes.EQGTGT;
          }
        case 261: break;
        case 62: 
          { return ATSTokenTypes.LET;
          }
        case 262: break;
        case 102: 
          { return ATSTokenTypes.SCASE;
          }
        case 263: break;
        case 105: 
          { return ATSTokenTypes.WHERE;
          }
        case 264: break;
        case 96: 
          { return ATSTokenTypes.EQSLASHEQGTGT;
          }
        case 265: break;
        case 117: 
          { return ATSTokenTypes.SRPERROR;
          }
        case 266: break;
        case 71: 
          { return ATSTokenTypes.SRPIF;
          }
        case 267: break;
        case 35: 
          { return ATSTokenTypes.FUN;
          }
        case 268: break;
        case 159: 
          { return ATSTokenTypes.DLRMYFILENAME;
          }
        case 269: break;
        case 22: 
          { return ATSTokenTypes.GT;
          }
        case 270: break;
        case 145: 
          { return ATSTokenTypes.DLREFFMASK;
          }
        case 271: break;
        case 151: 
          { return ATSTokenTypes.EXCEPTION;
          }
        case 272: break;
        case 82: 
          { return ATSTokenTypes.DOTLTGTDOT;
          }
        case 273: break;
        case 131: 
          { return ATSTokenTypes.SRPIFNDEF;
          }
        case 274: break;
        case 31: 
          { return ATSTokenTypes.FLOAT;
          }
        case 275: break;
        case 52: 
          { return ATSTokenTypes.EQLT;
          }
        case 276: break;
        case 15: 
          { return ATSTokenTypes.AT;
          }
        case 277: break;
        case 36: 
          { return ATSTokenTypes.OF;
          }
        case 278: break;
        case 95: 
          { return ATSTokenTypes.COMMENT_REST;
          }
        case 279: break;
        case 90: 
          { return ATSTokenTypes.WHEN;
          }
        case 280: break;
        case 59: 
          { return ATSTokenTypes.COMMALPAREN;
          }
        case 281: break;
        case 116: 
          { return ATSTokenTypes.SRPENDIF;
          }
        case 282: break;
        case 49: 
          { return ATSTokenTypes.BQUOTELPAREN;
          }
        case 283: break;
        case 3: 
          { throw new Error("Illegal character at " + yyline + ", " +
                              yycolumn +": <"+yytext()+">");
          }
        case 284: break;
        case 147: 
          { return ATSTokenTypes.SRPINCLUDE;
          }
        case 285: break;
        case 33: 
          { return ATSTokenTypes.IF;
          }
        case 286: break;
        case 138: 
          { return ATSTokenTypes.SYMELIM;
          }
        case 287: break;
        case 140: 
          { return ATSTokenTypes.TKINDEF;
          }
        case 288: break;
        case 10: 
          { return ATSTokenTypes.DOT;
          }
        case 289: break;
        case 118: 
          { return ATSTokenTypes.SRPPRINT;
          }
        case 290: break;
        case 18: 
          { return ATSTokenTypes.COLON;
          }
        case 291: break;
        case 58: 
          { return ATSTokenTypes.AS;
          }
        case 292: break;
        case 51: 
          { return ATSTokenTypes.GTLT;
          }
        case 293: break;
        case 127: 
          { return ATSTokenTypes.DLREXTERN;
          }
        case 294: break;
        case 139: 
          { return ATSTokenTypes.TYPEDEF;
          }
        case 295: break;
        case 89: 
          { return ATSTokenTypes.WITH;
          }
        case 296: break;
        case 23: 
          { return ATSTokenTypes.HASH;
          }
        case 297: break;
        case 156: 
          { return ATSTokenTypes.SRPELIFNDEF;
          }
        case 298: break;
        case 64: 
          { return ATSTokenTypes.END;
          }
        case 299: break;
        case 100: 
          { return ATSTokenTypes.ADDRAT;
          }
        case 300: break;
        case 42: 
          { return ATSTokenTypes.DOTLT;
          }
        case 301: break;
        case 81: 
          { return ATSTokenTypes.REFAT;
          }
        case 302: break;
        case 1: 
          { return ATSTokenTypes.EXTCODE;
          }
        case 303: break;
        case 130: 
          { return ATSTokenTypes.DLRARRPSZ;
          }
        case 304: break;
        case 115: 
          { return ATSTokenTypes.SRPUNDEF;
          }
        case 305: break;
        case 8: 
          { return ATSTokenTypes.RPAREN;
          }
        case 306: break;
        case 142: 
          { return ATSTokenTypes.DATASORT;
          }
        case 307: break;
        case 152: 
          { return ATSTokenTypes.DLRCONTINUE;
          }
        case 308: break;
        case 80: 
          { return ATSTokenTypes.FORSTAR;
          }
        case 309: break;
        case 128: 
          { return ATSTokenTypes.DLREXTYPE;
          }
        case 310: break;
        case 158: 
          { return ATSTokenTypes.DLRMYLOCATION;
          }
        case 311: break;
        case 37: 
          { return ATSTokenTypes.OP;
          }
        case 312: break;
        case 21: 
          { return ATSTokenTypes.EQ;
          }
        case 313: break;
        case 2: 
          { return ATSTokenTypes.NONE;
          }
        case 314: break;
        case 9: 
          { return ATSTokenTypes.LPAREN;
          }
        case 315: break;
        case 120: 
          { return ATSTokenTypes.STACST;
          }
        case 316: break;
        case 86: 
          { return ATSTokenTypes.EQSLASHEQGT;
          }
        case 317: break;
        case 73: 
          { return ATSTokenTypes.AND;
          }
        case 318: break;
        case 41: 
          { return ATSTokenTypes.DOTDOT;
          }
        case 319: break;
        case 126: 
          { return ATSTokenTypes.REQUIRE;
          }
        case 320: break;
        case 65: 
          { return ATSTokenTypes.FIX;
          }
        case 321: break;
        case 68: 
          { return ATSTokenTypes.DOTDOTDOT;
          }
        case 322: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                return ATSTokenTypes.EOF;
              }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
